{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shioaji \u00b6 Shioaji \u63d0\u4f9b\u4e86 .Net C# \u7248\u672c\u4f9b\u4f7f\u7528\u3002 \u5b89\u88dd \u00b6 Shioaji \u53ef\u4ee5\u5728 NuGet \u4e0a\u627e\u5230\uff0c\u5957\u4ef6\u540d\u7a31\u70ba Shioaji \u3002\u8acb\u5728 64 \u4f4d\u5143 \u7cfb\u7d71\u4e0a\u4f7f\u7528\uff0c\u4e14\u6211\u5011\u7684\u5c08\u6848\u662f\u4f7f\u7528 .NET Standard 2.0 \u958b\u767c\u3002\u6839\u64da \u5b98\u65b9 .NET \u6587\u4ef6 \uff0c\u5efa\u8b70\u60a8\u5c07\u5c08\u6848\u5347\u7d1a\u81f3 .NET Framework 4.6.1 \u6216\u66f4\u9ad8\u7248\u672c\u3002","title":"\u7e3d\u89bd"},{"location":"#shioaji","text":"Shioaji \u63d0\u4f9b\u4e86 .Net C# \u7248\u672c\u4f9b\u4f7f\u7528\u3002","title":"Shioaji"},{"location":"#_1","text":"Shioaji \u53ef\u4ee5\u5728 NuGet \u4e0a\u627e\u5230\uff0c\u5957\u4ef6\u540d\u7a31\u70ba Shioaji \u3002\u8acb\u5728 64 \u4f4d\u5143 \u7cfb\u7d71\u4e0a\u4f7f\u7528\uff0c\u4e14\u6211\u5011\u7684\u5c08\u6848\u662f\u4f7f\u7528 .NET Standard 2.0 \u958b\u767c\u3002\u6839\u64da \u5b98\u65b9 .NET \u6587\u4ef6 \uff0c\u5efa\u8b70\u60a8\u5c07\u5c08\u6848\u5347\u7d1a\u81f3 .NET Framework 4.6.1 \u6216\u66f4\u9ad8\u7248\u672c\u3002","title":"\u5b89\u88dd"},{"location":"quickstart/","text":"\u53ea\u9700\u4f7f\u7528\u6211\u5011\u7684 API \u5957\u4ef6\u5275\u5efa\u5be6\u4f8b\uff0c\u767b\u5165\u60a8\u7684\u5e33\u6236\u4e26\u555f\u7528\u8a8d\u8b49\uff0c\u7136\u5f8c\u60a8\u5c31\u53ef\u4ee5\u958b\u59cb\u4e0b\u55ae\u4e86\u3002 \u6ce8\u610f \u5728\u958b\u59cb\u524d\u8acb\u9084\u9700\u5b8c\u6210\u524d\u7f6e\u4f5c\u696d\uff0c\u5305\u542b \u958b\u6236 \u3001 \u670d\u52d9\u689d\u6b3e \u53ca Token \u3002 \u767b\u5165\u4e26\u555f\u7528\u6191\u8b49 \u00b6 version >=1.0 version<1.0 using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); _api . ca_activate ( \"C:/ekey/551/person_id/S/Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:/ekey/551/person_id/S/Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); \u8a02\u95b1\u884c\u60c5 \u00b6 \u8a02\u95b1\u884c\u60c5\u9700\u5c07\u5546\u54c1\u6a94\u5e36\u5165 Subscribe \u529f\u80fd\uff0c\u4e26\u6307\u5b9a\u884c\u60c5\u985e\u578b\uff0c\u5c31\u53ef\u4ee5\u63a5\u6536\u8cc7\u6599\u3002 _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . tick ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202012\" ], QuoteType . bidask ); \u884c\u60c5\u985e\u578b \u76ee\u524d\u6211\u5011\u652f\u6301 QuoteType \u4e2d\u7684\u5169\u7a2e\u884c\u60c5\u985e\u578b\u3002 \u4e0b\u55ae \u00b6 var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var _stockOrder = new StockOrder () { price = 16.5 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade );","title":"\u5feb\u901f\u5165\u9580"},{"location":"quickstart/#_1","text":"version >=1.0 version<1.0 using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); _api . ca_activate ( \"C:/ekey/551/person_id/S/Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:/ekey/551/person_id/S/Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" );","title":"\u767b\u5165\u4e26\u555f\u7528\u6191\u8b49"},{"location":"quickstart/#_2","text":"\u8a02\u95b1\u884c\u60c5\u9700\u5c07\u5546\u54c1\u6a94\u5e36\u5165 Subscribe \u529f\u80fd\uff0c\u4e26\u6307\u5b9a\u884c\u60c5\u985e\u578b\uff0c\u5c31\u53ef\u4ee5\u63a5\u6536\u8cc7\u6599\u3002 _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . tick ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202012\" ], QuoteType . bidask ); \u884c\u60c5\u985e\u578b \u76ee\u524d\u6211\u5011\u652f\u6301 QuoteType \u4e2d\u7684\u5169\u7a2e\u884c\u60c5\u985e\u578b\u3002","title":"\u8a02\u95b1\u884c\u60c5"},{"location":"quickstart/#_3","text":"var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var _stockOrder = new StockOrder () { price = 16.5 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade );","title":"\u4e0b\u55ae"},{"location":"upgrade/","text":"1.0 \u70ba\u4e3b\u8981\u7248\u672c\uff0c\u9019\u4efd\u6587\u4ef6\u5354\u52a9\u4f7f\u7528\u8005\u9077\u79fb\u5230\u7248\u672c 1.0\u3002 \u767b\u5165 \u00b6 \u767b\u5165\u53c3\u6578 person_id \u53ca password \u8b8a\u66f4\u70ba api_key \u53ca secret_key \u3002 \u60a8\u53ef\u4ee5\u5728 Token \u6df1\u5165\u4e86\u89e3\u5982\u4f55\u53d6\u5f97 API Key\u3002 In version>=1.0 version<1.0 using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); _api . ca_activate ( \"C:/ekey/551/person_id/S/Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:/ekey/551/person_id/S/Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); Out [{ account_type=F, person_id=A123456789, broker_id=F002000, account_id=1234567, signed=True, username=\"\" },{ account_type=H, person_id=A123456789, broker_id=9A95, account_id=1234567, signed=False, username=\"\" },{ account_type=S, person_id=A123456789, broker_id=9A95, account_id=1234567, signed=True, username=\"\" }] \u8b49\u5238\u4e0b\u55ae \u00b6 StockOrderType \u66f4\u6539\u70ba OrderType first_sell \u66f4\u6539\u70ba daytrade_short \uff0cenum StockFirstSell \u66f4\u6539\u70ba DayTradeShort Order version>=1.0 version<1.0 var _stockOrder = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; var _stockOrder = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = StockFirstSell . No , custom_field = \"Test\" }; \u59d4\u8a17\u56de\u5831 \u00b6 TFTOrder \u66f4\u6539\u70ba StockOrder Order Callback version>=1.0 version<1.0 OrderState . StockOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' c21b876d ' , ' seqno ' : ' 429832 ' , ' ordno ' : ' W2892 ' , ' action ' : ' Buy ' , ' price ' : 12.0 , ' quantity ' : 10 , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' }, ' status ' : { ' id ' : ' c21b876d ' , ' exchange_ts ' : 1583828972 , ' modified_price ' : 0 , ' cancel_quantity ' : 0 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } OrderState . TFTOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' c21b876d ' , ' seqno ' : ' 429832 ' , ' ordno ' : ' W2892 ' , ' action ' : ' Buy ' , ' price ' : 12.0 , ' quantity ' : 10 , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' }, ' status ' : { ' id ' : ' c21b876d ' , ' exchange_ts ' : 1583828972 , ' modified_price ' : 0 , ' cancel_quantity ' : 0 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } \u6210\u4ea4\u56de\u5831 \u00b6 TFTDeal \u66f4\u6539\u70ba StockDeal Deal Callback version>=1.0 version<1.0 OrderState . StockDeal { ' trade_id ' : ' 12 ab3456 ' , ' exchange_seq ' : ' 123456 ' , ' broker_id ' : ' your_broker_id ' , ' account_id ' : ' your_account_id ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' price ' : 12 , ' quantity ' : 10 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1583828972 } OrderState . TFTDeal { ' trade_id ' : ' 12 ab3456 ' , ' exchange_seq ' : ' 123456 ' , ' broker_id ' : ' your_broker_id ' , ' account_id ' : ' your_account_id ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' price ' : 12 , ' quantity ' : 10 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1583828972 } \u671f\u8ca8\u4e0b\u55ae \u00b6 FuturesOrderType \u66f4\u6539\u70ba OrderType Order verion>=1.0 verion<1.0 var _futOptOrder = new FutOptOrder () { price = 13770 , quantity = 1 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto }; var _futOptOrder = new FutOptOrder () { price = 17760 , quantity = 1 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = FutureOrderType . ROD , octype = OCType . Auto }; \u59d4\u8a17\u56de\u5831 \u00b6 FOrder \u66f4\u6539\u70ba FuturesOrder Order Event version>=1.0 version<1.0 OrderState . FuturesOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 02 c347f7 ' , ' seqno ' : ' 956201 ' , ' ordno ' : ' kY00H ' , ' action ' : ' Sell ' , ' price ' : 17760.0 , ' quantity ' : 1 , ' order_cond ' : None , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' market_type ' : ' Night ' , ' oc_type ' : ' New ' , ' subaccount ' : '' }, ' status ' : { ' id ' : ' 02 c347f7 ' , ' exchange_ts ' : 1625729890 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , \"web_id\" : \"P\" }, ' contract ' : { ' security_type ' : ' FUT ' , ' code ' : ' TXF ' , ' exchange ' : ' TIM ' , ' delivery_month ' : ' 202107 ' , ' strike_price ' : 0.0 , ' option_right ' : ' Future ' } } OrderState . FOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 02 c347f7 ' , ' seqno ' : ' 956201 ' , ' ordno ' : ' kY00H ' , ' action ' : ' Sell ' , ' price ' : 17760.0 , ' quantity ' : 1 , ' order_cond ' : None , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' market_type ' : ' Night ' , ' oc_type ' : ' New ' , ' subaccount ' : '' }, ' status ' : { ' id ' : ' 02 c347f7 ' , ' exchange_ts ' : 1625729890 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , \"web_id\" : \"P\" }, ' contract ' : { ' security_type ' : ' FUT ' , ' code ' : ' TXF ' , ' exchange ' : ' TIM ' , ' delivery_month ' : ' 202107 ' , ' strike_price ' : 0.0 , ' option_right ' : ' Future ' } } \u6210\u4ea4\u56de\u5831 \u00b6 FDeal \u66f4\u6539\u70ba FuturesDeal Deal Event version>=1.0 version<1.0 OrderState . FuturesDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } OrderState . FDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } \u6b77\u53f2\u884c\u60c5 \u00b6 Ticks \u65b0\u589e QueryType \u5e33\u52d9\u8cc7\u8a0a \u00b6 \u91cd\u65b0\u547d\u540dAPI 1. List Settlements \u66f4\u540d\u70ba Settlements 2. List ProfitLossSum \u66f4\u540d\u70ba List ProfitLossSummary \u65b0\u589e API ListPositionDetail \u6b32\u77ad\u89e3\u66f4\u591a\u5e33\u52d9API\uff0c\u8acb \u53c3\u898b \u3002 \u6700\u5f8c\u5728 GITHUB \u4e0a\u7d66\u6211\u5011\u652f\u6301\u8207\u9f13\u52f5\u5427","title":"\u5347\u7248\u6307\u5357"},{"location":"upgrade/#_1","text":"\u767b\u5165\u53c3\u6578 person_id \u53ca password \u8b8a\u66f4\u70ba api_key \u53ca secret_key \u3002 \u60a8\u53ef\u4ee5\u5728 Token \u6df1\u5165\u4e86\u89e3\u5982\u4f55\u53d6\u5f97 API Key\u3002 In version>=1.0 version<1.0 using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); _api . ca_activate ( \"C:/ekey/551/person_id/S/Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:/ekey/551/person_id/S/Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); Out [{ account_type=F, person_id=A123456789, broker_id=F002000, account_id=1234567, signed=True, username=\"\" },{ account_type=H, person_id=A123456789, broker_id=9A95, account_id=1234567, signed=False, username=\"\" },{ account_type=S, person_id=A123456789, broker_id=9A95, account_id=1234567, signed=True, username=\"\" }]","title":"\u767b\u5165"},{"location":"upgrade/#_2","text":"StockOrderType \u66f4\u6539\u70ba OrderType first_sell \u66f4\u6539\u70ba daytrade_short \uff0cenum StockFirstSell \u66f4\u6539\u70ba DayTradeShort Order version>=1.0 version<1.0 var _stockOrder = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; var _stockOrder = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = StockFirstSell . No , custom_field = \"Test\" };","title":"\u8b49\u5238\u4e0b\u55ae"},{"location":"upgrade/#_3","text":"TFTOrder \u66f4\u6539\u70ba StockOrder Order Callback version>=1.0 version<1.0 OrderState . StockOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' c21b876d ' , ' seqno ' : ' 429832 ' , ' ordno ' : ' W2892 ' , ' action ' : ' Buy ' , ' price ' : 12.0 , ' quantity ' : 10 , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' }, ' status ' : { ' id ' : ' c21b876d ' , ' exchange_ts ' : 1583828972 , ' modified_price ' : 0 , ' cancel_quantity ' : 0 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } OrderState . TFTOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' c21b876d ' , ' seqno ' : ' 429832 ' , ' ordno ' : ' W2892 ' , ' action ' : ' Buy ' , ' price ' : 12.0 , ' quantity ' : 10 , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' }, ' status ' : { ' id ' : ' c21b876d ' , ' exchange_ts ' : 1583828972 , ' modified_price ' : 0 , ' cancel_quantity ' : 0 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } }","title":"\u59d4\u8a17\u56de\u5831"},{"location":"upgrade/#_4","text":"TFTDeal \u66f4\u6539\u70ba StockDeal Deal Callback version>=1.0 version<1.0 OrderState . StockDeal { ' trade_id ' : ' 12 ab3456 ' , ' exchange_seq ' : ' 123456 ' , ' broker_id ' : ' your_broker_id ' , ' account_id ' : ' your_account_id ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' price ' : 12 , ' quantity ' : 10 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1583828972 } OrderState . TFTDeal { ' trade_id ' : ' 12 ab3456 ' , ' exchange_seq ' : ' 123456 ' , ' broker_id ' : ' your_broker_id ' , ' account_id ' : ' your_account_id ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' price ' : 12 , ' quantity ' : 10 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1583828972 }","title":"\u6210\u4ea4\u56de\u5831"},{"location":"upgrade/#_5","text":"FuturesOrderType \u66f4\u6539\u70ba OrderType Order verion>=1.0 verion<1.0 var _futOptOrder = new FutOptOrder () { price = 13770 , quantity = 1 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto }; var _futOptOrder = new FutOptOrder () { price = 17760 , quantity = 1 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = FutureOrderType . ROD , octype = OCType . Auto };","title":"\u671f\u8ca8\u4e0b\u55ae"},{"location":"upgrade/#_6","text":"FOrder \u66f4\u6539\u70ba FuturesOrder Order Event version>=1.0 version<1.0 OrderState . FuturesOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 02 c347f7 ' , ' seqno ' : ' 956201 ' , ' ordno ' : ' kY00H ' , ' action ' : ' Sell ' , ' price ' : 17760.0 , ' quantity ' : 1 , ' order_cond ' : None , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' market_type ' : ' Night ' , ' oc_type ' : ' New ' , ' subaccount ' : '' }, ' status ' : { ' id ' : ' 02 c347f7 ' , ' exchange_ts ' : 1625729890 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , \"web_id\" : \"P\" }, ' contract ' : { ' security_type ' : ' FUT ' , ' code ' : ' TXF ' , ' exchange ' : ' TIM ' , ' delivery_month ' : ' 202107 ' , ' strike_price ' : 0.0 , ' option_right ' : ' Future ' } } OrderState . FOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 02 c347f7 ' , ' seqno ' : ' 956201 ' , ' ordno ' : ' kY00H ' , ' action ' : ' Sell ' , ' price ' : 17760.0 , ' quantity ' : 1 , ' order_cond ' : None , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' market_type ' : ' Night ' , ' oc_type ' : ' New ' , ' subaccount ' : '' }, ' status ' : { ' id ' : ' 02 c347f7 ' , ' exchange_ts ' : 1625729890 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , \"web_id\" : \"P\" }, ' contract ' : { ' security_type ' : ' FUT ' , ' code ' : ' TXF ' , ' exchange ' : ' TIM ' , ' delivery_month ' : ' 202107 ' , ' strike_price ' : 0.0 , ' option_right ' : ' Future ' } }","title":"\u59d4\u8a17\u56de\u5831"},{"location":"upgrade/#_7","text":"FDeal \u66f4\u6539\u70ba FuturesDeal Deal Event version>=1.0 version<1.0 OrderState . FuturesDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 } OrderState . FDeal { \"trade_id\" : \"02c347f7\" , \"seqno\" : \"956344\" , \"ordno\" : \"ky00N11O\" , \"exchange_seq\" : \"a0000060\" , \"broker_id\" : \"F002000\" , \"account_id\" : \"9104000\" , \"action\" : \"Sell\" , \"code\" : \"TXF\" , \"price\" : 17650.0 , \"quantity\" : 4 , \"subaccount\" : \"\" , \"security_type\" : \"FUT\" , \"delivery_month\" : \"202107\" , \"strike_price\" : 0.0 , \"option_right\" : \"Future\" , \"market_type\" : \"Day\" , \"ts\" : 1625800369 }","title":"\u6210\u4ea4\u56de\u5831"},{"location":"upgrade/#_8","text":"Ticks \u65b0\u589e QueryType","title":"\u6b77\u53f2\u884c\u60c5"},{"location":"upgrade/#_9","text":"\u91cd\u65b0\u547d\u540dAPI 1. List Settlements \u66f4\u540d\u70ba Settlements 2. List ProfitLossSum \u66f4\u540d\u70ba List ProfitLossSummary \u65b0\u589e API ListPositionDetail \u6b32\u77ad\u89e3\u66f4\u591a\u5e33\u52d9API\uff0c\u8acb \u53c3\u898b \u3002 \u6700\u5f8c\u5728 GITHUB \u4e0a\u7d66\u6211\u5011\u652f\u6301\u8207\u9f13\u52f5\u5427","title":"\u5e33\u52d9\u8cc7\u8a0a"},{"location":"tutor/contract/","text":"\u5546\u54c1\u6a94\u5c07\u5728\u5f88\u591a\u5730\u65b9\u88ab\u4f7f\u7528\uff0c\u4f8b\u5982\u4e0b\u55ae\u3001\u8a02\u95b1\u884c\u60c5...\u7b49\u3002 \u7576 \u767b\u5165 \u6210\u529f\u5f8c\uff0c\u6703\u958b\u59cb\u4e0b\u8f09\u5546\u54c1\u6a94\u3002 \u5546\u54c1\u6a94\u8cc7\u8a0a \u00b6 \u76ee\u524d\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u5305\u542b:\u8b49\u5238\u3001\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u4ee5\u53ca\u6307\u6578\u3002\u53ef\u5f9e\u4e0b\u5217\u65b9\u6cd5\u66f4\u8a73\u7d30\u5f97\u5230\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u3002 In var _contract = _api . Contracts ; Console . WriteLine ( _contract ); Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) \u8b49\u5238 \u00b6 In var contract_2890 = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; Console . WriteLine ( contract_2890 . ToString ()); Out { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 12.25 , limit_down = 10.05 , reference = 11.15 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2020 / 12 / 28 , category = 17 , day_trade = Yes , } Stock: exchange ( Exchange ): \u4ea4\u6613\u6240 { OES , OTC , TSE ... \u7b49 } code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u5225 limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u65e5\u671f margin_trading_balance ( int ): \u878d\u8cc7\u9918\u984d short_selling_balance ( int ): \u878d\u5238\u9918\u984d day_trade ( DayTrade ): \u53ef\u5426\u7576\u6c96 { Yes , No , OnlyBuy } \u671f\u8ca8 \u00b6 In var contract_txf = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ]; Console . WriteLine ( contract_txf . ToString ()); Out { security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , } Future: code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u5225 limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u6642\u9593 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd underlying_kind ( str ): \u6a19\u7684\u985e\u578b \u9078\u64c7\u6b0a \u00b6 In var contract_opt = _api . Contracts . Options [ \"TXO\" ][ \"TXO20210309200P\" ]; Console . WriteLine ( contract_opt . ToString ()); Out { security_type = OPT , code = TXO09200O1 , category = TXO , symbol = TXO20210309200P , exchange = TAIFEX , delivery_month = 202103 , strike_price = 9200 , option_right = P , underlying_kind = I , limit_up = 1440 , limit_down = 0.1 , reference = 15 , update_date = 2020 / 12 / 28 , } Option: code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u578b limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u6642\u9593 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd strike_price ( int or float ): \u5c62\u7d04\u50f9 option_right ( OptionRight ): \u8cb7\u8ce3\u6b0a\u5225 underlying_kind ( str ): \u6a19\u7684\u985e\u578b \u6307\u6578 \u00b6 Indexs \u7269\u4ef6\u986f\u793a\u6240\u6709\u53ef\u4ee5\u652f\u63f4\u7684\u6307\u6578\u5546\u54c1\uff0c\u5176\u4ed6\u985e\u5225\u4ea6\u7136\u3002\u6307\u6578\u985e\u7684\u5546\u54c1\u4e0d\u652f\u63f4\u4e0b\u55ae\uff0c\u4f46\u5141\u8a31\u8a02\u95b1\u884c\u60c5\u3002 In var contract_idx = _api . Contracts . Indexs [ \"TSE\" ][ \"001\" ]; Console . WriteLine ( contract_idx . ToString ()); Out { security_type = IND , code = 001 , exchange = TSE , symbol = TSE001 , name = \u52a0\u6b0a , } Index: exchange ( Exchange ): \u4ea4\u6613\u6240 { OES , OTC , TSE ... \u7b49 } code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31","title":"\u5546\u54c1\u6a94"},{"location":"tutor/contract/#_1","text":"\u76ee\u524d\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u5305\u542b:\u8b49\u5238\u3001\u671f\u8ca8\u3001\u9078\u64c7\u6b0a\u4ee5\u53ca\u6307\u6578\u3002\u53ef\u5f9e\u4e0b\u5217\u65b9\u6cd5\u66f4\u8a73\u7d30\u5f97\u5230\u6211\u5011\u6240\u63d0\u4f9b\u7684\u5546\u54c1\u3002 In var _contract = _api . Contracts ; Console . WriteLine ( _contract ); Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO ))","title":"\u5546\u54c1\u6a94\u8cc7\u8a0a"},{"location":"tutor/contract/#_2","text":"In var contract_2890 = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; Console . WriteLine ( contract_2890 . ToString ()); Out { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 12.25 , limit_down = 10.05 , reference = 11.15 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2020 / 12 / 28 , category = 17 , day_trade = Yes , } Stock: exchange ( Exchange ): \u4ea4\u6613\u6240 { OES , OTC , TSE ... \u7b49 } code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u5225 limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u65e5\u671f margin_trading_balance ( int ): \u878d\u8cc7\u9918\u984d short_selling_balance ( int ): \u878d\u5238\u9918\u984d day_trade ( DayTrade ): \u53ef\u5426\u7576\u6c96 { Yes , No , OnlyBuy }","title":"\u8b49\u5238"},{"location":"tutor/contract/#_3","text":"In var contract_txf = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ]; Console . WriteLine ( contract_txf . ToString ()); Out { security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , } Future: code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u5225 limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u6642\u9593 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd underlying_kind ( str ): \u6a19\u7684\u985e\u578b","title":"\u671f\u8ca8"},{"location":"tutor/contract/#_4","text":"In var contract_opt = _api . Contracts . Options [ \"TXO\" ][ \"TXO20210309200P\" ]; Console . WriteLine ( contract_opt . ToString ()); Out { security_type = OPT , code = TXO09200O1 , category = TXO , symbol = TXO20210309200P , exchange = TAIFEX , delivery_month = 202103 , strike_price = 9200 , option_right = P , underlying_kind = I , limit_up = 1440 , limit_down = 0.1 , reference = 15 , update_date = 2020 / 12 / 28 , } Option: code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31 category ( str ): \u985e\u578b limit_up ( float ): \u6f32\u505c\u50f9 limit_down ( float ): \u8dcc\u505c\u50f9 reference ( float ): \u53c3\u8003\u50f9 update_date ( str ): \u66f4\u65b0\u6642\u9593 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd strike_price ( int or float ): \u5c62\u7d04\u50f9 option_right ( OptionRight ): \u8cb7\u8ce3\u6b0a\u5225 underlying_kind ( str ): \u6a19\u7684\u985e\u578b","title":"\u9078\u64c7\u6b0a"},{"location":"tutor/contract/#_5","text":"Indexs \u7269\u4ef6\u986f\u793a\u6240\u6709\u53ef\u4ee5\u652f\u63f4\u7684\u6307\u6578\u5546\u54c1\uff0c\u5176\u4ed6\u985e\u5225\u4ea6\u7136\u3002\u6307\u6578\u985e\u7684\u5546\u54c1\u4e0d\u652f\u63f4\u4e0b\u55ae\uff0c\u4f46\u5141\u8a31\u8a02\u95b1\u884c\u60c5\u3002 In var contract_idx = _api . Contracts . Indexs [ \"TSE\" ][ \"001\" ]; Console . WriteLine ( contract_idx . ToString ()); Out { security_type = IND , code = 001 , exchange = TSE , symbol = TSE001 , name = \u52a0\u6b0a , } Index: exchange ( Exchange ): \u4ea4\u6613\u6240 { OES , OTC , TSE ... \u7b49 } code ( str ): \u5546\u54c1\u4ee3\u78bc symbol ( str ): \u7b26\u865f name ( str ): \u5546\u54c1\u540d\u7a31","title":"\u6307\u6578"},{"location":"tutor/limit/","text":"\u70ba\u907f\u514d\u5f71\u97ff\u5176\u4ed6\u4f7f\u7528\u8005\u9023\u7dda\uff0c\u8acb\u9075\u5b88\u4ee5\u4e0b\u4f7f\u7528\u898f\u7bc4 \u00b6 \u884c\u60c5(data) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b CreditEnquire \u3001 ShortStockSources \u3001 Snapshots \u3001 Ticks \u3001 Kbars \u3002 \u5e33\u52d9(portfolio) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u965025\u6b21 \u5305\u542b ListPositions \u3001 ListPositionDetail \u3001 ListProfitLoss \u3001 ListProfitLossDetail \u3001 AccountBalance \u3001 Settlements \u3001 Margin \u3002 \u59d4\u8a17(order) : \u76f8\u95dc\u67e5\u8a62\uff0c10\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b PlaceOrder \u3001 UpdateStatus \u3001 UpdateOrder \u3001 CancelOrder \u3002 \u9023\u7dda\u9650\u5236: \u540c\u4e00\u6c38\u8c50\u91d1\u8b49\u5238 personId \uff0c\u50c5\u53ef\u4f7f\u7528\u6700\u591a5\u500b\u9023\u7dda Login() \u5373\u5efa\u7acb\u4e00\u500b\u9023\u7dda\u3002 \u767b\u5165\u9650\u5236: Login() \u4e00\u5929\u4e0a\u96501000\u6b21 \u82e5\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418 \u00b6 \u82e5\u7576\u65e5\u9023\u7e8c\u591a\u6b21\u8d85\u904e\u9650\u5236\uff0c\u672c\u516c\u53f8\u5c07\u66ab\u505c\u8a72IP\u53caID\u4f7f\u7528\u6b0a \u00b6 \u82e5ID\u88ab\u66ab\u505c\u4f7f\u7528\uff0c\u8acb\u6d3dShioaji\u7ba1\u7406\u4eba\u54e1 \u00b6","title":"\u4f7f\u7528\u9650\u5236"},{"location":"tutor/limit/#_1","text":"\u884c\u60c5(data) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b CreditEnquire \u3001 ShortStockSources \u3001 Snapshots \u3001 Ticks \u3001 Kbars \u3002 \u5e33\u52d9(portfolio) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u965025\u6b21 \u5305\u542b ListPositions \u3001 ListPositionDetail \u3001 ListProfitLoss \u3001 ListProfitLossDetail \u3001 AccountBalance \u3001 Settlements \u3001 Margin \u3002 \u59d4\u8a17(order) : \u76f8\u95dc\u67e5\u8a62\uff0c10\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b PlaceOrder \u3001 UpdateStatus \u3001 UpdateOrder \u3001 CancelOrder \u3002 \u9023\u7dda\u9650\u5236: \u540c\u4e00\u6c38\u8c50\u91d1\u8b49\u5238 personId \uff0c\u50c5\u53ef\u4f7f\u7528\u6700\u591a5\u500b\u9023\u7dda Login() \u5373\u5efa\u7acb\u4e00\u500b\u9023\u7dda\u3002 \u767b\u5165\u9650\u5236: Login() \u4e00\u5929\u4e0a\u96501000\u6b21","title":"\u70ba\u907f\u514d\u5f71\u97ff\u5176\u4ed6\u4f7f\u7528\u8005\u9023\u7dda\uff0c\u8acb\u9075\u5b88\u4ee5\u4e0b\u4f7f\u7528\u898f\u7bc4"},{"location":"tutor/limit/#_2","text":"","title":"\u82e5\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418"},{"location":"tutor/limit/#ipid","text":"","title":"\u82e5\u7576\u65e5\u9023\u7e8c\u591a\u6b21\u8d85\u904e\u9650\u5236\uff0c\u672c\u516c\u53f8\u5c07\u66ab\u505c\u8a72IP\u53caID\u4f7f\u7528\u6b0a"},{"location":"tutor/limit/#idshioaji","text":"","title":"\u82e5ID\u88ab\u66ab\u505c\u4f7f\u7528\uff0c\u8acb\u6d3dShioaji\u7ba1\u7406\u4eba\u54e1"},{"location":"tutor/login/","text":"\u767b\u5165\u5fc5\u9808\u64c1\u6709\u6c38\u8c50\u91d1\u5e33\u6236\u3002\u82e5\u4f60\u9084\u6c92\u6709\u64c1\u6c38\u8c50\u91d1\u5e33\u6236\uff0c\u53ef\u8a73\u898b \u958b\u6236 \u3002 Token login \u57281.0\u7248\u672c\u4e4b\u5f8c\uff0c\u6211\u5011\u5c07\u4f7f\u7528Token\u4f5c\u70ba\u6211\u5011\u7684\u767b\u5165\u65b9\u5f0f\uff0c\u7533\u8acbKEY\u53ef\u53c3\u898b \u6587\u4ef6 \u3002\u7576\u7248\u672c\u5c0f\u65bc1.0\uff0c\u6211\u5011\u4f7f\u7528\u5e33\u865f\u5bc6\u78bc\u4f5c\u70ba\u6211\u5011\u767b\u5165\u7684\u65b9\u6cd5\u3002 In version >=1.0 version<1.0 using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); Console . WriteLine ( _accounts ); using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); Console . WriteLine ( _accounts ); List Accounts \u00b6 There are 2 ways you can get your accounts: _api.Login() _api.ListAccounts() In version >=1.0 version<1.0 using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); Console . WriteLine ( _accounts ); using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); Console . WriteLine ( _accounts ); In: list_accounts Console . WriteLine ( _api . ListAccounts ()); Out [ {account_type=F, person_id=\"\", broker_id=\"\", account_id=\"\", signed=True, username=\"\",}, {account_type=H, person_id=\"\", broker_id=\"\", account_id=\"\", signed=False, username=\"\",}, {account_type=S, person_id=\"\", broker_id=\"\", account_id=\"\", signed=True, username=\"\",} ] \u5982\u679c\u5728\u5e33\u865f\u6e05\u55ae\u4e2d\u627e\u4e0d\u5230 signed \uff0c\u8acb\u81f3 \u670d\u52d9\u689d\u6b3e \u4e86\u89e3\u4f7f\u7528API\u670d\u52d9\u6240\u9700\u8981\u6b65\u9a5f\u3002 \u767b\u51fa \u00b6 \u767b\u51fa\u529f\u80fd\u5c07\u95dc\u9589\u5ba2\u6236\u7aef\u53ca\u670d\u52d9\u7aef\u4e4b\u9593\u7684\u9023\u63a5\u3002\u70ba\u4e86\u63d0\u4f9b\u512a\u8cea\u7684\u670d\u52d9\uff0c\u6211\u5011\u5f9e2021/08/06\u958b\u59cb\u5c07 \u9650\u5236 \u9023\u7dda\u6578\u3002\u5728\u4e0d\u4f7f\u7528\u7684\u6642\u5019\u7d42\u6b62\u7a0b\u5f0f\u662f\u4e00\u500b\u826f\u597d\u7684\u7fd2\u6163\u3002 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji ( simulation : true ); var res = _api . Logout (); Console . WriteLine ( res ); Out Disconnect True","title":"\u767b\u5165"},{"location":"tutor/login/#list-accounts","text":"There are 2 ways you can get your accounts: _api.Login() _api.ListAccounts() In version >=1.0 version<1.0 using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); Console . WriteLine ( _accounts ); using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); Console . WriteLine ( _accounts ); In: list_accounts Console . WriteLine ( _api . ListAccounts ()); Out [ {account_type=F, person_id=\"\", broker_id=\"\", account_id=\"\", signed=True, username=\"\",}, {account_type=H, person_id=\"\", broker_id=\"\", account_id=\"\", signed=False, username=\"\",}, {account_type=S, person_id=\"\", broker_id=\"\", account_id=\"\", signed=True, username=\"\",} ] \u5982\u679c\u5728\u5e33\u865f\u6e05\u55ae\u4e2d\u627e\u4e0d\u5230 signed \uff0c\u8acb\u81f3 \u670d\u52d9\u689d\u6b3e \u4e86\u89e3\u4f7f\u7528API\u670d\u52d9\u6240\u9700\u8981\u6b65\u9a5f\u3002","title":"List Accounts"},{"location":"tutor/login/#_1","text":"\u767b\u51fa\u529f\u80fd\u5c07\u95dc\u9589\u5ba2\u6236\u7aef\u53ca\u670d\u52d9\u7aef\u4e4b\u9593\u7684\u9023\u63a5\u3002\u70ba\u4e86\u63d0\u4f9b\u512a\u8cea\u7684\u670d\u52d9\uff0c\u6211\u5011\u5f9e2021/08/06\u958b\u59cb\u5c07 \u9650\u5236 \u9023\u7dda\u6578\u3002\u5728\u4e0d\u4f7f\u7528\u7684\u6642\u5019\u7d42\u6b62\u7a0b\u5f0f\u662f\u4e00\u500b\u826f\u597d\u7684\u7fd2\u6163\u3002 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji ( simulation : true ); var res = _api . Logout (); Console . WriteLine ( res ); Out Disconnect True","title":"\u767b\u51fa"},{"location":"tutor/order_deal_event/","text":"Order & Deal Event is a report of order action. When you place order, cancel order and update order, it will return an OrderState. OrderState is order info. For Example \u00b6 Stock \u00b6 Stock jupyter link Place Order \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 } Set order callback \u00b6 In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 } Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Price \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Quantity \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Order deal event"},{"location":"tutor/order_deal_event/#for-example","text":"","title":"For Example"},{"location":"tutor/order_deal_event/#stock","text":"Stock jupyter link","title":"Stock"},{"location":"tutor/order_deal_event/#place-order","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 }","title":"Place Order"},{"location":"tutor/order_deal_event/#set-order-callback","text":"In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 }","title":"Set order callback"},{"location":"tutor/order_deal_event/#cancel-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Cancel Order"},{"location":"tutor/order_deal_event/#update-price","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Price"},{"location":"tutor/order_deal_event/#update-quantity","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Quantity"},{"location":"tutor/simulation/","text":"\u4f7f\u7528\u8005\u80fd\u5148\u5728\u6a21\u64ec\u74b0\u5883\u719f\u6089\u6211\u5011\u6240\u63d0\u4f9b\u7684\u670d\u52d9\uff0c\u53ef\u907f\u514d\u5728\u6b63\u5f0f\u74b0\u5883\u64cd\u4f5c\u5931\u8aa4\u9020\u6210\u8ca1\u7269\u7684\u640d\u5931\u3002\u4ee5\u4e0b\u70ba\u6a21\u64ec\u74b0\u5883\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u3002 \u6a21\u64ec\u74b0\u5883 _api = new Shioaji ( true ); \u53ef\u4f7f\u7528\u7684APIs \u00b6 \u884c\u60c5\u8cc7\u6599 1. Subscribe 2. UnSubscribe 3. Ticks 4. Kbars 5. Snapshots 6. ShortStockSources 7. CreditEnquire 8. Scanners \u4e0b\u55ae 1. PlaceOrder 2. UpdateOrder 3. CancelOrder 4. UpdateStatus 5. ListTrades \u5e33\u52d9 1. ListPositions 2. ListProfitLoss","title":"\u6a21\u64ec\u6a21\u5f0f"},{"location":"tutor/simulation/#apis","text":"\u884c\u60c5\u8cc7\u6599 1. Subscribe 2. UnSubscribe 3. Ticks 4. Kbars 5. Snapshots 6. ShortStockSources 7. CreditEnquire 8. Scanners \u4e0b\u55ae 1. PlaceOrder 2. UpdateOrder 3. CancelOrder 4. UpdateStatus 5. ListTrades \u5e33\u52d9 1. ListPositions 2. ListProfitLoss","title":"\u53ef\u4f7f\u7528\u7684APIs"},{"location":"tutor/accounting/account_balance/","text":"\u7528\u65bc\u67e5\u8a62\u73fe\u8ca8\u4ea4\u5272\u5e33\u6236\u9918\u984d\uff0c\u9700\u8981\u5148 \u767b\u5165 \u3002 In var accountBalance = _api . AccountBalance (); Console . WriteLine ( accountBalance ); Out { acc_balance = 12345 , date = 2022 - 07 - 28 14 : 19 : 58 , errmsg = \"\" } AccountBalance status ( FetchStatus ): \u8cc7\u6599\u56de\u50b3\u72c0\u614b acc_balance ( float ): \u9918\u984d date ( str ): \u67e5\u8a62\u65e5\u671f errmsg ( str ): \u932f\u8aa4\u8a0a\u606f","title":"\u9280\u884c\u9918\u984d"},{"location":"tutor/accounting/margin/","text":"\u7528\u65bc\u67e5\u8a62\u671f\u8ca8\u5e33\u6236\u7684\u4fdd\u8b49\u91d1\uff0c\u9700\u5148 \u767b\u5165 \u3002 In var margin = _api . Margin (); Console . WriteLine ( margin ); Out { yesterday_balance = 7215.0 , today_balance = 1019.0 , deposit_withdrawal = 0.0 , fee = 40.0 , tax = 6.0 , initial_margin = 0.0 , maintenance_margin = 0.0 , margin_call = 0.0 , risk_indicator = 109.0 , royalty_revenue_expenditure =- 6150.0 , equity = 1019.0 , equity_amount = 11419.0 , option_openbuy_market_value = 10400.0 , option_opensell_market_value = 0.0 , option_open_position = 4250.0 , option_settle_profitloss = 0.0 , future_open_position = 0.0 , today_future_open_position = 0.0 , future_settle_profitloss = 0.0 , available_margin = 1019.0 , plus_margin = 0.0 , plus_margin_indicator = 0.0 , security_collateral_amount = 0.0 , order_margin_premium = 0.0 , collateral_amount = 0.0 } Margin yesterday_balance ( decimal ): \u524d\u65e5\u9918\u984d today_balance ( decimal ): \u4eca\u65e5\u9918\u984d deposit_withdrawal ( decimal ): \u5b58\u63d0 fee ( decimal ): \u624b\u7e8c\u8cbb tax ( decimal ): \u671f\u4ea4\u7a05 initial_margin ( decimal ): \u539f\u59cb\u4fdd\u8b49\u91d1 maintenance_margin ( decimal ): \u7dad\u6301\u4fdd\u8b49\u91d1 margin_call ( decimal ): \u8ffd\u7e73\u4fdd\u8b49\u91d1 risk_indicator ( decimal ): \u98a8\u96aa\u6307\u6a19 royalty_revenue_expenditure ( decimal ): \u6b0a\u5229\u91d1\u6536\u5165\u8207\u652f\u51fa equity ( decimal ): \u6b0a\u76ca\u6578 equity_amount ( decimal ): \u6b0a\u76ca\u7e3d\u503c option_openbuy_market_value ( decimal ): \u672a\u6c96\u92b7\u8cb7\u65b9\u9078\u64c7\u6b0a\u5e02\u503c option_opensell_market_value ( decimal ): \u672a\u6c96\u92b7\u8ce3\u65b9\u9078\u64c7\u6b0a\u5e02\u503c option_open_position ( decimal ): \u53c3\u8003\u672a\u5e73\u5009\u9078\u64c7\u6b0a\u640d\u76ca option_settle_profitloss ( decimal ): \u53c3\u8003\u9078\u64c7\u6b0a\u5e73\u5009\u640d\u76ca future_open_position ( decimal ): \u672a\u6c96\u92b7\u671f\u8ca8\u6d6e\u52d5\u640d\u76ca today_future_open_position ( decimal ): \u53c3\u8003\u7576\u65e5\u672a\u6c96\u92b7\u671f\u8ca8\u6d6e\u52d5\u640d\u76ca future_settle_profitloss ( decimal ): \u671f\u8ca8\u5e73\u5009\u640d\u76ca available_margin ( decimal ): \u53ef\u52d5\u7528 ( \u51fa\u91d1 ) \u4fdd\u8b49\u91d1 plus_margin ( decimal ): \u4f9d\u300c\u52a0\u6536\u4fdd\u8b49\u91d1\u6307\u6a19\u300d\u6240\u52a0\u6536\u4e4b\u4fdd\u8b49\u91d1 plus_margin_indicator ( decimal ): \u52a0\u6536\u4fdd\u8b49\u91d1\u6307\u6a19 security_collateral_amount ( decimal ): \u6709\u50f9\u8b49\u5238\u62b5\u7e73\u7e3d\u984d order_margin_premium ( decimal ): \u59d4\u8a17\u4fdd\u8b49\u91d1\u53ca\u59d4\u8a17\u6b0a\u5229\u91d1 collateral_amount ( decimal ): \u6709\u50f9\u54c1\u984d","title":"\u4fdd\u8b49\u91d1"},{"location":"tutor/accounting/position/","text":"\u7528\u65bc\u67e5\u8a62\u5e33\u6236\u672a\u5be6\u73fe\u640d\u76ca\uff0c\u9700\u8981\u5148 \u767b\u5165 \u3002 \u672a\u5be6\u73fe\u640d\u76ca \u00b6 \u8b49\u5238 \u00b6 \u8b49\u5238 \u6574\u80a1 \u96f6\u80a1 var positions = _api . ListPositions ( account : _api . StockAccount ); Console . WriteLine ( positions ); foreach ( var position in ( List < StockPosition > ) positions ) { Console . WriteLine ( position ); } var positions = _api . ListPositions ( account : _api . StockAccount , unit : Unit . Share ); Console . WriteLine ( positions ); foreach ( var position in ( List < StockPosition > ) positions ) { Console . WriteLine ( position ); } Out \u6574\u80a1 \u96f6\u80a1 System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockPosition ] { yd_quantity = 2 , cond = Cash , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 , id = 0 , code = 1101 , direction = Buy , quantity = 2 , price = 45.35 , last_price = 31.0 , pnl =- 31786.0 } System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockPosition ] { yd_quantity = 2199 , cond = Cash , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 , id = 0 , code = 1101 , direction = Buy , quantity = 2199 , price = 45.35 , last_price = 39.5 , pnl =- 13158.0 } StockPosition id ( int ): \u90e8\u4f4d\u4ee3\u78bc code ( string ): \u5546\u54c1\u4ee3\u78bc direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } quantity ( int ): \u6578\u91cf price ( decimal ): \u5e73\u5747\u50f9\u683c last_price ( decimal ): \u76ee\u524d\u80a1\u50f9 pnl ( decimal ): \u640d\u76ca yd_quantity ( int ): \u6628\u65e5\u5eab\u5b58\u6578\u91cf cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } margin_purchase_amount ( int ): \u878d\u8cc7\u91d1\u984d collateral ( int ): \u64d4\u4fdd\u54c1 short_sale_margin ( int ): \u4fdd\u8b49\u91d1 interest ( int ): \u9664\u606f \u671f\u8ca8\u9078\u64c7\u6b0a \u00b6 \u671f\u8ca8 var positions = _api . ListPositions ( account : _api . FutureAccount ); Console . WriteLine ( positions ); foreach ( var position in ( List < FuturePosition > ) positions ) { Console . WriteLine ( position ); } Out System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . FuturePosition ] { id = 0 , code = TX400130J2 , direction = Buy , quantity = 1 , price = 68.0 , last_price = 78.0 , pnl = 500.0 } FuturePosition id ( int ): \u90e8\u4f4d\u4ee3\u78bc code ( string ): \u5546\u54c1\u4ee3\u78bc direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } quantity ( int ): \u6578\u91cf price ( decimal ): \u5e73\u5747\u50f9\u683c last_price ( decimal ): \u76ee\u524d\u50f9\u683c pnl ( decimal ): \u640d\u76ca \u672a\u5be6\u73fe\u640d\u76ca\u660e\u7d30 \u00b6 \u8b49\u5238 \u00b6 \u8b49\u5238 var listPositions = _api . ListPositions (); var positionDetail = _api . ListPositionDetail ( _api . StockAccount , listPositions [ 0 ]. id ); foreach ( var detail in ( List < StockPositionDetail > ) positionDetail ) { Console . WriteLine ( $\"PositionDetail: {detail}\" ); } Out System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockPositionDetail ] { code = 2377 , date = 2021 - 05 - 06 , quantity = 1 , price = 180998.0 , last_price = 141006.0 , cond = Cash , ex_dividends = 16600 , interest = 0 , margintrading_amt = 0 , collateral = 0 , dseq = IB859 , direction = Buy , pnl =- 39992.0 , currency = TWD , fee = 98.0 } StockPositionDetail code ( string ): \u5546\u54c1\u4ee3\u78bc date ( string ): \u4ea4\u6613\u65e5\u671f quantity ( int ): \u6578\u91cf price ( decimal ): \u50f9\u683c last_price ( decimal ): \u76ee\u524d\u80a1\u50f9 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } ex_dividends ( int ): \u9664\u606f\u91d1\u984d interest ( int ): \u9664\u606f margintrading_amt ( int ): \u878d\u8cc7\u91d1\u984d collateral ( int ): \u64d4\u4fdd\u54c1 dseq ( string ): \u59d4\u8a17\u66f8\u865f direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } pnl ( decimal ): \u640d\u76ca currency ( string ): \u5e63\u5225 { NTD , USD , HKD , EUR , CAD , BAS } fee ( decimal ): \u4ea4\u6613\u624b\u7e8c\u8cbb \u671f\u8ca8\u9078\u64c7\u6b0a \u00b6 \u671f\u8ca8 var listPositions = _api . ListPositions ( account : _api . FutureAccount ); var positionDetail = _api . ListPositionDetail ( _api . FutureAccount , listPositions [ 0 ]. id ); foreach ( var detail in ( List < FuturePositionDetail > ) positionDetail ) { Console . WriteLine ( $\"PositionDetail: {detail}\" ); } Out System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . FuturePositionDetail ] { entry_quantity = 1 , date = 2023 - 02 - 14 , code = MXFC3 , quantity = 1 , price = 15611.0 , last_price = 15542.0 , dseq = tA0n8 , direction = Buy , pnl =- 3450.0 , currency = TWD , fee = 0 } FuturePositionDetail code ( string ): \u5546\u54c1\u4ee3\u78bc date ( string ): \u4ea4\u6613\u65e5\u671f quantity ( int ): \u6578\u91cf price ( decimal ): \u50f9\u683c last_price ( decimal ): \u76ee\u524d\u80a1\u50f9 dseq ( string ): \u59d4\u8a17\u66f8\u865f direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } pnl ( decimal ): \u640d\u76ca currency ( string ): \u5e63\u5225 { NTD , USD , HKD , EUR , CAD , BAS } fee ( decimal ): \u4ea4\u6613\u624b\u7e8c\u8cbb entry_quantity (): \u65b0\u5009\u6578\u91cf","title":"\u672a\u5be6\u73fe\u640d\u76ca"},{"location":"tutor/accounting/position/#_1","text":"","title":"\u672a\u5be6\u73fe\u640d\u76ca"},{"location":"tutor/accounting/position/#_2","text":"\u8b49\u5238 \u6574\u80a1 \u96f6\u80a1 var positions = _api . ListPositions ( account : _api . StockAccount ); Console . WriteLine ( positions ); foreach ( var position in ( List < StockPosition > ) positions ) { Console . WriteLine ( position ); } var positions = _api . ListPositions ( account : _api . StockAccount , unit : Unit . Share ); Console . WriteLine ( positions ); foreach ( var position in ( List < StockPosition > ) positions ) { Console . WriteLine ( position ); } Out \u6574\u80a1 \u96f6\u80a1 System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockPosition ] { yd_quantity = 2 , cond = Cash , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 , id = 0 , code = 1101 , direction = Buy , quantity = 2 , price = 45.35 , last_price = 31.0 , pnl =- 31786.0 } System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockPosition ] { yd_quantity = 2199 , cond = Cash , margin_purchase_amount = 0 , collateral = 0 , short_sale_margin = 0 , interest = 0 , id = 0 , code = 1101 , direction = Buy , quantity = 2199 , price = 45.35 , last_price = 39.5 , pnl =- 13158.0 } StockPosition id ( int ): \u90e8\u4f4d\u4ee3\u78bc code ( string ): \u5546\u54c1\u4ee3\u78bc direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } quantity ( int ): \u6578\u91cf price ( decimal ): \u5e73\u5747\u50f9\u683c last_price ( decimal ): \u76ee\u524d\u80a1\u50f9 pnl ( decimal ): \u640d\u76ca yd_quantity ( int ): \u6628\u65e5\u5eab\u5b58\u6578\u91cf cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } margin_purchase_amount ( int ): \u878d\u8cc7\u91d1\u984d collateral ( int ): \u64d4\u4fdd\u54c1 short_sale_margin ( int ): \u4fdd\u8b49\u91d1 interest ( int ): \u9664\u606f","title":"\u8b49\u5238"},{"location":"tutor/accounting/position/#_3","text":"\u671f\u8ca8 var positions = _api . ListPositions ( account : _api . FutureAccount ); Console . WriteLine ( positions ); foreach ( var position in ( List < FuturePosition > ) positions ) { Console . WriteLine ( position ); } Out System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . FuturePosition ] { id = 0 , code = TX400130J2 , direction = Buy , quantity = 1 , price = 68.0 , last_price = 78.0 , pnl = 500.0 } FuturePosition id ( int ): \u90e8\u4f4d\u4ee3\u78bc code ( string ): \u5546\u54c1\u4ee3\u78bc direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } quantity ( int ): \u6578\u91cf price ( decimal ): \u5e73\u5747\u50f9\u683c last_price ( decimal ): \u76ee\u524d\u50f9\u683c pnl ( decimal ): \u640d\u76ca","title":"\u671f\u8ca8\u9078\u64c7\u6b0a"},{"location":"tutor/accounting/position/#_4","text":"","title":"\u672a\u5be6\u73fe\u640d\u76ca\u660e\u7d30"},{"location":"tutor/accounting/position/#_5","text":"\u8b49\u5238 var listPositions = _api . ListPositions (); var positionDetail = _api . ListPositionDetail ( _api . StockAccount , listPositions [ 0 ]. id ); foreach ( var detail in ( List < StockPositionDetail > ) positionDetail ) { Console . WriteLine ( $\"PositionDetail: {detail}\" ); } Out System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockPositionDetail ] { code = 2377 , date = 2021 - 05 - 06 , quantity = 1 , price = 180998.0 , last_price = 141006.0 , cond = Cash , ex_dividends = 16600 , interest = 0 , margintrading_amt = 0 , collateral = 0 , dseq = IB859 , direction = Buy , pnl =- 39992.0 , currency = TWD , fee = 98.0 } StockPositionDetail code ( string ): \u5546\u54c1\u4ee3\u78bc date ( string ): \u4ea4\u6613\u65e5\u671f quantity ( int ): \u6578\u91cf price ( decimal ): \u50f9\u683c last_price ( decimal ): \u76ee\u524d\u80a1\u50f9 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } ex_dividends ( int ): \u9664\u606f\u91d1\u984d interest ( int ): \u9664\u606f margintrading_amt ( int ): \u878d\u8cc7\u91d1\u984d collateral ( int ): \u64d4\u4fdd\u54c1 dseq ( string ): \u59d4\u8a17\u66f8\u865f direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } pnl ( decimal ): \u640d\u76ca currency ( string ): \u5e63\u5225 { NTD , USD , HKD , EUR , CAD , BAS } fee ( decimal ): \u4ea4\u6613\u624b\u7e8c\u8cbb","title":"\u8b49\u5238"},{"location":"tutor/accounting/position/#_6","text":"\u671f\u8ca8 var listPositions = _api . ListPositions ( account : _api . FutureAccount ); var positionDetail = _api . ListPositionDetail ( _api . FutureAccount , listPositions [ 0 ]. id ); foreach ( var detail in ( List < FuturePositionDetail > ) positionDetail ) { Console . WriteLine ( $\"PositionDetail: {detail}\" ); } Out System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . FuturePositionDetail ] { entry_quantity = 1 , date = 2023 - 02 - 14 , code = MXFC3 , quantity = 1 , price = 15611.0 , last_price = 15542.0 , dseq = tA0n8 , direction = Buy , pnl =- 3450.0 , currency = TWD , fee = 0 } FuturePositionDetail code ( string ): \u5546\u54c1\u4ee3\u78bc date ( string ): \u4ea4\u6613\u65e5\u671f quantity ( int ): \u6578\u91cf price ( decimal ): \u50f9\u683c last_price ( decimal ): \u76ee\u524d\u80a1\u50f9 dseq ( string ): \u59d4\u8a17\u66f8\u865f direction ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } pnl ( decimal ): \u640d\u76ca currency ( string ): \u5e63\u5225 { NTD , USD , HKD , EUR , CAD , BAS } fee ( decimal ): \u4ea4\u6613\u624b\u7e8c\u8cbb entry_quantity (): \u65b0\u5009\u6578\u91cf","title":"\u671f\u8ca8\u9078\u64c7\u6b0a"},{"location":"tutor/accounting/profit_loss/","text":"\u9700\u8981\u5148 \u767b\u9304 \u3002 \u5df2\u5be6\u73fe\u640d\u76ca \u00b6 In Stock Future var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2021-03-01\" , end_date : \"2021-03-31\" account : _api . StockAccount ); Console . WriteLine ( listProfitLoss ); foreach ( var profitLoss in ( List < StockProfitLoss > ) listProfitLoss ) { Console . WriteLine ( $\"{profitLoss}\" ); } var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2022-10-19\" , end_date : \"2022-10-19\" , account : _api . FutureAccount ); Console . WriteLine ( listProfitLoss ); foreach ( var profitLoss in ( List < FutureProfitLoss > ) listProfitLoss ) { Console . WriteLine ( $\"{profitLoss}\" ); } Out Stock Future System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockProfitLoss ] { id = 0 , seqno = 21272 , dseq = ID884 , price = 40.3 , pr_ratio = 0.0048 , cond = Cash , code = 2031 , quantity = 1 , pnl = 191.0 , date = 2021 - 03 - 15 } System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . FutureProfitLoss ] { id = 0 , entry_price = 63 , cover_price = 0 , tax = 3 , fee = 20 , code = TXO01350J2 , quantity = 1 , pnl =- 3150.0 , date = 20221019 } Attributes: Stock Future id ( int ): \u53ef\u5229\u7528\u6b64 id \u67e5\u8a62\u660e\u7d30 code ( string ): \u5546\u54c1\u4ee3\u78bc seqno ( string ): seqno no . dseq ( string ): seqno no . quantity ( int ): \u6578\u91cf price ( decimal ): \u50f9\u683c pnl ( fldecimaloat ): \u640d\u76ca pr_ratio ( decimal ): \u640d\u76ca\u6bd4 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } date ( string ): \u4ea4\u6613\u65e5\u671f id ( int ): \u53ef\u5229\u7528\u6b64 id \u67e5\u8a62\u660e\u7d30 code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf pnl ( decimal ): \u640d\u76ca date ( string ): \u4ea4\u6613\u65e5\u671f entry_price ( int ): \u9032\u5009\u50f9\u683c cover_price ( int ): \u5e73\u5009\u50f9\u683c tax ( int ): \u4ea4\u6613\u7a05 fee ( int ): \u4ea4\u6613\u624b\u7e8c\u8cbb \u5df2\u5be6\u73fe\u640d\u76ca - \u660e\u7d30 \u00b6 \u53ef\u5f9e\u91dd\u5c0d ListProfitLossDetail \u5f97\u5230\u7684\u7d50\u679c\uff0c\u5c07 id \u5e36\u5165 detail_id \u67e5\u8a62\u8a72\u7b46\u660e\u7d30\u3002 In Stock Future var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2021-03-01\" , end_date : \"2021-03-31\" , account : _api . StockAccount ); Console . ReadKey (); var listProfitLossDetail = _api . ListProfitLossDetail ( detail_id : listProfitLoss [ 0 ]. id ); Console . WriteLine ( $\"{listProfitLossDetail}\" ); foreach ( var detail in ( List < StockProfitDetail > ) listProfitLossDetail ) { Console . WriteLine ( $\"{detail}\" ); } var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2022-10-19\" , end_date : \"2022-10-19\" , account : _api . FutureAccount ); Console . ReadKey (); var listProfitLossDetail = _api . ListProfitLossDetail ( detail_id : listProfitLoss [ 0 ]. id ); Console . WriteLine ( $\"{listProfitLossDetail}\" ); foreach ( var detail in ( List < FutureProfitDetail > ) listProfitLossDetail ) { Console . WriteLine ( $\"{detail}\" ); } Out Stock Future System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockProfitDetail ] { price = 39.95 , cost = 39969 , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , shortselling_fee = 0 , ex_dividend_amt = 0 , interest = 0 , trade_type = Common , cond = Cash , date = 2021 - 03 - 11 , code = 2031 , quantity = 1 , dseq = IN383 , fee = 19 , tax = 0 , currency = NTD } System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . FutureProfitDetail ] { direction = Buy , entry_price = 56 , cover_price = 0 , pnl =- 2800 , date = 20221019 , code = TXO01350J2 , quantity = 1 , dseq = vA0op , fee = 20 , tax = 3 , currency = NTD } Attributes: Stock Future date ( string ): \u4ea4\u6613\u65e5\u671f code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf dseq ( string ): \u59d4\u8a17\u66f8\u865f fee ( int ): \u4ea4\u6613\u624b\u7e8c\u8cbb tax ( int ): \u4ea4\u6613\u7a05 currency ( string ): \u5e63\u5225 { NTD , USD , HKD , EUR , CAD , BAS } price ( decimal ): \u6210\u4ea4\u55ae\u50f9 cost ( int ): \u4ed8\u51fa\u6210\u672c rep_margintrading_amt ( int ): \u511f\u9084\u878d\u8cc7\u91d1\u984d rep_collateral ( int ): \u511f\u9084\u64d4\u4fdd\u54c1 rep_margin ( int ): \u511f\u9084\u4fdd\u8b49\u91d1 shortselling_fee ( decimal ): \u878d\u5238\u624b\u7e8c\u8cbb ex_dividend_amt : \u9664\u606f\u91d1\u984d interest ( int ): \u5229\u606f trade_type ( TradeType ): { Common , DayTrade } cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } date ( string ): \u4ea4\u6613\u65e5\u671f code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf dseq ( string ): \u59d4\u8a17\u66f8\u865f fee ( decimal ): \u4ea4\u6613\u624b\u7e8c\u8cbb tax ( int ): \u4ea4\u6613\u7a05 currency ( string ): \u5e63\u5225 { NTD , USD , HKD , EUR , CAD , BAS } direction ( Action ): \u8cb7\u8ce3\u5225 { Buy , Sell } entry_price ( decimal ): \u9032\u5009\u50f9\u683c cover_price ( decimal ): \u5e73\u5009\u50f9\u683c pnl ( decimal ): \u640d\u76ca \u5df2\u5be6\u73fe\u640d\u76ca - \u5f59\u7e3d \u00b6 \u7528\u65bc\u67e5\u8a62\u4e00\u6bb5\u6642\u9593\u5167\u7684\u640d\u76ca\u5f59\u7e3d\u3002 In Stock Future var pfSumTotal = _api . ListProfitLossSummary ( begin_date : \"2021-03-01\" , end_date : \"2021-03-31\" , account : _api . StockAccount ); Console . WriteLine ( pfSumTotal ); var pfSumTotal = _api . ListProfitLossSummary ( begin_date : \"2022-10-19\" , end_date : \"2022-10-19\" , account : _api . FutureAccount ); Console . WriteLine ( pfSumTotal ); Out Stock Future { profitloss_summary = [ { entry_cost=111600, cover_cost=108200, buy_cost=111655, sell_cost=107903, pr_ratio=-3.36, cond=Cash, code=2338, quantity=2000, entry_price=55, cover_price=54, pnl=-3752, currency=NTD }, ] , total = { entry_amount = 0 , cover_amount = 0 , quantity = 8000 , buy_cost = 291092 , sell_cost = 288172 , pnl =- 2920.0 , pr_ratio =- 1.0 } } { profitloss_summary = [ { direction=Buy, tax=6, fee=40, code=TXO01350J2, quantity=2, entry_price=59, cover_price=0, pnl=-5950, currency=NTD }, ] , total = { entry_amount = 0 , cover_amount = 0 , quantity = 2 , buy_cost = 0 , sell_cost = 0 , pnl =- 5950.0 , pr_ratio = 0.0 } } Attributes: Stock Future code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf entry_price ( int ): \u9032\u5009\u50f9\u683c cover_price ( int ): \u5e73\u5009\u50f9\u683c pnl ( decimal ): \u640d\u76ca currency ( string ): \u5e63\u5225 entry_cost ( int ): \u9032\u5009\u91d1\u984d ( \u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05 ) cover_cost ( int ): \u5e73\u5009\u91d1\u984d ( \u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05 ) buy_cost ( int ): \u4ed8\u51fa\u6210\u672c sell_cost ( int ): \u8ce3\u51fa\u6536\u5165 pr_ratio ( decimal ): \u640d\u76ca\u6bd4 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf entry_price ( int ): \u9032\u5009\u50f9\u683c cover_price ( int ): \u5e73\u5009\u50f9\u683c pnl ( decimal ): \u640d\u76ca currency ( string ): \u5e63\u5225 direction ( Action ): \u8cb7\u8ce3\u5225 { Buy , Sell } tax ( int ): \u4ea4\u6613\u7a05 fee ( int ): \u4ea4\u6613\u624b\u7e8c\u8cbb","title":"\u5df2\u5be6\u73fe\u640d\u76ca"},{"location":"tutor/accounting/profit_loss/#_1","text":"In Stock Future var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2021-03-01\" , end_date : \"2021-03-31\" account : _api . StockAccount ); Console . WriteLine ( listProfitLoss ); foreach ( var profitLoss in ( List < StockProfitLoss > ) listProfitLoss ) { Console . WriteLine ( $\"{profitLoss}\" ); } var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2022-10-19\" , end_date : \"2022-10-19\" , account : _api . FutureAccount ); Console . WriteLine ( listProfitLoss ); foreach ( var profitLoss in ( List < FutureProfitLoss > ) listProfitLoss ) { Console . WriteLine ( $\"{profitLoss}\" ); } Out Stock Future System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockProfitLoss ] { id = 0 , seqno = 21272 , dseq = ID884 , price = 40.3 , pr_ratio = 0.0048 , cond = Cash , code = 2031 , quantity = 1 , pnl = 191.0 , date = 2021 - 03 - 15 } System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . FutureProfitLoss ] { id = 0 , entry_price = 63 , cover_price = 0 , tax = 3 , fee = 20 , code = TXO01350J2 , quantity = 1 , pnl =- 3150.0 , date = 20221019 } Attributes: Stock Future id ( int ): \u53ef\u5229\u7528\u6b64 id \u67e5\u8a62\u660e\u7d30 code ( string ): \u5546\u54c1\u4ee3\u78bc seqno ( string ): seqno no . dseq ( string ): seqno no . quantity ( int ): \u6578\u91cf price ( decimal ): \u50f9\u683c pnl ( fldecimaloat ): \u640d\u76ca pr_ratio ( decimal ): \u640d\u76ca\u6bd4 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } date ( string ): \u4ea4\u6613\u65e5\u671f id ( int ): \u53ef\u5229\u7528\u6b64 id \u67e5\u8a62\u660e\u7d30 code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf pnl ( decimal ): \u640d\u76ca date ( string ): \u4ea4\u6613\u65e5\u671f entry_price ( int ): \u9032\u5009\u50f9\u683c cover_price ( int ): \u5e73\u5009\u50f9\u683c tax ( int ): \u4ea4\u6613\u7a05 fee ( int ): \u4ea4\u6613\u624b\u7e8c\u8cbb","title":"\u5df2\u5be6\u73fe\u640d\u76ca"},{"location":"tutor/accounting/profit_loss/#-","text":"\u53ef\u5f9e\u91dd\u5c0d ListProfitLossDetail \u5f97\u5230\u7684\u7d50\u679c\uff0c\u5c07 id \u5e36\u5165 detail_id \u67e5\u8a62\u8a72\u7b46\u660e\u7d30\u3002 In Stock Future var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2021-03-01\" , end_date : \"2021-03-31\" , account : _api . StockAccount ); Console . ReadKey (); var listProfitLossDetail = _api . ListProfitLossDetail ( detail_id : listProfitLoss [ 0 ]. id ); Console . WriteLine ( $\"{listProfitLossDetail}\" ); foreach ( var detail in ( List < StockProfitDetail > ) listProfitLossDetail ) { Console . WriteLine ( $\"{detail}\" ); } var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2022-10-19\" , end_date : \"2022-10-19\" , account : _api . FutureAccount ); Console . ReadKey (); var listProfitLossDetail = _api . ListProfitLossDetail ( detail_id : listProfitLoss [ 0 ]. id ); Console . WriteLine ( $\"{listProfitLossDetail}\" ); foreach ( var detail in ( List < FutureProfitDetail > ) listProfitLossDetail ) { Console . WriteLine ( $\"{detail}\" ); } Out Stock Future System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . StockProfitDetail ] { price = 39.95 , cost = 39969 , rep_margintrading_amt = 0 , rep_collateral = 0 , rep_margin = 0 , shortselling_fee = 0 , ex_dividend_amt = 0 , interest = 0 , trade_type = Common , cond = Cash , date = 2021 - 03 - 11 , code = 2031 , quantity = 1 , dseq = IN383 , fee = 19 , tax = 0 , currency = NTD } System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . FutureProfitDetail ] { direction = Buy , entry_price = 56 , cover_price = 0 , pnl =- 2800 , date = 20221019 , code = TXO01350J2 , quantity = 1 , dseq = vA0op , fee = 20 , tax = 3 , currency = NTD } Attributes: Stock Future date ( string ): \u4ea4\u6613\u65e5\u671f code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf dseq ( string ): \u59d4\u8a17\u66f8\u865f fee ( int ): \u4ea4\u6613\u624b\u7e8c\u8cbb tax ( int ): \u4ea4\u6613\u7a05 currency ( string ): \u5e63\u5225 { NTD , USD , HKD , EUR , CAD , BAS } price ( decimal ): \u6210\u4ea4\u55ae\u50f9 cost ( int ): \u4ed8\u51fa\u6210\u672c rep_margintrading_amt ( int ): \u511f\u9084\u878d\u8cc7\u91d1\u984d rep_collateral ( int ): \u511f\u9084\u64d4\u4fdd\u54c1 rep_margin ( int ): \u511f\u9084\u4fdd\u8b49\u91d1 shortselling_fee ( decimal ): \u878d\u5238\u624b\u7e8c\u8cbb ex_dividend_amt : \u9664\u606f\u91d1\u984d interest ( int ): \u5229\u606f trade_type ( TradeType ): { Common , DayTrade } cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } date ( string ): \u4ea4\u6613\u65e5\u671f code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf dseq ( string ): \u59d4\u8a17\u66f8\u865f fee ( decimal ): \u4ea4\u6613\u624b\u7e8c\u8cbb tax ( int ): \u4ea4\u6613\u7a05 currency ( string ): \u5e63\u5225 { NTD , USD , HKD , EUR , CAD , BAS } direction ( Action ): \u8cb7\u8ce3\u5225 { Buy , Sell } entry_price ( decimal ): \u9032\u5009\u50f9\u683c cover_price ( decimal ): \u5e73\u5009\u50f9\u683c pnl ( decimal ): \u640d\u76ca","title":"\u5df2\u5be6\u73fe\u640d\u76ca - \u660e\u7d30"},{"location":"tutor/accounting/profit_loss/#-_1","text":"\u7528\u65bc\u67e5\u8a62\u4e00\u6bb5\u6642\u9593\u5167\u7684\u640d\u76ca\u5f59\u7e3d\u3002 In Stock Future var pfSumTotal = _api . ListProfitLossSummary ( begin_date : \"2021-03-01\" , end_date : \"2021-03-31\" , account : _api . StockAccount ); Console . WriteLine ( pfSumTotal ); var pfSumTotal = _api . ListProfitLossSummary ( begin_date : \"2022-10-19\" , end_date : \"2022-10-19\" , account : _api . FutureAccount ); Console . WriteLine ( pfSumTotal ); Out Stock Future { profitloss_summary = [ { entry_cost=111600, cover_cost=108200, buy_cost=111655, sell_cost=107903, pr_ratio=-3.36, cond=Cash, code=2338, quantity=2000, entry_price=55, cover_price=54, pnl=-3752, currency=NTD }, ] , total = { entry_amount = 0 , cover_amount = 0 , quantity = 8000 , buy_cost = 291092 , sell_cost = 288172 , pnl =- 2920.0 , pr_ratio =- 1.0 } } { profitloss_summary = [ { direction=Buy, tax=6, fee=40, code=TXO01350J2, quantity=2, entry_price=59, cover_price=0, pnl=-5950, currency=NTD }, ] , total = { entry_amount = 0 , cover_amount = 0 , quantity = 2 , buy_cost = 0 , sell_cost = 0 , pnl =- 5950.0 , pr_ratio = 0.0 } } Attributes: Stock Future code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf entry_price ( int ): \u9032\u5009\u50f9\u683c cover_price ( int ): \u5e73\u5009\u50f9\u683c pnl ( decimal ): \u640d\u76ca currency ( string ): \u5e63\u5225 entry_cost ( int ): \u9032\u5009\u91d1\u984d ( \u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05 ) cover_cost ( int ): \u5e73\u5009\u91d1\u984d ( \u4e0d\u542b\u624b\u7e8c\u8cbb\u53ca\u4ea4\u6613\u7a05 ) buy_cost ( int ): \u4ed8\u51fa\u6210\u672c sell_cost ( int ): \u8ce3\u51fa\u6536\u5165 pr_ratio ( decimal ): \u640d\u76ca\u6bd4 cond ( StockOrderCond ): { Cash : \u73fe\u80a1 ( \u9810\u8a2d\u503c ), Netting : \u9918\u984d\u4ea4\u5272 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 , Emerging : \u8208\u6ac3 } code ( string ): \u5546\u54c1\u4ee3\u78bc quantity ( int ): \u6578\u91cf entry_price ( int ): \u9032\u5009\u50f9\u683c cover_price ( int ): \u5e73\u5009\u50f9\u683c pnl ( decimal ): \u640d\u76ca currency ( string ): \u5e63\u5225 direction ( Action ): \u8cb7\u8ce3\u5225 { Buy , Sell } tax ( int ): \u4ea4\u6613\u7a05 fee ( int ): \u4ea4\u6613\u624b\u7e8c\u8cbb","title":"\u5df2\u5be6\u73fe\u640d\u76ca - \u5f59\u7e3d"},{"location":"tutor/accounting/settlements/","text":"\u7528\u65bc\u67e5\u8a62\u4ea4\u5272\u6b3e\uff0c\u9700\u8981\u5148 \u767b\u9304 \u3002 In var settlement = _api . Settlements (); Console . WriteLine ( settlement ); Out [ {date=2022-10-18, amount=0.0, T=0}, {date=2022-10-19, amount=0.0, T=1}, {date=2022-10-20, amount=0.0, T=2} ] Attributes: date ( string ): \u4ea4\u5272\u65e5\u671f amount ( decimal ): \u4ea4\u5272\u91d1\u984d T ( int ): Tday","title":"\u7d50\u7b97"},{"location":"tutor/advanced/nonblock/","text":"\u9996\u5148\uff0c\u8b93\u6211\u5011\u4f86\u4e86\u89e3\u4ec0\u9ebc\u662f\u300cBlocking\u300d\uff1f\u5982\u679c\u4e00\u500b\u51fd\u6578\u9700\u8981\u7b49\u5f85\u67d0\u4e9b\u64cd\u4f5c\u5b8c\u6210\u624d\u80fd\u7e7c\u7e8c\u57f7\u884c\uff0c\u90a3\u9ebc\u5b83\u5c31\u662f\u4e00\u500b\u300cblocking\u300d\u51fd\u6578\u3002\u7121\u8ad6\u4f60\u662f\u9032\u884c I/O \u6216\u662f CPU \u76f8\u95dc\u4efb\u52d9\uff0c\u6bcf\u500b\u51fd\u6578\u90fd\u662f blocking \u7684\uff0c\u56e0\u70ba\u4efb\u4f55\u64cd\u4f5c\u90fd\u9700\u8981\u82b1\u8cbb\u4e00\u5b9a\u7684\u6642\u9593\u3002\u5982\u679c\u4e00\u500b\u51fd\u6578\u6b63\u5728\u57f7\u884c\u9700\u8981\u5927\u91cf CPU \u904b\u7b97\u7684\u4efb\u52d9\uff0c\u90a3\u9ebc\u5b83\u6703\u963b\u6b62\u8a72\u51fd\u6578\u8fd4\u56de\uff1b\u540c\u6a23\u5730\uff0c\u5982\u679c\u4e00\u500b\u51fd\u6578\u6b63\u5728\u8a66\u5716\u5f9e\u6578\u64da\u5eab\u4e2d\u53d6\u5f97\u67d0\u4e9b\u8cc7\u6599\uff0c\u5b83\u6703\u4e00\u76f4\u7b49\u5f85\u7d50\u679c\u8fd4\u56de\uff0c\u76f4\u5230\u7d50\u679c\u8fd4\u56de\u70ba\u6b62\u624d\u7e7c\u7e8c\u57f7\u884c\u3002 \u76f8\u53cd\uff0c\u7576\u57f7\u884c\u975e\u963b\u585e(non-blocking)\u64cd\u4f5c\u6642\uff0c\u5b83\u6c38\u9060\u4e0d\u6703\u7b49\u5f85\u64cd\u4f5c\u5b8c\u6210\u3002\u5982\u679c\u5617\u8a66\u5728\u77ed\u6642\u9593\u5167\u767c\u9001\u5927\u91cf\u8acb\u6c42\uff0c\u975e\u963b\u585e\u6a21\u5f0f\u975e\u5e38\u6709\u7528\u3002\u70ba\u4e86\u8b93\u60a8\u4e86\u89e3\u963b\u585e\u548c\u975e\u963b\u585e\u6a21\u5f0f\u4e4b\u9593\u7684\u5340\u5225\uff0c\u6211\u5011\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6bd4\u8f03\u7684\u4f8b\u5b50\u3002 Shioaji\u63d0\u4f9b Blocking \u548c Non-Blocking \u6a21\u5f0f\uff0c\u53ea\u9700\u8a2d\u5b9a timeout \u7684\u503c\u5373\u53ef\u3002timeout\u9810\u8a2d\u70ba5000\uff08\u6beb\u79d2\uff09\uff0c\u8868\u793a\u51fd\u6578\u6700\u591a\u7b49\u5f855\u79d2\u3002 \u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae \u00b6 \u5c07 PlaceOrder \u51fd\u6578\u4e2d\u8a2d\u7f6e timeout = 0 \u3002 In IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var stockOrder = new StockOrder () { price = 16.4 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"914\" }; var trade = new Trade (); trade = _api . PlaceOrder ( contract : contract , order : stockOrder , timeout : 0 , cb : order_cb ); Console . WriteLine ( trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 09 / 26 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 , }, order = { action = Buy , price = 15.7 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , account = { account_type = S , person_id = PERSON_ID , broker_id = BROKER_ID , account_id = ACCOUNT_ID , signed = True , username = USERNAME , }, custom_field = test , ca = , }, status = { status = Inactive , order_ts = 0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } \u5728\u975e\u963b\u585e\u6a21\u5f0f\u4e2d\u53d6\u5f97\u7684 Trade \u7269\u4ef6\uff0c\u56e0\u70ba\u59d4\u8a17\u55ae\u4ecd\u5728\u50b3\u8f38\u4e2d\u9084\u672a\u9001\u81f3\u4ea4\u6613\u6240\uff0c\u6240\u4ee5\u6703\u7f3a\u5c11\u4e00\u4e9b\u8cc7\u8a0a\u3002\u5728 Order \u7269\u4ef6\u4e2d\u6c92\u6709 id \u548c seqno \uff0c OrderStatus \u7269\u4ef6\u4e2d\u6c92\u6709 id \u3001 status_code \u3001 order_datetime \u548c Deals \uff0c status \u986f\u793a\u70ba Inactive \u3002\u5728\u975e\u963b\u585e\u6a21\u5f0f\u4e2d\u8981\u53d6\u5f97\u4e0a\u8ff0\u63d0\u5230\u7684\u8cc7\u8a0a\u53ef\u5229\u7528 \u59d4\u8a17\u56de\u5831 \u548c \u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae\u56de\u8abf \u5169\u7a2e\u65b9\u5f0f\u3002 \u59d4\u8a17\u56de\u5831 \u00b6 Out OrderState . StockOrder { \"operation\" : { \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" : { \"id\" : \"8bbe0c24\" , \"seqno\" : \"612978\" , \"ordno\" : \"IB919\" , \"account\" : { \"account_type\" : \"S\" , \"person_id\" : \"\" , \"broker_id\" : \"\" , \"account_id\" : \"\" , \"signed\" : true }, \"action\" : \"Buy\" , \"price\" : 15.7 , \"quantity\" : 1 , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"order_cond\" : \"Cash\" , \"order_lot\" : \"Common\" , \"custom_field\" : \"914\" }, \"status\" : { \"id\" : \"8bbe0c24\" , \"exchange_ts\" : 1664152597 , \"modified_price\" : 0 , \"cancel_quantity\" : 0 , \"order_quantity\" : 1 , \"web_id\" : \"137\" }, \"contract\" : { \"security_type\" : \"STK\" , \"exchange\" : \"TSE\" , \"code\" : \"2890\" , \"symbol\" : \"\" , \"name\" : \"\" , \"currency\" : \"TWD\" } } \u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae\u56de\u8abf \u00b6 In private static void PlaceOrder ( Shioaji _api ) { IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var stockOrder = new StockOrder () { price = 15.7 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; var trade = _api . PlaceOrder ( contract : contract , order : stockOrder , timeout : 0 , cb : order_cb // only work in non-blocking mode ); } private static void order_cb ( Trade trade ) { Console . WriteLine ( $\"MY_ORDER_CB: {trade}\" ); } Out: place order callback MY_ORDER_CB : { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 09 / 26 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 , }, order = { action = Buy , price = 15.7 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = 8 bbe0c24 , seqno = 612978 , ordno = IB919 , account = { account_type = S , person_id = PERSON_ID , broker_id = BROKER_ID , account_id = ACCOUNT_ID , signed = True , username = USERNAME , }, custom_field = test , ca = , }, status = { id = 8 bbe0c24 , status = PendingSubmit , status_code = 0 , order_ts = 1664152597 , msg = \u59d4\u8a17\u6210\u529f , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } \u652f\u63f4\u975e\u7b49\u5f85\u6a21\u5f0f\u7684\u51fd\u6578 - PlaceOrder - UpdateOrder - CancelOrder - UpdateStatus","title":"\u975e\u963b\u585e\u6a21\u5f0f\u7bc4\u4f8b"},{"location":"tutor/advanced/nonblock/#_1","text":"\u5c07 PlaceOrder \u51fd\u6578\u4e2d\u8a2d\u7f6e timeout = 0 \u3002 In IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var stockOrder = new StockOrder () { price = 16.4 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"914\" }; var trade = new Trade (); trade = _api . PlaceOrder ( contract : contract , order : stockOrder , timeout : 0 , cb : order_cb ); Console . WriteLine ( trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 09 / 26 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 , }, order = { action = Buy , price = 15.7 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , account = { account_type = S , person_id = PERSON_ID , broker_id = BROKER_ID , account_id = ACCOUNT_ID , signed = True , username = USERNAME , }, custom_field = test , ca = , }, status = { status = Inactive , order_ts = 0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } \u5728\u975e\u963b\u585e\u6a21\u5f0f\u4e2d\u53d6\u5f97\u7684 Trade \u7269\u4ef6\uff0c\u56e0\u70ba\u59d4\u8a17\u55ae\u4ecd\u5728\u50b3\u8f38\u4e2d\u9084\u672a\u9001\u81f3\u4ea4\u6613\u6240\uff0c\u6240\u4ee5\u6703\u7f3a\u5c11\u4e00\u4e9b\u8cc7\u8a0a\u3002\u5728 Order \u7269\u4ef6\u4e2d\u6c92\u6709 id \u548c seqno \uff0c OrderStatus \u7269\u4ef6\u4e2d\u6c92\u6709 id \u3001 status_code \u3001 order_datetime \u548c Deals \uff0c status \u986f\u793a\u70ba Inactive \u3002\u5728\u975e\u963b\u585e\u6a21\u5f0f\u4e2d\u8981\u53d6\u5f97\u4e0a\u8ff0\u63d0\u5230\u7684\u8cc7\u8a0a\u53ef\u5229\u7528 \u59d4\u8a17\u56de\u5831 \u548c \u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae\u56de\u8abf \u5169\u7a2e\u65b9\u5f0f\u3002","title":"\u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae"},{"location":"tutor/advanced/nonblock/#_2","text":"Out OrderState . StockOrder { \"operation\" : { \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" : { \"id\" : \"8bbe0c24\" , \"seqno\" : \"612978\" , \"ordno\" : \"IB919\" , \"account\" : { \"account_type\" : \"S\" , \"person_id\" : \"\" , \"broker_id\" : \"\" , \"account_id\" : \"\" , \"signed\" : true }, \"action\" : \"Buy\" , \"price\" : 15.7 , \"quantity\" : 1 , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"order_cond\" : \"Cash\" , \"order_lot\" : \"Common\" , \"custom_field\" : \"914\" }, \"status\" : { \"id\" : \"8bbe0c24\" , \"exchange_ts\" : 1664152597 , \"modified_price\" : 0 , \"cancel_quantity\" : 0 , \"order_quantity\" : 1 , \"web_id\" : \"137\" }, \"contract\" : { \"security_type\" : \"STK\" , \"exchange\" : \"TSE\" , \"code\" : \"2890\" , \"symbol\" : \"\" , \"name\" : \"\" , \"currency\" : \"TWD\" } }","title":"\u59d4\u8a17\u56de\u5831"},{"location":"tutor/advanced/nonblock/#_3","text":"In private static void PlaceOrder ( Shioaji _api ) { IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var stockOrder = new StockOrder () { price = 15.7 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; var trade = _api . PlaceOrder ( contract : contract , order : stockOrder , timeout : 0 , cb : order_cb // only work in non-blocking mode ); } private static void order_cb ( Trade trade ) { Console . WriteLine ( $\"MY_ORDER_CB: {trade}\" ); } Out: place order callback MY_ORDER_CB : { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 09 / 26 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 , }, order = { action = Buy , price = 15.7 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = 8 bbe0c24 , seqno = 612978 , ordno = IB919 , account = { account_type = S , person_id = PERSON_ID , broker_id = BROKER_ID , account_id = ACCOUNT_ID , signed = True , username = USERNAME , }, custom_field = test , ca = , }, status = { id = 8 bbe0c24 , status = PendingSubmit , status_code = 0 , order_ts = 1664152597 , msg = \u59d4\u8a17\u6210\u529f , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } \u652f\u63f4\u975e\u7b49\u5f85\u6a21\u5f0f\u7684\u51fd\u6578 - PlaceOrder - UpdateOrder - CancelOrder - UpdateStatus","title":"\u975e\u963b\u585e\u6a21\u5f0f\u4e0b\u55ae\u56de\u8abf"},{"location":"tutor/advanced/touchorder/","text":"Touch Price Order \u00b6 Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touchorder"},{"location":"tutor/advanced/touchorder/#touch-price-order","text":"Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touch Price Order"},{"location":"tutor/callback/event_cb/","text":"\u6211\u5011\u4f7f\u7528solace\u4f5c\u70bamesh broker\u3002\u4e8b\u4ef6\u53ef\u8996\u70ba\u4f60\u8207solace\u7684\u9023\u63a5\u72c0\u614b\u3002\u5982\u679c\u4f60\u6c92\u6709\u76f8\u95dc\u7db2\u8def\u7d93\u9a57\uff0c\u53ef\u4ee5\u7565\u904e\u6b64\u90e8\u5206\u3002\u4e0d\u7528\u64d4\u5fc3\u5728\u4e0d\u7528\u4efb\u4f55\u7684\u8a2d\u5b9a\u4e0b\uff0c\u6211\u5011\u5c07\u91cd\u9023\u9810\u8a2d\u70ba50\u6b21\u3002\u53ea\u9700\u8981\u8acb\u4f60\u78ba\u4fdd\u4f60\u7684\u7db2\u7d61\u9023\u63a5\u72c0\u614b\u6b63\u5e38\u3002 \u8a2d\u5b9a\u4e8b\u4ef6callback\uff0c\u5982\u540c\u5831\u50f9callback\u7684\u8a2d\u5b9a\u65b9\u5f0f\u3002 In public class Program { private static void myEB ( int respCode , int eventCode , string eventInfo , string eventStatus ) { Console . WriteLine ( $\"myEB -Response Code: {respCode} | Event code: {eventCode} | Info: {eventInfo} | Event: {eventStatus}\" ); } private static void myQuoteCB_v1 ( Exchange exchange , dynamic quote ) { Console . WriteLine ( $\"QuoteCB_v1 | Exchange.{exchange} {quote.GetType().Name} {quote}\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); // version >= 1.0 var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); // version <1.0 // var _accounts = _api.Login(\"PERSON_ID\", \"PASSWORD\"); _api . SetQuoteCallback_v1 ( myQuoteCB_v1 ); _api . SetEventCallback ( myEB ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202304\" ], QuoteType . bidask , version : QuoteVersion . v1 ); } } Out myEB - Response Code : 0 | Event code : 16 | Info : QUO / v1 / FOP / */ TFE / TXFD3 | Event : SubscriptionOk \u4e8b\u4ef6\u4ee3\u78bc \u00b6 Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"\u4e8b\u4ef6"},{"location":"tutor/callback/event_cb/#_1","text":"Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"\u4e8b\u4ef6\u4ee3\u78bc"},{"location":"tutor/callback/orderdeal_event/","text":"\u6bcf\u6b21\u4f7f\u7528 PlaceOrder \u3001 UpdateOrder \u6216\u8005 CancelOrder \u6642\uff0c\u7686\u6703\u6536\u5230\u4f86\u81ea\u4ea4\u6613\u6240\u7684\u59d4\u8a17\u6216\u6210\u4ea4\u56de\u5831\u3002 \u8655\u7406\u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831 \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528 SetOrderCallback \u4f86\u8655\u7406\u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u986f\u793a\uff0c\u81ea\u88fd\u7684\u59d4\u8a17\u56de\u5831\u51fd\u6578( order_cb )\u6703\u5148\u5370 my_order_callback \u7136\u5f8c\u624d\u5370\u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831\u3002 \u8a2d\u5b9a\u59d4\u8a17\u56de\u5831\u51fd\u5f0f private static void order_cb ( OrderState orderState , dynamic msg ) { Console . WriteLine ( \"my_order_callback\" ); Console . WriteLine ( $\"OrderState.{orderState} {msg}\" ); } _api . SetOrderCallback ( order_cb ); \u4e0b\u55ae version>=1.0 version<1.0 IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var orderr = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; var trade = _api . PlaceOrder ( contract , order ) IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var orderr = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; var trade = _api . PlaceOrder ( contract , order ) \u59d4\u8a17\u56de\u5831 \u00b6 \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 my_order_callback OrderState . StockOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' account ' : { ' account_type ' : 'S' , ' person_id ' : '' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 15.55 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' }, ' status ' : { ' id ' : ' 97 b63e2f ' , ' exchange_ts ' : 1673576134.038 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } my_order_callback OrderState . TFTOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' account ' : { ' account_type ' : 'S' , ' person_id ' : '' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 15.55 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' }, ' status ' : { ' id ' : ' 97 b63e2f ' , ' exchange_ts ' : 1673576134.038 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } \u6210\u4ea4\u56de\u5831 \u00b6 \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 my_order_callback OrderState . StockDeal { ' trade_id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' exchange_seq ' : ' 669915 ' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' price ' : 15.55 , ' quantity ' : 1 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1673577256.354 } my_order_callback OrderState . TFTDeal { ' trade_id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' exchange_seq ' : ' 669915 ' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' price ' : 15.55 , ' quantity ' : 1 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1673577256.354 }","title":"\u59d4\u8a17\u56de\u5831"},{"location":"tutor/callback/orderdeal_event/#_1","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 SetOrderCallback \u4f86\u8655\u7406\u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u986f\u793a\uff0c\u81ea\u88fd\u7684\u59d4\u8a17\u56de\u5831\u51fd\u6578( order_cb )\u6703\u5148\u5370 my_order_callback \u7136\u5f8c\u624d\u5370\u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831\u3002 \u8a2d\u5b9a\u59d4\u8a17\u56de\u5831\u51fd\u5f0f private static void order_cb ( OrderState orderState , dynamic msg ) { Console . WriteLine ( \"my_order_callback\" ); Console . WriteLine ( $\"OrderState.{orderState} {msg}\" ); } _api . SetOrderCallback ( order_cb ); \u4e0b\u55ae version>=1.0 version<1.0 IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var orderr = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; var trade = _api . PlaceOrder ( contract , order ) IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var orderr = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; var trade = _api . PlaceOrder ( contract , order )","title":"\u8655\u7406\u59d4\u8a17\u53ca\u6210\u4ea4\u56de\u5831"},{"location":"tutor/callback/orderdeal_event/#_2","text":"\u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 my_order_callback OrderState . StockOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' account ' : { ' account_type ' : 'S' , ' person_id ' : '' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 15.55 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' }, ' status ' : { ' id ' : ' 97 b63e2f ' , ' exchange_ts ' : 1673576134.038 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } my_order_callback OrderState . TFTOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' account ' : { ' account_type ' : 'S' , ' person_id ' : '' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 15.55 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' }, ' status ' : { ' id ' : ' 97 b63e2f ' , ' exchange_ts ' : 1673576134.038 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } }","title":"\u59d4\u8a17\u56de\u5831"},{"location":"tutor/callback/orderdeal_event/#_3","text":"\u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 my_order_callback OrderState . StockDeal { ' trade_id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' exchange_seq ' : ' 669915 ' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' price ' : 15.55 , ' quantity ' : 1 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1673577256.354 } my_order_callback OrderState . TFTDeal { ' trade_id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' exchange_seq ' : ' 669915 ' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' price ' : 15.55 , ' quantity ' : 1 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1673577256.354 }","title":"\u6210\u4ea4\u56de\u5831"},{"location":"tutor/market_data/credit_enquires/","text":"\u7bc4\u4f8b \u00b6 In var contracts = new List < Stock > (); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); List < dynamic > creditEnquire = _api . CreditEnquire ( contracts ); Console . WriteLine ( creditEnquire ); Out [ {update_time=2021-01-05 10:43:36, system=HE, stock_id=2330, margin_unit=1290, short_unit=24,}, {update_time=2021-01-05 11:13:40, system=HC, stock_id=2330, margin_unit=1252, short_unit=25,}, {update_time=2021-01-05 10:56:10, system=HN, stock_id=2330, margin_unit=1315, short_unit=24,}, {update_time=2021-01-05 10:56:11, system=HF, stock_id=2330, margin_unit=1315, short_unit=24,}, {update_time=2021-01-05 10:11:56, system=HE, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2020-12-30 12:53:36, system=HN, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2021-01-04 10:45:06, system=HF, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2020-12-30 10:04:14, system=HC, stock_id=2890, margin_unit=0, short_unit=0,} ] \u5c6c\u6027 \u00b6 CreditEnquire update_time (string): \u66f4\u65b0\u6642\u9593 system (string): \u985e\u5225 stock_id (string): \u5546\u54c1\u4ee3\u78bc margin_unit (int): \u8cc7\u9918\u984d short_unit (int): \u5238\u9918\u984d","title":"\u8cc7\u5238\u9918\u984d"},{"location":"tutor/market_data/credit_enquires/#_1","text":"In var contracts = new List < Stock > (); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); List < dynamic > creditEnquire = _api . CreditEnquire ( contracts ); Console . WriteLine ( creditEnquire ); Out [ {update_time=2021-01-05 10:43:36, system=HE, stock_id=2330, margin_unit=1290, short_unit=24,}, {update_time=2021-01-05 11:13:40, system=HC, stock_id=2330, margin_unit=1252, short_unit=25,}, {update_time=2021-01-05 10:56:10, system=HN, stock_id=2330, margin_unit=1315, short_unit=24,}, {update_time=2021-01-05 10:56:11, system=HF, stock_id=2330, margin_unit=1315, short_unit=24,}, {update_time=2021-01-05 10:11:56, system=HE, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2020-12-30 12:53:36, system=HN, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2021-01-04 10:45:06, system=HF, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2020-12-30 10:04:14, system=HC, stock_id=2890, margin_unit=0, short_unit=0,} ]","title":"\u7bc4\u4f8b"},{"location":"tutor/market_data/credit_enquires/#_2","text":"CreditEnquire update_time (string): \u66f4\u65b0\u6642\u9593 system (string): \u985e\u5225 stock_id (string): \u5546\u54c1\u4ee3\u78bc margin_unit (int): \u8cc7\u9918\u984d short_unit (int): \u5238\u9918\u984d","title":"\u5c6c\u6027"},{"location":"tutor/market_data/historical/","text":"Ticks \u00b6 \u53d6\u5f97\u65b9\u5f0f\u53ef\u4ee5\u4ee5\u4e00\u6574\u5929\u3001\u67d0\u6642\u9593\u5340\u6bb5\u6216\u662f\u67d0\u5929\u7684\u6700\u5f8c\u5e7e\u7b46\u3002\u9810\u8a2d\u70ba\u5546\u54c1\u6700\u8fd1\u4ea4\u6613\u65e5\u7684Ticks\u3002 \u53d6\u5f97\u7279\u5b9a\u65e5\u671f Ticks \u00b6 In var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-02-24\" ); Console . WriteLine ( ticks ); Out Ticks ( ts = [ 1614157201843172000 , 1614157201883723000 , 1614157201890433000 , 1614157201915257000 , 1614157201928901000 ], close = [ 627 , 627 , 627 , 628 , 628 ], volume = [ 4507 , 133 , 2 , 1 , 5 ], bid_price = [ 627 , 627 , 627 , 627 , 627 ], bid_volume = [ 324 , 324 , 324 , 324 , 324 ], ask_price = [ 628 , 628 , 628 , 628 , 628 ], ask_volume = [ 261 , 261 , 261 , 261 , 261 ], tick_type = [ 2 , 1 , 2 , 2 , 2 ] ) \u8f49\u6210 DataFrame In using System ; using Sinopac.Shioaji ; using Microsoft.Data.Analysis ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-02-24\" ); DataFrameColumn [] columns = { new PrimitiveDataFrameColumn < long > ( \"ts\" , ticks . ts . ToList ()), new PrimitiveDataFrameColumn < long > ( \"volume\" , ticks . volume . ToList ()), new PrimitiveDataFrameColumn < double > ( \"close\" , ticks . close . ToList ()), new PrimitiveDataFrameColumn < double > ( \"ask_price\" , ticks . ask_price . ToList ()), new PrimitiveDataFrameColumn < double > ( \"bid_price\" , ticks . bid_price . ToList ()), new PrimitiveDataFrameColumn < long > ( \"ask_volume\" , ticks . ask_volume . ToList ()), new PrimitiveDataFrameColumn < long > ( \"bid_volume\" , ticks . bid_volume . ToList ()), new PrimitiveDataFrameColumn < long > ( \"tick_type\" , ticks . tick_type . ToList ()), }; var df_ticks = new DataFrame ( ts , volume , close , bid_price , bid_volume , ask_price , ask_volume ); Console . WriteLine ( df_ticks ); Out ts ask_volume ask_price close bid_price bid_volume volume tick_type 0 1614157201843172000 261 628 627 627 324 4507 2 1 1614157201883723000 261 628 627 627 324 133 1 2 1614157201890433000 261 628 627 627 324 2 2 3 1614157201915257000 261 628 628 627 324 1 2 4 1614157201928901000 261 628 628 627 324 5 2 \u53d6\u5f97\u7279\u5b9a\u6642\u9593\u5340\u6bb5 Ticks \u00b6 In var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract : contract , date : \"2021-02-24\" , query_type : TicksQueryType . RangeTime , time_start : \"09:00:00\" , time_end : \"09:20:01\" ); Console . WriteLine ( ticks ); \u53d6\u5f97\u6700\u5f8c\u6578\u7b46 Ticks \u00b6 In var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract : contract , date : \"2021-02-24\" , query_type : TicksQueryType . LastCount , last_cnt : 10 ); Console . WriteLine ( ticks ); Ticks ts (long): \u6642\u9593 volume (long): \u6210\u4ea4\u91cf close (double): \u6210\u4ea4\u50f9 ask_price (double): \u59d4\u8ce3\u50f9 bid_price (double): \u59d4\u8cb7\u50f9 ask_volume (long): \u59d4\u8ce3\u91cf bid_volume (long): \u59d4\u8cb7\u91cf tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} Kbars \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Kbars kbars = _api . Kbars ( contract , \"2021-09-13\" , \"2021-09-13\" ); Console . WriteLine ( ticks ); Out Kbars ( ts = [ 1631523660000000000 , 1631523720000000000 , 1631523780000000000 , 1631523840000000000 , 1631523900000000000 ], Open = [ 619 , 617 , 618 , 619 , 619 ], High = [ 619 , 618 , 619 , 619 , 620 ], Low = [ 617 , 617 , 617 , 619 , 619 ], Close = [ 618 , 618 , 619 , 619 , 620 ], Volume = [ 1085 , 109 , 100 , 98 , 63 ], Amount = [ 671407000 , 67325000 , 61817000 , 60662000 , 39031000 ], ) \u8f49\u6210 DataFrame In using System ; using Sinopac.Shioaji ; using Microsoft.Data.Analysis ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Kbars kbars = _api . Kbars ( contract , \"2021-09-13\" , \"2021-09-13\" ); DataFrameColumn [] columns = { new PrimitiveDataFrameColumn < double > ( \"Open\" , kbars . Open . ToList ()), new PrimitiveDataFrameColumn < double > ( \"High\" , kbars . High . ToList ()), new PrimitiveDataFrameColumn < double > ( \"Low\" , kbars . Low . ToList ()), new PrimitiveDataFrameColumn < double > ( \"Close\" , kbars . Close . ToList ()), new PrimitiveDataFrameColumn < long > ( \"Volume\" , kbars . Volume . ToList ()), new PrimitiveDataFrameColumn < double > ( \"Amount\" , kbars . Amount . ToList ()), new PrimitiveDataFrameColumn < long > ( \"ts\" , kbars . ts . ToList ()) }; Console . WriteLine ( employeesDf ); Out ts Open High Low Close Volume Amount 0 1631523660000000000 619 619 617 618 1085 671407000 1 1631523720000000000 617 618 617 618 109 67325000 2 1631523780000000000 618 619 617 619 100 61817000 3 1631523840000000000 619 619 619 619 98 60662000 4 1631523900000000000 619 620 619 620 63 39031000","title":"\u6b77\u53f2\u884c\u60c5"},{"location":"tutor/market_data/historical/#ticks","text":"\u53d6\u5f97\u65b9\u5f0f\u53ef\u4ee5\u4ee5\u4e00\u6574\u5929\u3001\u67d0\u6642\u9593\u5340\u6bb5\u6216\u662f\u67d0\u5929\u7684\u6700\u5f8c\u5e7e\u7b46\u3002\u9810\u8a2d\u70ba\u5546\u54c1\u6700\u8fd1\u4ea4\u6613\u65e5\u7684Ticks\u3002","title":"Ticks"},{"location":"tutor/market_data/historical/#ticks_1","text":"In var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-02-24\" ); Console . WriteLine ( ticks ); Out Ticks ( ts = [ 1614157201843172000 , 1614157201883723000 , 1614157201890433000 , 1614157201915257000 , 1614157201928901000 ], close = [ 627 , 627 , 627 , 628 , 628 ], volume = [ 4507 , 133 , 2 , 1 , 5 ], bid_price = [ 627 , 627 , 627 , 627 , 627 ], bid_volume = [ 324 , 324 , 324 , 324 , 324 ], ask_price = [ 628 , 628 , 628 , 628 , 628 ], ask_volume = [ 261 , 261 , 261 , 261 , 261 ], tick_type = [ 2 , 1 , 2 , 2 , 2 ] ) \u8f49\u6210 DataFrame In using System ; using Sinopac.Shioaji ; using Microsoft.Data.Analysis ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-02-24\" ); DataFrameColumn [] columns = { new PrimitiveDataFrameColumn < long > ( \"ts\" , ticks . ts . ToList ()), new PrimitiveDataFrameColumn < long > ( \"volume\" , ticks . volume . ToList ()), new PrimitiveDataFrameColumn < double > ( \"close\" , ticks . close . ToList ()), new PrimitiveDataFrameColumn < double > ( \"ask_price\" , ticks . ask_price . ToList ()), new PrimitiveDataFrameColumn < double > ( \"bid_price\" , ticks . bid_price . ToList ()), new PrimitiveDataFrameColumn < long > ( \"ask_volume\" , ticks . ask_volume . ToList ()), new PrimitiveDataFrameColumn < long > ( \"bid_volume\" , ticks . bid_volume . ToList ()), new PrimitiveDataFrameColumn < long > ( \"tick_type\" , ticks . tick_type . ToList ()), }; var df_ticks = new DataFrame ( ts , volume , close , bid_price , bid_volume , ask_price , ask_volume ); Console . WriteLine ( df_ticks ); Out ts ask_volume ask_price close bid_price bid_volume volume tick_type 0 1614157201843172000 261 628 627 627 324 4507 2 1 1614157201883723000 261 628 627 627 324 133 1 2 1614157201890433000 261 628 627 627 324 2 2 3 1614157201915257000 261 628 628 627 324 1 2 4 1614157201928901000 261 628 628 627 324 5 2","title":"\u53d6\u5f97\u7279\u5b9a\u65e5\u671f Ticks"},{"location":"tutor/market_data/historical/#ticks_2","text":"In var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract : contract , date : \"2021-02-24\" , query_type : TicksQueryType . RangeTime , time_start : \"09:00:00\" , time_end : \"09:20:01\" ); Console . WriteLine ( ticks );","title":"\u53d6\u5f97\u7279\u5b9a\u6642\u9593\u5340\u6bb5 Ticks"},{"location":"tutor/market_data/historical/#ticks_3","text":"In var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract : contract , date : \"2021-02-24\" , query_type : TicksQueryType . LastCount , last_cnt : 10 ); Console . WriteLine ( ticks ); Ticks ts (long): \u6642\u9593 volume (long): \u6210\u4ea4\u91cf close (double): \u6210\u4ea4\u50f9 ask_price (double): \u59d4\u8ce3\u50f9 bid_price (double): \u59d4\u8cb7\u50f9 ask_volume (long): \u59d4\u8ce3\u91cf bid_volume (long): \u59d4\u8cb7\u91cf tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a}","title":"\u53d6\u5f97\u6700\u5f8c\u6578\u7b46 Ticks"},{"location":"tutor/market_data/historical/#kbars","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Kbars kbars = _api . Kbars ( contract , \"2021-09-13\" , \"2021-09-13\" ); Console . WriteLine ( ticks ); Out Kbars ( ts = [ 1631523660000000000 , 1631523720000000000 , 1631523780000000000 , 1631523840000000000 , 1631523900000000000 ], Open = [ 619 , 617 , 618 , 619 , 619 ], High = [ 619 , 618 , 619 , 619 , 620 ], Low = [ 617 , 617 , 617 , 619 , 619 ], Close = [ 618 , 618 , 619 , 619 , 620 ], Volume = [ 1085 , 109 , 100 , 98 , 63 ], Amount = [ 671407000 , 67325000 , 61817000 , 60662000 , 39031000 ], ) \u8f49\u6210 DataFrame In using System ; using Sinopac.Shioaji ; using Microsoft.Data.Analysis ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Kbars kbars = _api . Kbars ( contract , \"2021-09-13\" , \"2021-09-13\" ); DataFrameColumn [] columns = { new PrimitiveDataFrameColumn < double > ( \"Open\" , kbars . Open . ToList ()), new PrimitiveDataFrameColumn < double > ( \"High\" , kbars . High . ToList ()), new PrimitiveDataFrameColumn < double > ( \"Low\" , kbars . Low . ToList ()), new PrimitiveDataFrameColumn < double > ( \"Close\" , kbars . Close . ToList ()), new PrimitiveDataFrameColumn < long > ( \"Volume\" , kbars . Volume . ToList ()), new PrimitiveDataFrameColumn < double > ( \"Amount\" , kbars . Amount . ToList ()), new PrimitiveDataFrameColumn < long > ( \"ts\" , kbars . ts . ToList ()) }; Console . WriteLine ( employeesDf ); Out ts Open High Low Close Volume Amount 0 1631523660000000000 619 619 617 618 1085 671407000 1 1631523720000000000 617 618 617 618 109 67325000 2 1631523780000000000 618 619 617 619 100 61817000 3 1631523840000000000 619 619 619 619 98 60662000 4 1631523900000000000 619 620 619 620 63 39031000","title":"Kbars"},{"location":"tutor/market_data/scanners/","text":"\u5305\u542b\u6f32\u8dcc\u5e45\u3001\u6f32\u8dcc\u3001\u9ad8\u4f4e\u50f9\u5dee\u3001\u6210\u4ea4\u91cf\u53ca\u6210\u4ea4\u91d1\u984d\u6392\u884c\u3002 Scanners \u5229\u7528 ScannerType \u53bb\u53d6\u5f97\u4e0d\u540c\u985e\u578b\u7684\u6392\u884c\u3002 \u652f\u63f4\u7684\u6392\u884c\u985e\u5225 \u6392\u540d\u9810\u8a2d\u70ba\u7531\u5927\u5230\u5c0f\u6392\u5e8f\uff0c ascending \u9810\u8a2d\u503c\u70ba true \u3002 \u82e5\u8981\u7531\u5c0f\u5230\u5927\u6392\u5e8f\u8acb\u5c07 ascending \u8a2d\u70ba false \u3002 count \u70ba\u6392\u884c\u6578\u91cf\u3002 ChangePercentRank : \u4f9d\u50f9\u683c\u6f32\u8dcc\u5e45\u6392\u5e8f ChangePriceRank : \u4f9d\u50f9\u683c\u6f32\u8dcc\u6392\u5e8f DayRangeRank : \u4f9d\u9ad8\u4f4e\u50f9\u5dee\u6392\u5e8f VolumeRank : \u4f9d\u6210\u4ea4\u91cf\u6392\u5e8f AmountRank : \u4f9d\u6210\u4ea4\u91d1\u984d\u6392\u5e8f \u7bc4\u4f8b \u00b6 \u4f9d\u6210\u4ea4\u91d1\u984d\u6392\u5e8f var scanners_amount = _api . Scanners ( scannerType : ScannerType . AmountRank , ascending : true , date : \"2022-05-25\" , count : 2 ); Console . WriteLine ( scanners_amount ); Out [ { date=2022-05-25, code=2330, name=\u53f0\u7a4d\u96fb, ts=1653489000000000000, open=522, high=529, low=520, close=524, price_range=9, tick_type=2, change_price=4, change_type=2, average_price=524.6, volume=41, total_volume=22176, amount=21484000, total_amount=11633535900, yesterday_volume=17802, volume_ratio=1.25, buy_price=524, buy_volume=691, sell_price=525, sell_volume=126, bid_orders=3363, bid_volumes=216046, ask_orders=1935, ask_volumes=436783, }, { date=2022-05-25, code=2603, name=\u9577\u69ae, ts=1653489000000000000, open=144.5, high=146, low=141.5, close=143, price_range=4.5, tick_type=2, change_price=1, change_type=2, average_price=143.23, volume=375, total_volume=68912, amount=53625000, total_amount=9870037033, yesterday_volume=93318, volume_ratio=0.74, buy_price=143, buy_volume=20, sell_price=143.5, sell_volume=1949, bid_orders=5585, bid_volumes=536602, ask_orders=4791, ask_volumes=254559, } ] \u5c6c\u6027 \u00b6 scanners date (string): \u4ea4\u6613\u65e5 code (string): \u80a1\u7968\u4ee3\u865f name (string): \u80a1\u7968\u540d\u7a31 ts (long): \u6642\u9593\u6233\u8a18 open (double): \u958b\u76e4\u50f9 high (double): \u6700\u9ad8\u50f9 low (double): \u6700\u4f4e\u50f9 close (double): \u6536\u76e4\u50f9 price_range (double): \u50f9\u683c\u5340\u9593(\u6700\u9ad8\u50f9-\u6700\u4f4e\u50f9) tick_type (long): \u5167\u5916\u76e4\u5225 {1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} change_price (double): \u50f9\u683c\u6f32\u8dcc change_type (long): \u6f32\u8dcc {LimitUp, Up, Unchanged, Dowm, LimitDown} average_price (double): \u5747\u50f9 volume (long): \u6210\u4ea4\u91cf total_volume (long): \u7e3d\u6210\u4ea4\u91cf amount (long): \u6210\u4ea4\u91d1\u984d total_amount (long): \u7e3d\u6210\u4ea4\u91d1\u984d yesterday_volume (long): \u6628\u65e5\u7e3d\u6210\u4ea4\u91cf volume_ratio (double): \u7e3d\u6210\u4ea4\u91cf/\u6628\u65e5\u7e3d\u6210\u4ea4\u91cf buy_price (double): \u59d4\u8cb7\u50f9 buy_volume (long): \u59d4\u8cb7\u91cf sell_price (double): \u59d4\u8ce3\u50f9 sell_volume (long): \u59d4\u8ce3\u91cf bid_orders (long): \u5167\u76e4\u7e3d\u6210\u4ea4\u55ae\u91cf bid_volumes (long): \u5167\u76e4\u7e3d\u6210\u4ea4\u91cf ask_orders (long): \u5916\u76e4\u7e3d\u6210\u4ea4\u55ae\u91cf ask_volumes (long): \u5916\u76e4\u7e3d\u6210\u4ea4\u91cf","title":"\u6392\u884c"},{"location":"tutor/market_data/scanners/#_1","text":"\u4f9d\u6210\u4ea4\u91d1\u984d\u6392\u5e8f var scanners_amount = _api . Scanners ( scannerType : ScannerType . AmountRank , ascending : true , date : \"2022-05-25\" , count : 2 ); Console . WriteLine ( scanners_amount ); Out [ { date=2022-05-25, code=2330, name=\u53f0\u7a4d\u96fb, ts=1653489000000000000, open=522, high=529, low=520, close=524, price_range=9, tick_type=2, change_price=4, change_type=2, average_price=524.6, volume=41, total_volume=22176, amount=21484000, total_amount=11633535900, yesterday_volume=17802, volume_ratio=1.25, buy_price=524, buy_volume=691, sell_price=525, sell_volume=126, bid_orders=3363, bid_volumes=216046, ask_orders=1935, ask_volumes=436783, }, { date=2022-05-25, code=2603, name=\u9577\u69ae, ts=1653489000000000000, open=144.5, high=146, low=141.5, close=143, price_range=4.5, tick_type=2, change_price=1, change_type=2, average_price=143.23, volume=375, total_volume=68912, amount=53625000, total_amount=9870037033, yesterday_volume=93318, volume_ratio=0.74, buy_price=143, buy_volume=20, sell_price=143.5, sell_volume=1949, bid_orders=5585, bid_volumes=536602, ask_orders=4791, ask_volumes=254559, } ]","title":"\u7bc4\u4f8b"},{"location":"tutor/market_data/scanners/#_2","text":"scanners date (string): \u4ea4\u6613\u65e5 code (string): \u80a1\u7968\u4ee3\u865f name (string): \u80a1\u7968\u540d\u7a31 ts (long): \u6642\u9593\u6233\u8a18 open (double): \u958b\u76e4\u50f9 high (double): \u6700\u9ad8\u50f9 low (double): \u6700\u4f4e\u50f9 close (double): \u6536\u76e4\u50f9 price_range (double): \u50f9\u683c\u5340\u9593(\u6700\u9ad8\u50f9-\u6700\u4f4e\u50f9) tick_type (long): \u5167\u5916\u76e4\u5225 {1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} change_price (double): \u50f9\u683c\u6f32\u8dcc change_type (long): \u6f32\u8dcc {LimitUp, Up, Unchanged, Dowm, LimitDown} average_price (double): \u5747\u50f9 volume (long): \u6210\u4ea4\u91cf total_volume (long): \u7e3d\u6210\u4ea4\u91cf amount (long): \u6210\u4ea4\u91d1\u984d total_amount (long): \u7e3d\u6210\u4ea4\u91d1\u984d yesterday_volume (long): \u6628\u65e5\u7e3d\u6210\u4ea4\u91cf volume_ratio (double): \u7e3d\u6210\u4ea4\u91cf/\u6628\u65e5\u7e3d\u6210\u4ea4\u91cf buy_price (double): \u59d4\u8cb7\u50f9 buy_volume (long): \u59d4\u8cb7\u91cf sell_price (double): \u59d4\u8ce3\u50f9 sell_volume (long): \u59d4\u8ce3\u91cf bid_orders (long): \u5167\u76e4\u7e3d\u6210\u4ea4\u55ae\u91cf bid_volumes (long): \u5167\u76e4\u7e3d\u6210\u4ea4\u91cf ask_orders (long): \u5916\u76e4\u7e3d\u6210\u4ea4\u55ae\u91cf ask_volumes (long): \u5916\u76e4\u7e3d\u6210\u4ea4\u91cf","title":"\u5c6c\u6027"},{"location":"tutor/market_data/short_stock_source/","text":"\u7bc4\u4f8b \u00b6 In var contracts = new List < Stock > (); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); List < dynamic > shortStockSources = _api . ShortStockSources ( contracts ); Console . WriteLine ( shortStockSources . ToString ()); Out [ {ts=1658823433000000000, code=2890, short_stock_source=493840,}, {ts=1658823433000000000, code=2330, short_stock_source=56602,} ] \u5c6c\u6027 \u00b6 ShortStockSource code (string): \u5546\u54c1\u4ee3\u78bc short_stock_source (float): \u6216\u6709\u5238\u6e90 ts (int): \u6642\u9593\u6233\u8a18","title":"\u6216\u6709\u5238\u6e90"},{"location":"tutor/market_data/short_stock_source/#_1","text":"In var contracts = new List < Stock > (); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); List < dynamic > shortStockSources = _api . ShortStockSources ( contracts ); Console . WriteLine ( shortStockSources . ToString ()); Out [ {ts=1658823433000000000, code=2890, short_stock_source=493840,}, {ts=1658823433000000000, code=2330, short_stock_source=56602,} ]","title":"\u7bc4\u4f8b"},{"location":"tutor/market_data/short_stock_source/#_2","text":"ShortStockSource code (string): \u5546\u54c1\u4ee3\u78bc short_stock_source (float): \u6216\u6709\u5238\u6e90 ts (int): \u6642\u9593\u6233\u8a18","title":"\u5c6c\u6027"},{"location":"tutor/market_data/snapshot/","text":"\u7576\u4e0b\u8b49\u5238\u3001\u671f\u8ca8\u53ca\u9078\u64c7\u6b0a\u8cc7\u8a0a\u3002\u5305\u542b\u958b\u76e4\u50f9\u3001\u6700\u9ad8\u50f9\u3001\u6700\u4f4e\u50f9\u3001\u6536\u76e4\u50f9\u3001\u8b8a\u52d5\u50f9\u3001\u5747\u50f9\u3001\u6210\u4ea4\u91cf\u3001\u7e3d\u6210\u4ea4\u91cf\u3001\u59d4\u8cb7\u50f9\u3001\u59d4\u8cb7\u91cf\u3001\u59d4\u8ce3\u50f9\u3001\u59d4\u8ce3\u91cf\u548c\u6628\u91cf\u3002 \u7bc4\u4f8b \u00b6 In var contracts = new List < IContract > (); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); List < dynamic > snapshot = _api . Snapshots ( contracts ); Console . WriteLine ( snapshot . ToString ()); Out [ { ts=1656935843384000000, code=2890, exchange=TSE, open=16.65, high=17, low=16.55, close=16.55, tick_type=Sell, change_price=-0.1, change_rate=-0.6, change_type=Down, average_price=16.75, volume=0, total_volume=12447, amount=16550, total_amount=208451300, yesterday_volume=0, buy_price=15.9, buy_volume=247, sell_price=15.95, sell_volume=404, volume_ratio=0, }, { ts=1656935843079000000, code=2330, exchange=TSE, open=443, high=451.5, low=443, close=445.5, tick_type=Buy, change_price=-8, change_rate=-1.76, change_type=Down, average_price=446.65, volume=0, total_volume=32523, amount=445500, total_amount=14526383500, yesterday_volume=0, buy_price=495, buy_volume=484, sell_price=495.5, sell_volume=12, volume_ratio=0, } ] \u5c6c\u6027 \u00b6 Snapshot ts (long): \u53d6\u5f97\u8cc7\u8a0a\u6642\u9593\u6233\u8a18 code (string): \u5546\u54c1\u4ee3\u78bc exchange (Exchange): \u4ea4\u6613\u6240 open (double): \u958b\u76e4\u50f9 high (double): \u6700\u9ad8\u50f9 low (double): \u6700\u4f4e\u50f9 close (double): \u6536\u76e4\u50f9 tick_type (TickType): \u6536\u76e4\u8cb7\u8ce3\u5225 {None, Buy, Sell} change_price (double): \u6f32\u8dcc change_rate (double): \u6f32\u8dcc\u5e45 change_type (ChangeType): \u6f32\u8dcc {LimitUp, Up, Unchanged, Dowm, LimitDown} average_price (double): \u5747\u50f9 volume (int): \u55ae\u91cf total_volume (int): \u6210\u4ea4\u91cf amount (int): \u55ae\u91cf\u6210\u4ea4\u91d1\u984d total_amount (int): \u6210\u4ea4\u91d1\u984d yesterday_volume (double): \u6628\u91cf buy_price (double): \u59d4\u8cb7\u50f9 buy_volume (double): \u59d4\u8cb7\u91cf sell_price (double): \u8ce3\u51fa\u50f9 sell_volume (long): \u59d4\u8ce3\u91cf volume_ratio (double): \u6628\u91cf\u6bd4","title":"\u5e02\u5834\u5feb\u7167"},{"location":"tutor/market_data/snapshot/#_1","text":"In var contracts = new List < IContract > (); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); List < dynamic > snapshot = _api . Snapshots ( contracts ); Console . WriteLine ( snapshot . ToString ()); Out [ { ts=1656935843384000000, code=2890, exchange=TSE, open=16.65, high=17, low=16.55, close=16.55, tick_type=Sell, change_price=-0.1, change_rate=-0.6, change_type=Down, average_price=16.75, volume=0, total_volume=12447, amount=16550, total_amount=208451300, yesterday_volume=0, buy_price=15.9, buy_volume=247, sell_price=15.95, sell_volume=404, volume_ratio=0, }, { ts=1656935843079000000, code=2330, exchange=TSE, open=443, high=451.5, low=443, close=445.5, tick_type=Buy, change_price=-8, change_rate=-1.76, change_type=Down, average_price=446.65, volume=0, total_volume=32523, amount=445500, total_amount=14526383500, yesterday_volume=0, buy_price=495, buy_volume=484, sell_price=495.5, sell_volume=12, volume_ratio=0, } ]","title":"\u7bc4\u4f8b"},{"location":"tutor/market_data/snapshot/#_2","text":"Snapshot ts (long): \u53d6\u5f97\u8cc7\u8a0a\u6642\u9593\u6233\u8a18 code (string): \u5546\u54c1\u4ee3\u78bc exchange (Exchange): \u4ea4\u6613\u6240 open (double): \u958b\u76e4\u50f9 high (double): \u6700\u9ad8\u50f9 low (double): \u6700\u4f4e\u50f9 close (double): \u6536\u76e4\u50f9 tick_type (TickType): \u6536\u76e4\u8cb7\u8ce3\u5225 {None, Buy, Sell} change_price (double): \u6f32\u8dcc change_rate (double): \u6f32\u8dcc\u5e45 change_type (ChangeType): \u6f32\u8dcc {LimitUp, Up, Unchanged, Dowm, LimitDown} average_price (double): \u5747\u50f9 volume (int): \u55ae\u91cf total_volume (int): \u6210\u4ea4\u91cf amount (int): \u55ae\u91cf\u6210\u4ea4\u91d1\u984d total_amount (int): \u6210\u4ea4\u91d1\u984d yesterday_volume (double): \u6628\u91cf buy_price (double): \u59d4\u8cb7\u50f9 buy_volume (double): \u59d4\u8cb7\u91cf sell_price (double): \u8ce3\u51fa\u50f9 sell_volume (long): \u59d4\u8ce3\u91cf volume_ratio (double): \u6628\u91cf\u6bd4","title":"\u5c6c\u6027"},{"location":"tutor/market_data/streaming/futures/","text":"\u5229\u7528\u8a02\u95b1 \u5546\u54c1\u6a94 \u7684\u65b9\u5f0f\u53bb\u53d6\u5f97\u5373\u6642\u884c\u60c5\u3002 Quote Parameters: enum QuoteType { tick , bidask } bool intraday_odd : { true , false } enum QuoteVersion : { v0 , v1 } Tick \u00b6 \u7bc4\u4f8b \u00b6 In _api . Subscribe ( contract : _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], quoteType : QuoteType . tick , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : TIC / v1 / FOP /*/ TFE / TXFJ2 | Event : SubscriptionOk Exchange . TAIFEX TickFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:22:31.966000\" , \"open\" : 12880.0 , \"underlying_price\" : 12810.73 , \"bid_side_total_vol\" : 5266 , \"ask_side_total_vol\" : 5255 , \"avg_price\" : 12865.525151 , \"close\" : 12868.0 , \"high\" : 12887.0 , \"low\" : 12842.0 , \"amount\" : 77208.0 , \"total_amount\" : 112792059.0 , \"volume\" : 6 , \"total_volume\" : 8767 , \"tick_type\" : 2 , \"chg_type\" : 4 , \"price_chg\" : - 1.0 , \"pct_chg\" : - 0.007771 , \"simtrade\" : false } Response Code : 0 | Event code : 16 | Info : L /*/ TXFJ2 | Event : SubscriptionOk L / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 17 : 30.246000 Open : 12880 TargetKindPrice : 12810.73 TradeBidVolSum : 5215 TradeAskVolSum : 5179 AvgPrice : [ 12865.489219 ] Close : [ 12870 ] High : [ 12887 ] Low : [ 12842 ] Amount : [ 25740 ] AmountSum : [ 111582388 ] Volume : [ 2 ] VolSum : [ 8673 ] TickType : [ 1 ] DiffType : [ 2 ] DiffPrice : [ 1 ] DiffRate : [ 0.007771 ] \u5c6c\u6027 \u00b6 Tick QuoteVersion.v1 QuoteVersion.v0 code (string): \u5546\u54c1\u4ee3\u78bc datetime (string): \u65e5\u671f open (decimal): \u958b\u76e4\u50f9 underlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c bid_side_total_vol(int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) ask_side_total_vol(int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) avg_price (decimal): \u5747\u50f9 close (decimal): \u6210\u4ea4\u50f9 high (decimal): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4) low (decimal): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4) amount (decimal): \u6210\u4ea4\u984d (NTD) total_amount (decimal): \u7e3d\u6210\u4ea4\u984d (NTD) volume (int): \u6210\u4ea4\u91cf (lot) total_volume (int): \u7e3d\u6210\u4ea4\u91cf (lot) tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} chg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} price_chg (decimal): \u6f32\u8dcc pct_chg (decimal): \u6f32\u8dcc\u5e45 (%) simtrade (bool): \u8a66\u64ae Amount (list of float): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) AmountSum (list of float): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) AvgPrice (list of float): \u5747\u50f9 Close (list of float): \u6210\u4ea4\u50f9 Code (string): \u5546\u54c1\u4ee3\u78bc Date (string): \u65e5\u671f (yyyy/MM/dd) DiffPrice (list of float): \u6f32\u8dcc DiffRate (list of float): \u6f32\u8dcc\u5e45 (%) DiffType (list of int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} High (list of float): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4) Low (list of float): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4) Open (float): \u958b\u76e4\u50f9 TargetKindPrice float: \u6a19\u7684\u7269\u50f9\u683c TickType (:list:int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} Time (string): \u6642\u9593 (HH:mm:ss.ffffff) TradeAskVolSum (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) TradeBidVolSum (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) VolSum (list of int): \u7e3d\u6210\u4ea4\u91cf (lot) Volume (list of int): \u6210\u4ea4\u91cf (lot) BidAsk \u00b6 \u7bc4\u4f8b \u00b6 In _api . Subscribe ( contract : _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], quoteType : QuoteType . bidask , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUO / v1 / FOP /*/ TFE / TXFJ2 | Event : SubscriptionOk Exchange . TAIFEX BidAskFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:27:31.856000\" , \"bid_total_vol\" : 79 , \"ask_total_vol\" : 98 , \"bid_price\" : [ \"12870\" , \"12869\" , \"12868\" , \"12867\" , \"12866\" ], \"bid_volume\" : [ 4 , 13 , 25 , 16 , 21 ], \"diff_bid_vol\" : [ - 10 , - 3 , - 6 , 5 , - 1 ], \"ask_price\" : [ \"12871\" , \"12872\" , \"12873\" , \"12874\" , \"12875\" ], \"ask_volume\" : [ 4 , 11 , 27 , 30 , 26 ], \"diff_ask_vol\" : [ - 2 , 1 , 13 , - 9 , 0 ], \"first_derived_bid_price\" : 12869.0 , \"first_derived_ask_price\" : 12873.0 , \"first_derived_bid_vol\" : 1 , \"first_derived_ask_vol\" : 2 , \"underlying_price\" : 12810.73 , \"simtrade\" : false } Response Code : 0 | Event code : 16 | Info : Q \uff0f */ TXFJ2 | Event : SubscriptionOk Q / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 29 : 41.356000 BidVolSum : 78 AskVolSum : 121 DiffBidVolSum : 0 DiffAskVolSum : 0 BidPrice : [ 12875 , 12874 , 12873 , 12872 , 12871 ] BidVolume : [ 1 , 10 , 20 , 33 , 14 ] DiffBidVol : [ 0 , 0 , 0 , 0 , 0 ] AskPrice : [ 12876 , 12877 , 12878 , 12879 , 12880 ] AskVolume : [ 9 , 15 , 41 , 24 , 32 ] DiffAskVol : [ - 1 , 0 , 0 , 0 , 0 ] FirstDerivedBidPrice : 12872 FirstDerivedAskPrice : 12878 FirstDerivedBidVolume : 2 FirstDerivedAskVolume : 2 TargetKindPrice : 12810.73 \u5c6c\u6027 \u00b6 BidAsk QuoteVersion.v1 QuoteVersion.v0 code (string): \u5546\u54c1\u4ee3\u78bc datetime (string): \u6642\u9593 bid_total_vol (int): \u59d4\u8cb7\u91cf\u7e3d\u8a08 (lot) ask_total_vol (int): \u59d4\u8ce3\u91cf\u7e3d\u8a08 (lot) bid_price (:List:decimal): \u59d4\u8cb7\u50f9 bid_volume (:List:int): \u59d4\u8cb7\u91cf (lot) diff_bid_vol (:List:int): \u59d4\u8cb7\u50f9\u589e\u6e1b\u91cf (lot) ask_price (:List:decimal): \u59d4\u8ce3\u50f9 ask_volume (:List:int): \u59d4\u8ce3\u91cf (lot) diff_ask_vol (:List:int): \u59d4\u8ce3\u50f9\u589e\u6e1b\u91cf (lot) first_derived_bid_price (decimal): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u50f9 first_derived_ask_price (decimal): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u50f9 first_derived_bid_vol (int): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u91cf first_derived_ask_vol (int): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u91cf underlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c simtrade (bool): \u8a66\u64ae AskPrice (:List:float): \u59d4\u8ce3\u50f9 AskVolSum (int): \u59d4\u8ce3\u91cf\u7e3d\u8a08(lot) AskVolume (:List:int): \u59d4\u8ce3\u91cf BidPrice (:List:float): \u59d4\u8cb7\u50f9 BidVolSum (int): \u59d4\u8cb7\u91cf\u7e3d\u8a08(lot) BidVolume (:List:int): \u59d4\u8cb7\u91cf Code (string): \u5546\u54c1\u4ee3\u78bc Date (string): \u65e5\u671f (yyyy/MM/dd) DiffAskVol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf(lot) DiffAskVolSum (int): DiffBidVol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf(lot) DiffBidVolSum (int): FirstDerivedAskPrice (float): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u50f9 FirstDerivedAskVolume (int): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u91cf FirstDerivedBidPrice (float): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u50f9 FirstDerivedBidVolume (int): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u91cf TargetKindPrice (float): \u6a19\u7684\u7269\u50f9\u683c Time (string): \u6642\u9593 (HH:mm:ss.ffffff) Callback \u00b6 \u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528 Console.WriteLine \u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002 In QuoteVersion.v1 QuoteVersion.v0 public class Program { private static void myQuoteCB_v1 ( Exchange exchange , dynamic quote ) { Console . WriteLine ( $\"QuoteCB_v1 | Exchange.{exchange} {quote.GetType().Name} {quote}\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); // version >= 1.0 var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); // version <1.0 // var _accounts = _api.Login(\"PERSON_ID\", \"PASSWORD\"); _api . SetQuoteCallback_v1 ( myQuoteCB_v1 ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], QuoteType . bidask , version : QuoteVersion . v1 ); Console . ReadKey (); } } public class Program { private static void myQuoteCB ( string topic , Dictionary < string , dynamic > msg ) { Console . WriteLine ( \"myQuoteCB | Topic: \" + topic ); foreach ( var item in msg ) { Console . WriteLine ( item . Key + \": \" + item . Value ); } Console . WriteLine ( \"-----------------------------------\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); // version >= 1.0 var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); // version <1.0 // var _accounts = _api.Login(\"PERSON_ID\", \"PASSWORD\"); _api . SetQuoteCallback ( myQuoteCB ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], QuoteType . bidask , version : QuoteVersion . v0 ); Console . ReadKey (); } } Out QuoteVersion.v1 QuoteVersion.v0 QuoteCB_v1 | Exchange . TAIFEX BidAskFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:36:58.481000\" , \"bid_total_vol\" : 92 , \"ask_total_vol\" : 99 , \"bid_price\" : [ \"12893\" , \"12892\" , \"12891\" , \"12890\" , \"12889\" ], \"bid_volume\" : [ 6 , 13 , 36 , 21 , 16 ], \"diff_bid_vol\" : [ - 5 , 0 , 5 , 0 , 0 ], \"ask_price\" : [ \"12894\" , \"12895\" , \"12896\" , \"12897\" , \"12898\" ], \"ask_volume\" : [ 1 , 12 , 33 , 24 , 29 ], \"diff_ask_vol\" : [ 0 , 0 , 5 , - 5 , 0 ], \"first_derived_bid_price\" : 12891.0 , \"first_derived_ask_price\" : 12897.0 , \"first_derived_bid_vol\" : 2 , \"first_derived_ask_vol\" : 7 , \"underlying_price\" : 12810.73 , \"simtrade\" : false } myQuoteCB | Topic : Q / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 35 : 23.981000 BidVolSum : 91 AskVolSum : 108 DiffBidVolSum : 0 DiffAskVolSum : 0 BidPrice : [ 12890 , 12889 , 12888 , 12887 , 12886 ] BidVolume : [ 10 , 19 , 22 , 21 , 19 ] DiffBidVol : [ 1 , 0 , 0 , 0 , 0 ] AskPrice : [ 12892 , 12893 , 12894 , 12895 , 12896 ] AskVolume : [ 17 , 29 , 23 , 23 , 16 ] DiffAskVol : [ - 1 , 0 , 0 , 0 , 0 ] FirstDerivedBidPrice : 12890 FirstDerivedAskPrice : 12894 FirstDerivedBidVolume : 51 FirstDerivedAskVolume : 2 TargetKindPrice : 12810.73","title":"\u671f\u8ca8"},{"location":"tutor/market_data/streaming/futures/#tick","text":"","title":"Tick"},{"location":"tutor/market_data/streaming/futures/#_1","text":"In _api . Subscribe ( contract : _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], quoteType : QuoteType . tick , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : TIC / v1 / FOP /*/ TFE / TXFJ2 | Event : SubscriptionOk Exchange . TAIFEX TickFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:22:31.966000\" , \"open\" : 12880.0 , \"underlying_price\" : 12810.73 , \"bid_side_total_vol\" : 5266 , \"ask_side_total_vol\" : 5255 , \"avg_price\" : 12865.525151 , \"close\" : 12868.0 , \"high\" : 12887.0 , \"low\" : 12842.0 , \"amount\" : 77208.0 , \"total_amount\" : 112792059.0 , \"volume\" : 6 , \"total_volume\" : 8767 , \"tick_type\" : 2 , \"chg_type\" : 4 , \"price_chg\" : - 1.0 , \"pct_chg\" : - 0.007771 , \"simtrade\" : false } Response Code : 0 | Event code : 16 | Info : L /*/ TXFJ2 | Event : SubscriptionOk L / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 17 : 30.246000 Open : 12880 TargetKindPrice : 12810.73 TradeBidVolSum : 5215 TradeAskVolSum : 5179 AvgPrice : [ 12865.489219 ] Close : [ 12870 ] High : [ 12887 ] Low : [ 12842 ] Amount : [ 25740 ] AmountSum : [ 111582388 ] Volume : [ 2 ] VolSum : [ 8673 ] TickType : [ 1 ] DiffType : [ 2 ] DiffPrice : [ 1 ] DiffRate : [ 0.007771 ]","title":"\u7bc4\u4f8b"},{"location":"tutor/market_data/streaming/futures/#_2","text":"Tick QuoteVersion.v1 QuoteVersion.v0 code (string): \u5546\u54c1\u4ee3\u78bc datetime (string): \u65e5\u671f open (decimal): \u958b\u76e4\u50f9 underlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c bid_side_total_vol(int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) ask_side_total_vol(int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) avg_price (decimal): \u5747\u50f9 close (decimal): \u6210\u4ea4\u50f9 high (decimal): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4) low (decimal): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4) amount (decimal): \u6210\u4ea4\u984d (NTD) total_amount (decimal): \u7e3d\u6210\u4ea4\u984d (NTD) volume (int): \u6210\u4ea4\u91cf (lot) total_volume (int): \u7e3d\u6210\u4ea4\u91cf (lot) tick_type (int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} chg_type (int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} price_chg (decimal): \u6f32\u8dcc pct_chg (decimal): \u6f32\u8dcc\u5e45 (%) simtrade (bool): \u8a66\u64ae Amount (list of float): \u6210\u4ea4\u984d (\u6210\u4ea4\u50f9) AmountSum (list of float): \u7e3d\u6210\u4ea4\u984d (\u7e3d\u6210\u4ea4\u50f9) AvgPrice (list of float): \u5747\u50f9 Close (list of float): \u6210\u4ea4\u50f9 Code (string): \u5546\u54c1\u4ee3\u78bc Date (string): \u65e5\u671f (yyyy/MM/dd) DiffPrice (list of float): \u6f32\u8dcc DiffRate (list of float): \u6f32\u8dcc\u5e45 (%) DiffType (list of int): \u6f32\u8dcc\u8a3b\u8a18{1: \u6f32\u505c, 2: \u6f32, 3: \u5e73\u76e4, 4: \u8dcc, 5: \u8dcc\u505c} High (list of float): \u6700\u9ad8\u50f9(\u81ea\u958b\u76e4) Low (list of float): \u6700\u4f4e\u50f9(\u81ea\u958b\u76e4) Open (float): \u958b\u76e4\u50f9 TargetKindPrice float: \u6a19\u7684\u7269\u50f9\u683c TickType (:list:int): \u5167\u5916\u76e4\u5225{1: \u5167\u76e4, 2: \u5916\u76e4, 0: \u7121\u6cd5\u5224\u5b9a} Time (string): \u6642\u9593 (HH:mm:ss.ffffff) TradeAskVolSum (int): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) TradeBidVolSum (int): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf (lot) VolSum (list of int): \u7e3d\u6210\u4ea4\u91cf (lot) Volume (list of int): \u6210\u4ea4\u91cf (lot)","title":"\u5c6c\u6027"},{"location":"tutor/market_data/streaming/futures/#bidask","text":"","title":"BidAsk"},{"location":"tutor/market_data/streaming/futures/#_3","text":"In _api . Subscribe ( contract : _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], quoteType : QuoteType . bidask , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUO / v1 / FOP /*/ TFE / TXFJ2 | Event : SubscriptionOk Exchange . TAIFEX BidAskFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:27:31.856000\" , \"bid_total_vol\" : 79 , \"ask_total_vol\" : 98 , \"bid_price\" : [ \"12870\" , \"12869\" , \"12868\" , \"12867\" , \"12866\" ], \"bid_volume\" : [ 4 , 13 , 25 , 16 , 21 ], \"diff_bid_vol\" : [ - 10 , - 3 , - 6 , 5 , - 1 ], \"ask_price\" : [ \"12871\" , \"12872\" , \"12873\" , \"12874\" , \"12875\" ], \"ask_volume\" : [ 4 , 11 , 27 , 30 , 26 ], \"diff_ask_vol\" : [ - 2 , 1 , 13 , - 9 , 0 ], \"first_derived_bid_price\" : 12869.0 , \"first_derived_ask_price\" : 12873.0 , \"first_derived_bid_vol\" : 1 , \"first_derived_ask_vol\" : 2 , \"underlying_price\" : 12810.73 , \"simtrade\" : false } Response Code : 0 | Event code : 16 | Info : Q \uff0f */ TXFJ2 | Event : SubscriptionOk Q / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 29 : 41.356000 BidVolSum : 78 AskVolSum : 121 DiffBidVolSum : 0 DiffAskVolSum : 0 BidPrice : [ 12875 , 12874 , 12873 , 12872 , 12871 ] BidVolume : [ 1 , 10 , 20 , 33 , 14 ] DiffBidVol : [ 0 , 0 , 0 , 0 , 0 ] AskPrice : [ 12876 , 12877 , 12878 , 12879 , 12880 ] AskVolume : [ 9 , 15 , 41 , 24 , 32 ] DiffAskVol : [ - 1 , 0 , 0 , 0 , 0 ] FirstDerivedBidPrice : 12872 FirstDerivedAskPrice : 12878 FirstDerivedBidVolume : 2 FirstDerivedAskVolume : 2 TargetKindPrice : 12810.73","title":"\u7bc4\u4f8b"},{"location":"tutor/market_data/streaming/futures/#_4","text":"BidAsk QuoteVersion.v1 QuoteVersion.v0 code (string): \u5546\u54c1\u4ee3\u78bc datetime (string): \u6642\u9593 bid_total_vol (int): \u59d4\u8cb7\u91cf\u7e3d\u8a08 (lot) ask_total_vol (int): \u59d4\u8ce3\u91cf\u7e3d\u8a08 (lot) bid_price (:List:decimal): \u59d4\u8cb7\u50f9 bid_volume (:List:int): \u59d4\u8cb7\u91cf (lot) diff_bid_vol (:List:int): \u59d4\u8cb7\u50f9\u589e\u6e1b\u91cf (lot) ask_price (:List:decimal): \u59d4\u8ce3\u50f9 ask_volume (:List:int): \u59d4\u8ce3\u91cf (lot) diff_ask_vol (:List:int): \u59d4\u8ce3\u50f9\u589e\u6e1b\u91cf (lot) first_derived_bid_price (decimal): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u50f9 first_derived_ask_price (decimal): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u50f9 first_derived_bid_vol (int): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u91cf first_derived_ask_vol (int): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u91cf underlying_price (decimal): \u6a19\u7684\u7269\u50f9\u683c simtrade (bool): \u8a66\u64ae AskPrice (:List:float): \u59d4\u8ce3\u50f9 AskVolSum (int): \u59d4\u8ce3\u91cf\u7e3d\u8a08(lot) AskVolume (:List:int): \u59d4\u8ce3\u91cf BidPrice (:List:float): \u59d4\u8cb7\u50f9 BidVolSum (int): \u59d4\u8cb7\u91cf\u7e3d\u8a08(lot) BidVolume (:List:int): \u59d4\u8cb7\u91cf Code (string): \u5546\u54c1\u4ee3\u78bc Date (string): \u65e5\u671f (yyyy/MM/dd) DiffAskVol (:List:int): \u8ce3\u50f9\u589e\u6e1b\u91cf(lot) DiffAskVolSum (int): DiffBidVol (:List:int): \u8cb7\u50f9\u589e\u6e1b\u91cf(lot) DiffBidVolSum (int): FirstDerivedAskPrice (float): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u50f9 FirstDerivedAskVolume (int): \u884d\u751f\u4e00\u6a94\u59d4\u8ce3\u91cf FirstDerivedBidPrice (float): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u50f9 FirstDerivedBidVolume (int): \u884d\u751f\u4e00\u6a94\u59d4\u8cb7\u91cf TargetKindPrice (float): \u6a19\u7684\u7269\u50f9\u683c Time (string): \u6642\u9593 (HH:mm:ss.ffffff)","title":"\u5c6c\u6027"},{"location":"tutor/market_data/streaming/futures/#callback","text":"\u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528 Console.WriteLine \u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002 In QuoteVersion.v1 QuoteVersion.v0 public class Program { private static void myQuoteCB_v1 ( Exchange exchange , dynamic quote ) { Console . WriteLine ( $\"QuoteCB_v1 | Exchange.{exchange} {quote.GetType().Name} {quote}\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); // version >= 1.0 var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); // version <1.0 // var _accounts = _api.Login(\"PERSON_ID\", \"PASSWORD\"); _api . SetQuoteCallback_v1 ( myQuoteCB_v1 ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], QuoteType . bidask , version : QuoteVersion . v1 ); Console . ReadKey (); } } public class Program { private static void myQuoteCB ( string topic , Dictionary < string , dynamic > msg ) { Console . WriteLine ( \"myQuoteCB | Topic: \" + topic ); foreach ( var item in msg ) { Console . WriteLine ( item . Key + \": \" + item . Value ); } Console . WriteLine ( \"-----------------------------------\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); // version >= 1.0 var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); // version <1.0 // var _accounts = _api.Login(\"PERSON_ID\", \"PASSWORD\"); _api . SetQuoteCallback ( myQuoteCB ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], QuoteType . bidask , version : QuoteVersion . v0 ); Console . ReadKey (); } } Out QuoteVersion.v1 QuoteVersion.v0 QuoteCB_v1 | Exchange . TAIFEX BidAskFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:36:58.481000\" , \"bid_total_vol\" : 92 , \"ask_total_vol\" : 99 , \"bid_price\" : [ \"12893\" , \"12892\" , \"12891\" , \"12890\" , \"12889\" ], \"bid_volume\" : [ 6 , 13 , 36 , 21 , 16 ], \"diff_bid_vol\" : [ - 5 , 0 , 5 , 0 , 0 ], \"ask_price\" : [ \"12894\" , \"12895\" , \"12896\" , \"12897\" , \"12898\" ], \"ask_volume\" : [ 1 , 12 , 33 , 24 , 29 ], \"diff_ask_vol\" : [ 0 , 0 , 5 , - 5 , 0 ], \"first_derived_bid_price\" : 12891.0 , \"first_derived_ask_price\" : 12897.0 , \"first_derived_bid_vol\" : 2 , \"first_derived_ask_vol\" : 7 , \"underlying_price\" : 12810.73 , \"simtrade\" : false } myQuoteCB | Topic : Q / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 35 : 23.981000 BidVolSum : 91 AskVolSum : 108 DiffBidVolSum : 0 DiffAskVolSum : 0 BidPrice : [ 12890 , 12889 , 12888 , 12887 , 12886 ] BidVolume : [ 10 , 19 , 22 , 21 , 19 ] DiffBidVol : [ 1 , 0 , 0 , 0 , 0 ] AskPrice : [ 12892 , 12893 , 12894 , 12895 , 12896 ] AskVolume : [ 17 , 29 , 23 , 23 , 16 ] DiffAskVol : [ - 1 , 0 , 0 , 0 , 0 ] FirstDerivedBidPrice : 12890 FirstDerivedAskPrice : 12894 FirstDerivedBidVolume : 51 FirstDerivedAskVolume : 2 TargetKindPrice : 12810.73","title":"Callback"},{"location":"tutor/market_data/streaming/stocks/","text":"\u5229\u7528\u8a02\u95b1 \u5546\u54c1\u6a94 \u7684\u65b9\u5f0f\u53bb\u53d6\u5f97\u5373\u6642\u884c\u60c5\u3002 Quote Parameters: enum QuoteType { tick , bidask , quote } bool intraday_odd : { true , false } enum QuoteVersion : { v0 , v1 } Tick \u00b6 \u6574\u80a1 \u00b6 In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . tick , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE TickSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:24:22.500106\" , \"open\" : 414.5 , \"avg_price\" : 412.54 , \"close\" : 410.5 , \"high\" : 414.5 , \"low\" : 409.0 , \"amount\" : 821000.0 , \"total_amount\" : 6589192000.0 , \"volume\" : 2 , \"total_volume\" : 15972 , \"tick_type\" : 1 , \"chg_type\" : 2 , \"price_chg\" : 15.5 , \"pct_chg\" : 3.92 , \"bid_side_total_vol\" : 10146 , \"ask_side_total_vol\" : 5826 , \"bid_side_total_cnt\" : 1260 , \"ask_side_total_cnt\" : 2102 , \"closing_oddlot_shares\" : 0 , \"fixed_trade_vol\" : 0 , \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } Response Code : 0 | Event code : 16 | Info : MKT /*/ TSE / 2330 | Event : SubscriptionOk MKT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 21 : 02.418956 Close : [ 411 ] Volume : [ 1 ] VolSum : [ 15736 ] AmountSum : [ 6492300500 ] TickType : [ 1 ] \u76e4\u4e2d\u96f6\u80a1 \u00b6 In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . tick , intradayOdd : true , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE TickSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:26:02.545208\" , \"open\" : 411.0 , \"avg_price\" : 427.697026 , \"close\" : 410.0 , \"high\" : 411.0 , \"low\" : 410.0 , \"amount\" : 3491560.0 , \"total_amount\" : 87359256.0 , \"volume\" : 8516 , \"total_volume\" : 204255 , \"tick_type\" : 2 , \"chg_type\" : 2 , \"price_chg\" : 15.0 , \"pct_chg\" : 3.797468 , \"bid_side_total_vol\" : 163264 , \"ask_side_total_vol\" : 49507 , \"bid_side_total_cnt\" : 4 , \"ask_side_total_cnt\" : 3 , \"closing_oddlot_shares\" : 0 , \"fixed_trade_vol\" : 0 , \"suspend\" : false , \"simtrade\" : true , \"intraday_odd\" : true } Response Code : 0 | Event code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : SubscriptionOk TIC / v2 / replay / TSE / 2330 / ODDLOT Date : 2022 / 10 / 14 Time : 09 : 27 : 02.734685 Close : 410 TickType : 2 Shares : 12041 SharesSum : 204255 Simtrade : 1 \u5c6c\u6027 \u00b6 Tick QuoteVersion.v1 QuoteVersion.v0 code ( string ): \u5546\u54c1\u4ee3\u78bc datetime ( string ): \u6642\u9593 open ( decimal ): \u958b\u76e4\u50f9 avg_price ( decimal ): \u5747\u50f9 close ( decimal ): \u6210\u4ea4\u50f9 high ( decimal ): \u6700\u9ad8\u50f9 ( \u81ea\u958b\u76e4 ) low ( decimal ): \u6700\u4f4e\u50f9 ( \u81ea\u958b\u76e4 ) amount ( decimal ): \u6210\u4ea4\u984d ( NTD ) total_amount ( decimal ): \u7e3d\u6210\u4ea4\u984d ( NTD ) volume ( int ): \u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) total_volume ( int ): \u7e3d\u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) tick_type ( int ): \u5167\u5916\u76e4\u5225 { 1 : \u5167\u76e4 , 2 : \u5916\u76e4 , 0 : \u7121\u6cd5\u5224\u5b9a } chg_type ( int ): \u6f32\u8dcc\u8a3b\u8a18 { 1 : \u6f32\u505c , 2 : \u6f32 , 3 : \u5e73\u76e4 , 4 : \u8dcc , 5 : \u8dcc\u505c } price_chg ( decimal ): \u6f32\u8dcc pct_chg ( decimal ): \u6f32\u8dcc\u5e45 bid_side_total_vol ( int ): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) ask_side_total_vol ( int ): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) bid_side_total_cnt ( int ): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt ( int ): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares ( int ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 ( \u80a1 ) fixed_trade_vol ( int ): \u5b9a\u76e4\u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae intraday_odd ( int ): \u76e4\u4e2d\u96f6\u80a1 { 0 : \u6574\u80a1 , 1 : \u76e4\u4e2d\u96f6\u80a1 } Date ( string ): \u65e5\u671f ( yyyy / MM / dd ) Time ( string ): \u6642\u9593 ( HH : mm : ss . ffffff ) Close (: List : float ): \u6210\u4ea4\u50f9 TickType (: List : int ): \u5167\u5916\u76e4\u5225 { 1 : \u5167\u76e4 , 2 : \u5916\u76e4 , 0 : \u7121\u6cd5\u5224\u5b9a } SharesSum (: List : int ): \u7e3d\u6210\u4ea4\u91cf ( \u5f35 ) Shares (: List : int ): \u6210\u4ea4\u91cf ( \u5f35 ) Simtrade ( bool ): \u8a66\u64ae BidAsk \u00b6 \u6574\u80a1 \u00b6 In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . bidask , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:31:05.066623\" , \"bid_price\" : [ \"410.5\" , \"410\" , \"409.5\" , \"409\" , \"408.5\" ], \"bid_volume\" : [ 22 , 357 , 101 , 171 , 89 ], \"diff_bid_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"ask_price\" : [ \"411\" , \"411.5\" , \"412\" , \"412.5\" , \"413\" ], \"ask_volume\" : [ 300 , 185 , 603 , 220 , 664 ], \"diff_ask_vol\" : [ - 1 , 0 , 0 , 0 , 0 ], \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } Response Code : 0 | Event code : 16 | Info : QUT \uff0f */ TSE / 2330 | Event : SubscriptionOk QUT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 32 : 15.316453 BidPrice : [ 410.5 , 410 , 409.5 , 409 , 408.5 ] AskPrice : [ 411 , 411.5 , 412 , 412.5 , 413 ] BidVolume : [ 91 , 338 , 218 , 161 , 89 ] AskVolume : [ 301 , 170 , 629 , 230 , 671 ] \u76e4\u4e2d\u96f6\u80a1 \u00b6 In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . bidask , intradayOdd : true , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:29:42.875584\" , \"bid_price\" : [ \"410\" , \"409.5\" , \"409\" , \"408.5\" , \"408\" ], \"bid_volume\" : [ 18 , 8840 , 62404 , 54036 , 11476 ], \"diff_bid_vol\" : [ 15319 , - 98508 , - 40662 , 52024 , 6716 ], \"ask_price\" : [ \"410.5\" , \"411\" , \"411.5\" , \"412\" , \"412.5\" ], \"ask_volume\" : [ 27978 , 44773 , 12908 , 126508 , 314258 ], \"diff_ask_vol\" : [ 14264 , - 15181 , - 87825 , - 124052 , 409216 ], \"suspend\" : false , \"simtrade\" : true , \"intraday_odd\" : true } Response Code : 0 | Event code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : SubscriptionOk QUO / v2 / replay / TSE / 2330 / ODDLOT Date : 2022 / 10 / 14 Time : 09 : 28 : 42.631677 BidPrice : [ 410 , 409.5 , 409 , 408.5 , 408 ] AskPrice : [ 410.5 , 411 , 411.5 , 412 , 412.5 ] BidShares : [ 2432 , 9465 , 10197 , 53906 , 11176 ] AskShares : [ 27317 , 43593 , 12812 , 126623 , 251203 ] Simtrade : 1 \u5c6c\u6027 \u00b6 BidAsk QuoteVersion.v1 QuoteVersion.v0 code ( str ): \u5546\u54c1\u4ee3\u78bc datetime ( datetime ): \u6642\u9593 bid_price (: List : decimal ): \u59d4\u8cb7\u50f9 bid_volume (: List : int ): \u59d4\u8cb7\u91cf ( \u5f35 ) diff_bid_vol (: List : int ): \u8cb7\u50f9\u589e\u6e1b\u91cf ( \u5f35 ) ask_price (: List : decimal ): \u59d4\u8ce3\u50f9 ask_volume (: List : int ): \u59d4\u8ce3\u91cf diff_ask_vol (: List : int ): \u8ce3\u50f9\u589e\u6e1b\u91cf ( \u5f35 ) suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae Date ( datetime . date ): \u65e5\u671f ( yyyy / MM / dd ) Time ( time ): \u6642\u9593 ( HH : mm : ss . ffffff ) BidPrice (: List : float ): \u59d4\u8cb7\u50f9 AskPrice (: List : float ): \u59d4\u8ce3\u50f9 BidShares (: List : int ): \u59d4\u8cb7\u91cf AskShares (: List : int ): \u59d4\u8ce3\u91cf Simtrade ( bool ): \u8a66\u64ae Quote \u00b6 In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . quote , version : QuoteVersion . v1 ); Out Response Code : 0 | Event code : 16 | Info : QUO / v2 / STK \uff0f */ TSE / 2330 | Event : SubscriptionOk Exchange . TSE QuoteSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:34:34.158334\" , \"open\" : 414.5 , \"avg_price\" : 412.36 , \"close\" : 411.5 , \"high\" : 414.5 , \"low\" : 409.0 , \"amount\" : 411500.0 , \"total_amount\" : 7285720500.0 , \"volume\" : 0 , \"total_volume\" : 17668 , \"tick_type\" : 2 , \"chg_type\" : 2 , \"price_chg\" : 16.5 , \"pct_chg\" : 4.17 , \"bid_side_total_vol\" : 11425 , \"ask_side_total_vol\" : 6243 , \"bid_side_total_cnt\" : 1540 , \"ask_side_total_cnt\" : 2299 , \"closing_oddlot_shares\" : 0 , \"closing_oddlot_close\" : 0.0 , \"closing_oddlot_amount\" : 0.0 , \"closing_oddlot_bid_price\" : 0.0 , \"closing_oddlot_ask_price\" : 0.0 , \"fixed_trade_vol\" : 0 , \"fixed_trade_amount\" : 0.0 , \"bid_price\" : [ \"411.5\" , \"411\" , \"410.5\" , \"410\" , \"409.5\" ], \"bid_volume\" : [ 264 , 117 , 449 , 461 , 160 ], \"diff_bid_vol\" : [ 0 , - 22 , 0 , 0 , 0 ], \"ask_price\" : [ \"412\" , \"412.5\" , \"413\" , \"413.5\" , \"414\" ], \"ask_volume\" : [ 639 , 261 , 657 , 286 , 797 ], \"diff_ask_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"avail_borrowing\" : 3717809 , \"suspend\" : false , \"simtrade\" : false } \u5c6c\u6027 \u00b6 Quote code ( string ): \u5546\u54c1\u4ee3\u78bc datetime ( string ): \u6642\u9593 open ( decimal ): \u958b\u76e4\u50f9 avg_price ( decimal ): \u5747\u50f9 close ( decimal ): \u6210\u4ea4\u50f9 high ( decimal ): \u6700\u9ad8\u50f9 ( \u81ea\u958b\u76e4 ) low ( decimal ): \u6700\u4f4e\u50f9 ( \u81ea\u958b\u76e4 ) amount ( decimal ): \u6210\u4ea4\u984d ( NTD ) total_amount ( decimal ): \u7e3d\u6210\u4ea4\u984d ( NTD ) volume ( int ): \u6210\u4ea4\u91cf total_volume ( int ): \u7e3d\u6210\u4ea4\u91cf tick_type ( int ): \u5167\u5916\u76e4\u5225 chg_type ( int ): \u6f32\u8dcc\u8a3b\u8a18 price_chg ( decimal ): \u6f32\u8dcc\u50f9 pct_chg ( decimal ): \u6f32\u8dcc\u7387 bid_side_total_vol ( int ): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u5f35 ) ask_side_total_vol ( int ): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u5f35 ) bid_side_total_cnt ( int ): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt ( int ): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares ( int ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 closing_oddlot_close ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9 closing_oddlot_amount ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d closing_oddlot_bid_price ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 closing_oddlot_ask_price ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 fixed_trade_vol ( int ): \u5b9a\u76e4\u6210\u4ea4\u91cf ( \u5f35 ) fixed_trade_amount ( decimal ): \u5b9a\u76e4\u6210\u4ea4\u984d bid_price (: List : decimal ): \u8cb7\u50f9 bid_volume (: List : int ) \u8cb7\u91cf diff_bid_vol (: List : int ) \u8cb7\u50f9\u589e\u6e1b\u91cf ask_price (: List : decimal ): \u8ce3\u50f9 ask_volume (: List : int ) \u8ce3\u91cf diff_ask_vol (: List : int ) \u8ce3\u50f9\u589e\u6e1b\u91cf avail_borrowing ( int ): \u501f\u5238\u53ef\u7528\u9918\u984d suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae Callback \u00b6 \u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528 Console.WriteLine \u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002 Set Quote Callback \u00b6 In QuoteVersion.v1 QuoteVersion.v0 public class Program { private static void myQuoteCB_v1 ( Exchange exchange , dynamic quote ) { Console . WriteLine ( $\"QuoteCB_v1 | Exchange.{exchange} {quote.GetType().Name} {quote}\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); // version >= 1.0 var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); // version <1.0 // var _accounts = _api.Login(\"PERSON_ID\", \"PASSWORD\"); _api . SetQuoteCallback_v1 ( myQuoteCB_v1 ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); } } public class Program { private static void myQuoteCB ( string topic , Dictionary < string , dynamic > msg ) { Console . WriteLine ( $\"QuoteCB | Topic: {topic}\" ); foreach ( var item in msg ) { Console . WriteLine ( item . Key + \": \" + item . Value ); } Console . WriteLine ( \"-----------------------------------\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); // version >= 1.0 var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); // version <1.0 // var _accounts = _api.Login(\"PERSON_ID\", \"PASSWORD\"); _api . SetQuoteCallback ( myQuoteCB ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); Console . ReadKey (); } } Out QuoteVersion.v1 QuoteVersion.v0 QuoteCB_v1 | Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:39:00.354081\" , \"bid_price\" : [ \"411\" , \"410.5\" , \"410\" , \"409.5\" , \"409\" ], \"bid_volume\" : [ 577 , 191 , 364 , 185 , 148 ], \"diff_bid_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"ask_price\" : [ \"411.5\" , \"412\" , \"412.5\" , \"413\" , \"413.5\" ], \"ask_volume\" : [ 53 , 609 , 230 , 750 , 358 ], \"diff_ask_vol\" : [ - 4 , 0 , 0 , 0 , 0 ], \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } QuoteCB | Topic : QUT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 37 : 02.268206 BidPrice : [ 411 , 410.5 , 410 , 409.5 , 409 ] AskPrice : [ 411.5 , 412 , 412.5 , 413 , 413.5 ] BidVolume : [ 107 , 132 , 563 , 188 , 150 ] AskVolume : [ 34 , 592 , 258 , 675 , 299 ]","title":"\u8b49\u5238"},{"location":"tutor/market_data/streaming/stocks/#tick","text":"","title":"Tick"},{"location":"tutor/market_data/streaming/stocks/#_1","text":"In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . tick , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE TickSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:24:22.500106\" , \"open\" : 414.5 , \"avg_price\" : 412.54 , \"close\" : 410.5 , \"high\" : 414.5 , \"low\" : 409.0 , \"amount\" : 821000.0 , \"total_amount\" : 6589192000.0 , \"volume\" : 2 , \"total_volume\" : 15972 , \"tick_type\" : 1 , \"chg_type\" : 2 , \"price_chg\" : 15.5 , \"pct_chg\" : 3.92 , \"bid_side_total_vol\" : 10146 , \"ask_side_total_vol\" : 5826 , \"bid_side_total_cnt\" : 1260 , \"ask_side_total_cnt\" : 2102 , \"closing_oddlot_shares\" : 0 , \"fixed_trade_vol\" : 0 , \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } Response Code : 0 | Event code : 16 | Info : MKT /*/ TSE / 2330 | Event : SubscriptionOk MKT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 21 : 02.418956 Close : [ 411 ] Volume : [ 1 ] VolSum : [ 15736 ] AmountSum : [ 6492300500 ] TickType : [ 1 ]","title":"\u6574\u80a1"},{"location":"tutor/market_data/streaming/stocks/#_2","text":"In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . tick , intradayOdd : true , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE TickSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:26:02.545208\" , \"open\" : 411.0 , \"avg_price\" : 427.697026 , \"close\" : 410.0 , \"high\" : 411.0 , \"low\" : 410.0 , \"amount\" : 3491560.0 , \"total_amount\" : 87359256.0 , \"volume\" : 8516 , \"total_volume\" : 204255 , \"tick_type\" : 2 , \"chg_type\" : 2 , \"price_chg\" : 15.0 , \"pct_chg\" : 3.797468 , \"bid_side_total_vol\" : 163264 , \"ask_side_total_vol\" : 49507 , \"bid_side_total_cnt\" : 4 , \"ask_side_total_cnt\" : 3 , \"closing_oddlot_shares\" : 0 , \"fixed_trade_vol\" : 0 , \"suspend\" : false , \"simtrade\" : true , \"intraday_odd\" : true } Response Code : 0 | Event code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : SubscriptionOk TIC / v2 / replay / TSE / 2330 / ODDLOT Date : 2022 / 10 / 14 Time : 09 : 27 : 02.734685 Close : 410 TickType : 2 Shares : 12041 SharesSum : 204255 Simtrade : 1","title":"\u76e4\u4e2d\u96f6\u80a1"},{"location":"tutor/market_data/streaming/stocks/#_3","text":"Tick QuoteVersion.v1 QuoteVersion.v0 code ( string ): \u5546\u54c1\u4ee3\u78bc datetime ( string ): \u6642\u9593 open ( decimal ): \u958b\u76e4\u50f9 avg_price ( decimal ): \u5747\u50f9 close ( decimal ): \u6210\u4ea4\u50f9 high ( decimal ): \u6700\u9ad8\u50f9 ( \u81ea\u958b\u76e4 ) low ( decimal ): \u6700\u4f4e\u50f9 ( \u81ea\u958b\u76e4 ) amount ( decimal ): \u6210\u4ea4\u984d ( NTD ) total_amount ( decimal ): \u7e3d\u6210\u4ea4\u984d ( NTD ) volume ( int ): \u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) total_volume ( int ): \u7e3d\u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) tick_type ( int ): \u5167\u5916\u76e4\u5225 { 1 : \u5167\u76e4 , 2 : \u5916\u76e4 , 0 : \u7121\u6cd5\u5224\u5b9a } chg_type ( int ): \u6f32\u8dcc\u8a3b\u8a18 { 1 : \u6f32\u505c , 2 : \u6f32 , 3 : \u5e73\u76e4 , 4 : \u8dcc , 5 : \u8dcc\u505c } price_chg ( decimal ): \u6f32\u8dcc pct_chg ( decimal ): \u6f32\u8dcc\u5e45 bid_side_total_vol ( int ): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) ask_side_total_vol ( int ): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) bid_side_total_cnt ( int ): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt ( int ): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares ( int ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 ( \u80a1 ) fixed_trade_vol ( int ): \u5b9a\u76e4\u6210\u4ea4\u91cf ( \u6574\u80a1 : \u5f35 , \u76e4\u4e2d\u96f6\u80a1 : \u80a1 ) suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae intraday_odd ( int ): \u76e4\u4e2d\u96f6\u80a1 { 0 : \u6574\u80a1 , 1 : \u76e4\u4e2d\u96f6\u80a1 } Date ( string ): \u65e5\u671f ( yyyy / MM / dd ) Time ( string ): \u6642\u9593 ( HH : mm : ss . ffffff ) Close (: List : float ): \u6210\u4ea4\u50f9 TickType (: List : int ): \u5167\u5916\u76e4\u5225 { 1 : \u5167\u76e4 , 2 : \u5916\u76e4 , 0 : \u7121\u6cd5\u5224\u5b9a } SharesSum (: List : int ): \u7e3d\u6210\u4ea4\u91cf ( \u5f35 ) Shares (: List : int ): \u6210\u4ea4\u91cf ( \u5f35 ) Simtrade ( bool ): \u8a66\u64ae","title":"\u5c6c\u6027"},{"location":"tutor/market_data/streaming/stocks/#bidask","text":"","title":"BidAsk"},{"location":"tutor/market_data/streaming/stocks/#_4","text":"In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . bidask , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:31:05.066623\" , \"bid_price\" : [ \"410.5\" , \"410\" , \"409.5\" , \"409\" , \"408.5\" ], \"bid_volume\" : [ 22 , 357 , 101 , 171 , 89 ], \"diff_bid_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"ask_price\" : [ \"411\" , \"411.5\" , \"412\" , \"412.5\" , \"413\" ], \"ask_volume\" : [ 300 , 185 , 603 , 220 , 664 ], \"diff_ask_vol\" : [ - 1 , 0 , 0 , 0 , 0 ], \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } Response Code : 0 | Event code : 16 | Info : QUT \uff0f */ TSE / 2330 | Event : SubscriptionOk QUT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 32 : 15.316453 BidPrice : [ 410.5 , 410 , 409.5 , 409 , 408.5 ] AskPrice : [ 411 , 411.5 , 412 , 412.5 , 413 ] BidVolume : [ 91 , 338 , 218 , 161 , 89 ] AskVolume : [ 301 , 170 , 629 , 230 , 671 ]","title":"\u6574\u80a1"},{"location":"tutor/market_data/streaming/stocks/#_5","text":"In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . bidask , intradayOdd : true , version : QuoteVersion . v1 ); Out QuoteVersion.v1 QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:29:42.875584\" , \"bid_price\" : [ \"410\" , \"409.5\" , \"409\" , \"408.5\" , \"408\" ], \"bid_volume\" : [ 18 , 8840 , 62404 , 54036 , 11476 ], \"diff_bid_vol\" : [ 15319 , - 98508 , - 40662 , 52024 , 6716 ], \"ask_price\" : [ \"410.5\" , \"411\" , \"411.5\" , \"412\" , \"412.5\" ], \"ask_volume\" : [ 27978 , 44773 , 12908 , 126508 , 314258 ], \"diff_ask_vol\" : [ 14264 , - 15181 , - 87825 , - 124052 , 409216 ], \"suspend\" : false , \"simtrade\" : true , \"intraday_odd\" : true } Response Code : 0 | Event code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : SubscriptionOk QUO / v2 / replay / TSE / 2330 / ODDLOT Date : 2022 / 10 / 14 Time : 09 : 28 : 42.631677 BidPrice : [ 410 , 409.5 , 409 , 408.5 , 408 ] AskPrice : [ 410.5 , 411 , 411.5 , 412 , 412.5 ] BidShares : [ 2432 , 9465 , 10197 , 53906 , 11176 ] AskShares : [ 27317 , 43593 , 12812 , 126623 , 251203 ] Simtrade : 1","title":"\u76e4\u4e2d\u96f6\u80a1"},{"location":"tutor/market_data/streaming/stocks/#_6","text":"BidAsk QuoteVersion.v1 QuoteVersion.v0 code ( str ): \u5546\u54c1\u4ee3\u78bc datetime ( datetime ): \u6642\u9593 bid_price (: List : decimal ): \u59d4\u8cb7\u50f9 bid_volume (: List : int ): \u59d4\u8cb7\u91cf ( \u5f35 ) diff_bid_vol (: List : int ): \u8cb7\u50f9\u589e\u6e1b\u91cf ( \u5f35 ) ask_price (: List : decimal ): \u59d4\u8ce3\u50f9 ask_volume (: List : int ): \u59d4\u8ce3\u91cf diff_ask_vol (: List : int ): \u8ce3\u50f9\u589e\u6e1b\u91cf ( \u5f35 ) suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae Date ( datetime . date ): \u65e5\u671f ( yyyy / MM / dd ) Time ( time ): \u6642\u9593 ( HH : mm : ss . ffffff ) BidPrice (: List : float ): \u59d4\u8cb7\u50f9 AskPrice (: List : float ): \u59d4\u8ce3\u50f9 BidShares (: List : int ): \u59d4\u8cb7\u91cf AskShares (: List : int ): \u59d4\u8ce3\u91cf Simtrade ( bool ): \u8a66\u64ae","title":"\u5c6c\u6027"},{"location":"tutor/market_data/streaming/stocks/#quote","text":"In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . quote , version : QuoteVersion . v1 ); Out Response Code : 0 | Event code : 16 | Info : QUO / v2 / STK \uff0f */ TSE / 2330 | Event : SubscriptionOk Exchange . TSE QuoteSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:34:34.158334\" , \"open\" : 414.5 , \"avg_price\" : 412.36 , \"close\" : 411.5 , \"high\" : 414.5 , \"low\" : 409.0 , \"amount\" : 411500.0 , \"total_amount\" : 7285720500.0 , \"volume\" : 0 , \"total_volume\" : 17668 , \"tick_type\" : 2 , \"chg_type\" : 2 , \"price_chg\" : 16.5 , \"pct_chg\" : 4.17 , \"bid_side_total_vol\" : 11425 , \"ask_side_total_vol\" : 6243 , \"bid_side_total_cnt\" : 1540 , \"ask_side_total_cnt\" : 2299 , \"closing_oddlot_shares\" : 0 , \"closing_oddlot_close\" : 0.0 , \"closing_oddlot_amount\" : 0.0 , \"closing_oddlot_bid_price\" : 0.0 , \"closing_oddlot_ask_price\" : 0.0 , \"fixed_trade_vol\" : 0 , \"fixed_trade_amount\" : 0.0 , \"bid_price\" : [ \"411.5\" , \"411\" , \"410.5\" , \"410\" , \"409.5\" ], \"bid_volume\" : [ 264 , 117 , 449 , 461 , 160 ], \"diff_bid_vol\" : [ 0 , - 22 , 0 , 0 , 0 ], \"ask_price\" : [ \"412\" , \"412.5\" , \"413\" , \"413.5\" , \"414\" ], \"ask_volume\" : [ 639 , 261 , 657 , 286 , 797 ], \"diff_ask_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"avail_borrowing\" : 3717809 , \"suspend\" : false , \"simtrade\" : false }","title":"Quote"},{"location":"tutor/market_data/streaming/stocks/#_7","text":"Quote code ( string ): \u5546\u54c1\u4ee3\u78bc datetime ( string ): \u6642\u9593 open ( decimal ): \u958b\u76e4\u50f9 avg_price ( decimal ): \u5747\u50f9 close ( decimal ): \u6210\u4ea4\u50f9 high ( decimal ): \u6700\u9ad8\u50f9 ( \u81ea\u958b\u76e4 ) low ( decimal ): \u6700\u4f4e\u50f9 ( \u81ea\u958b\u76e4 ) amount ( decimal ): \u6210\u4ea4\u984d ( NTD ) total_amount ( decimal ): \u7e3d\u6210\u4ea4\u984d ( NTD ) volume ( int ): \u6210\u4ea4\u91cf total_volume ( int ): \u7e3d\u6210\u4ea4\u91cf tick_type ( int ): \u5167\u5916\u76e4\u5225 chg_type ( int ): \u6f32\u8dcc\u8a3b\u8a18 price_chg ( decimal ): \u6f32\u8dcc\u50f9 pct_chg ( decimal ): \u6f32\u8dcc\u7387 bid_side_total_vol ( int ): \u8cb7\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u5f35 ) ask_side_total_vol ( int ): \u8ce3\u76e4\u6210\u4ea4\u7e3d\u91cf ( \u5f35 ) bid_side_total_cnt ( int ): \u8cb7\u76e4\u6210\u4ea4\u7b46\u6578 ask_side_total_cnt ( int ): \u8ce3\u76e4\u6210\u4ea4\u7b46\u6578 closing_oddlot_shares ( int ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u80a1\u6578 closing_oddlot_close ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u50f9 closing_oddlot_amount ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u6210\u4ea4\u984d closing_oddlot_bid_price ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u8cb7\u50f9 closing_oddlot_ask_price ( decimal ): \u76e4\u5f8c\u96f6\u80a1\u8ce3\u50f9 fixed_trade_vol ( int ): \u5b9a\u76e4\u6210\u4ea4\u91cf ( \u5f35 ) fixed_trade_amount ( decimal ): \u5b9a\u76e4\u6210\u4ea4\u984d bid_price (: List : decimal ): \u8cb7\u50f9 bid_volume (: List : int ) \u8cb7\u91cf diff_bid_vol (: List : int ) \u8cb7\u50f9\u589e\u6e1b\u91cf ask_price (: List : decimal ): \u8ce3\u50f9 ask_volume (: List : int ) \u8ce3\u91cf diff_ask_vol (: List : int ) \u8ce3\u50f9\u589e\u6e1b\u91cf avail_borrowing ( int ): \u501f\u5238\u53ef\u7528\u9918\u984d suspend ( bool ): \u66ab\u505c\u4ea4\u6613 simtrade ( bool ): \u8a66\u64ae","title":"\u5c6c\u6027"},{"location":"tutor/market_data/streaming/stocks/#callback","text":"\u9810\u8a2d\u72c0\u6cc1\u4e0b\u6211\u5011\u5c07\u5373\u6642\u884c\u60c5\u4f7f\u7528 Console.WriteLine \u7684\u65b9\u5f0f\u5448\u73fe\u3002\u53ef\u6839\u64da\u500b\u4eba\u9700\u6c42\u4fee\u6539\u51fd\u6578\u3002\u8acb\u907f\u514d\u5728\u51fd\u6578\u5167\u9032\u884c\u904b\u7b97\u3002","title":"Callback"},{"location":"tutor/market_data/streaming/stocks/#set-quote-callback","text":"In QuoteVersion.v1 QuoteVersion.v0 public class Program { private static void myQuoteCB_v1 ( Exchange exchange , dynamic quote ) { Console . WriteLine ( $\"QuoteCB_v1 | Exchange.{exchange} {quote.GetType().Name} {quote}\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); // version >= 1.0 var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); // version <1.0 // var _accounts = _api.Login(\"PERSON_ID\", \"PASSWORD\"); _api . SetQuoteCallback_v1 ( myQuoteCB_v1 ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); } } public class Program { private static void myQuoteCB ( string topic , Dictionary < string , dynamic > msg ) { Console . WriteLine ( $\"QuoteCB | Topic: {topic}\" ); foreach ( var item in msg ) { Console . WriteLine ( item . Key + \": \" + item . Value ); } Console . WriteLine ( \"-----------------------------------\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); // version >= 1.0 var _accounts = _api . Login ( \"YOUR_API_KEY\" , \"YOUR_SECRET_KEY\" ); // version <1.0 // var _accounts = _api.Login(\"PERSON_ID\", \"PASSWORD\"); _api . SetQuoteCallback ( myQuoteCB ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); Console . ReadKey (); } } Out QuoteVersion.v1 QuoteVersion.v0 QuoteCB_v1 | Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:39:00.354081\" , \"bid_price\" : [ \"411\" , \"410.5\" , \"410\" , \"409.5\" , \"409\" ], \"bid_volume\" : [ 577 , 191 , 364 , 185 , 148 ], \"diff_bid_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"ask_price\" : [ \"411.5\" , \"412\" , \"412.5\" , \"413\" , \"413.5\" ], \"ask_volume\" : [ 53 , 609 , 230 , 750 , 358 ], \"diff_ask_vol\" : [ - 4 , 0 , 0 , 0 , 0 ], \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } QuoteCB | Topic : QUT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 37 : 02.268206 BidPrice : [ 411 , 410.5 , 410 , 409.5 , 409 ] AskPrice : [ 411.5 , 412 , 412.5 , 413 , 413.5 ] BidVolume : [ 107 , 132 , 563 , 188 , 150 ] AskVolume : [ 34 , 592 , 258 , 675 , 299 ]","title":"Set Quote Callback"},{"location":"tutor/order/CA/","text":"Limited by financial regulations in Taiwan, in order to use order and account api , you have to 1. sign the related documents. 2. apply for the CA, place your CA in your computer and then activate it. 1 Sign Documents \u00b6 Please refer to sign center and read the documents carefully before you sign. 2 Apply & Activate CA \u00b6 Apply for CA \u00b6 1. SinoPac Securities download eleader \u00b6 2. Login eleader \u00b6 3. \u5e33\u6236\u8cc7\u6599 -> (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a \u00b6 4. Click \"\u6b65\u9a5f\u8aaa\u660e\" \u00b6 5. CA \u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e \u00b6 Activate CA \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var res = _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"ca_password\" , \"person_id\" ); Console . WriteLine ( res . ToString ()); # caIsActivated : True If you use simulation account, you don't have to activate CA.","title":"CA"},{"location":"tutor/order/CA/#1-sign-documents","text":"Please refer to sign center and read the documents carefully before you sign.","title":"1 Sign Documents"},{"location":"tutor/order/CA/#2-apply-activate-ca","text":"","title":"2 Apply &amp; Activate CA"},{"location":"tutor/order/CA/#apply-for-ca","text":"","title":"Apply for CA"},{"location":"tutor/order/CA/#1-sinopac-securities-download-eleader","text":"","title":"1. SinoPac Securities download eleader"},{"location":"tutor/order/CA/#2-login-eleader","text":"","title":"2. Login eleader"},{"location":"tutor/order/CA/#3-3303","text":"","title":"3. \u5e33\u6236\u8cc7\u6599 -&gt; (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a"},{"location":"tutor/order/CA/#4-click","text":"","title":"4. Click \"\u6b65\u9a5f\u8aaa\u660e\""},{"location":"tutor/order/CA/#5-ca","text":"","title":"5. CA \u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e"},{"location":"tutor/order/CA/#activate-ca","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var res = _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"ca_password\" , \"person_id\" ); Console . WriteLine ( res . ToString ()); # caIsActivated : True If you use simulation account, you don't have to activate CA.","title":"Activate CA"},{"location":"tutor/order/FutureOption/","text":"\u63d0\u9192 \u4e0b\u55ae\u524d\u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u671f\u8ca8\u59d4\u8a17\u55ae \u00b6 \u671f\u8ca8\u59d4\u8a17\u55ae price ( float or int ): \u50f9\u683c quantity ( int ): \u59d4\u8a17\u6578\u91cf action ( str ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } octype ( str ): { Auto : \u81ea\u52d5 , New : \u65b0\u5009 , Cover : \u5e73\u5009 , DayTrade : \u7576\u6c96 } account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f ca ( binary ): \u6191\u8b49 \u4e0b\u55ae \u00b6 \u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002 \u5546\u54c1\u6a94 var contract = _api . Contracts . Futures [ \"TXO\" ][ \"TXO20230310600P\" ]; \u59d4\u8a17\u55ae version>=1.0 version<1.0 var order = new FutOptOrder () { action = Action . Buy , price = 0.1 , quantity = 3 , price_type = FuturesPriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto , } var order = new FutOptOrder () { action = Action . Buy , price = 0.1 , quantity = 3 , price_type = FuturesPriceType . LMT , order_type = FuturesOrderType . ROD , octype = OCType . Auto , } \u4e0b\u55ae _trade = _api . PlaceOrder ( contract , order ) Console . WriteLine ( _trade ) Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , delivery_month = 202303 , strike_price = 10600 , option_right = P , underlying_kind = I , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , name = \u81fa\u6307\u9078\u64c7\u6b0a 03 \u6708 10600 P }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = }, ca = }, status = { id = a0df16d5 , status = PendingSubmit , status_code = , order_ts = 1676946129.0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 } } \u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b \u4e0b\u55ae\u56de\u5831 \u3002 \u60a8\u9700\u8981\u57f7\u884c UpdateStatus \u5df2\u66f4\u65b0 trade \u7269\u4ef6\u7684\u72c0\u614b\u3002 \u66f4\u65b0\u59d4\u8a17\u72c0\u614b _api . UpdateStatus ( _api . FutureAccount ) Console . WriteLine ( _trade ) Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , delivery_month = 202303 , strike_price = 10600 , option_right = P , underlying_kind = I , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , name = \u81fa\u6307\u9078\u64c7\u6b0a 03 \u6708 10600 P }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = }, ca = }, status = { id = a0df16d5 , status = Submitted , status_code = , order_ts = 1676946129.0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 } } \u59d4\u8a17\u55ae\u72c0\u614b PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 \u6539\u55ae \u00b6 \u6539\u50f9 \u00b6 In _trade = _api . UpdateOrder ( _trade , price : 0.2 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , delivery_month = 202303 , strike_price = 10600 , option_right = P , underlying_kind = I , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , name = \u81fa\u6307\u9078\u64c7\u6b0a 03 \u6708 10600 P }, order = { action = Buy , price = 0.2 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = }, ca = }, status = { id = a0df16d5 , status = Submitted , status_code = , order_ts = 1676946129.0 , modified_ts = 0 , modified_price = 0.2 , deal_quantity = 0 , cancel_quantity = 0 } } \u6539\u91cf(\u6e1b\u91cf) \u00b6 UpdateOrder \u53ea\u80fd\u7528\u4f86 \u6e1b\u5c11 \u539f\u59d4\u8a17\u55ae\u7684\u59d4\u8a17\u6578\u91cf\u3002 In _trade = _api . UpdateOrder ( _trade , quantity : 1 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , delivery_month = 202303 , strike_price = 10600 , option_right = P , underlying_kind = I , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , name = \u81fa\u6307\u9078\u64c7\u6b0a 03 \u6708 10600 P }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = }, ca = }, status = { id = a0df16d5 , status = Submitted , status_code = , order_ts = 1676946129.0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 1 } } \u522a\u55ae \u00b6 In _api . UpdateStatus (); _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = , }, }, status = { id = a0df16d5 , status = Cancelled , status_code = , order_ts = 1689120488 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , }, } \u6210\u4ea4 \u00b6 \u66f4\u65b0\u59d4\u8a17\u72c0\u614b _api . UpdateStatus ( _api . FuturesAccount ); Console . WriteLine ( _trade ); Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = , }, }, status = { id = a0df16d5 , status = Filled , status_code = 00 , order_ts = 1609120488 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, } \u7bc4\u4f8b \u00b6 \u8cb7\u8ce3\u5225 \u00b6 \u8cb7 var order = new FutOptOrder () { price = 0.1 , quantity = 3 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto }; \u8ce3 var order = new FutOptOrder () { price = 0.1 , quantity = 3 , action = Action . Sell , price_type = FuturePriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto }; ROD + LMT \u00b6 ROD + LMT var order = new FutOptOrder () { price = 0.1 , quantity = 3 , action = Action . Sell , price_type = FuturePriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto };","title":"\u671f\u8ca8\u9078\u64c7\u6b0a"},{"location":"tutor/order/FutureOption/#_1","text":"\u671f\u8ca8\u59d4\u8a17\u55ae price ( float or int ): \u50f9\u683c quantity ( int ): \u59d4\u8a17\u6578\u91cf action ( str ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( str ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( str ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } octype ( str ): { Auto : \u81ea\u52d5 , New : \u65b0\u5009 , Cover : \u5e73\u5009 , DayTrade : \u7576\u6c96 } account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f ca ( binary ): \u6191\u8b49","title":"\u671f\u8ca8\u59d4\u8a17\u55ae"},{"location":"tutor/order/FutureOption/#_2","text":"\u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002 \u5546\u54c1\u6a94 var contract = _api . Contracts . Futures [ \"TXO\" ][ \"TXO20230310600P\" ]; \u59d4\u8a17\u55ae version>=1.0 version<1.0 var order = new FutOptOrder () { action = Action . Buy , price = 0.1 , quantity = 3 , price_type = FuturesPriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto , } var order = new FutOptOrder () { action = Action . Buy , price = 0.1 , quantity = 3 , price_type = FuturesPriceType . LMT , order_type = FuturesOrderType . ROD , octype = OCType . Auto , } \u4e0b\u55ae _trade = _api . PlaceOrder ( contract , order ) Console . WriteLine ( _trade ) Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , delivery_month = 202303 , strike_price = 10600 , option_right = P , underlying_kind = I , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , name = \u81fa\u6307\u9078\u64c7\u6b0a 03 \u6708 10600 P }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = }, ca = }, status = { id = a0df16d5 , status = PendingSubmit , status_code = , order_ts = 1676946129.0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 } } \u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b \u4e0b\u55ae\u56de\u5831 \u3002 \u60a8\u9700\u8981\u57f7\u884c UpdateStatus \u5df2\u66f4\u65b0 trade \u7269\u4ef6\u7684\u72c0\u614b\u3002 \u66f4\u65b0\u59d4\u8a17\u72c0\u614b _api . UpdateStatus ( _api . FutureAccount ) Console . WriteLine ( _trade ) Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , delivery_month = 202303 , strike_price = 10600 , option_right = P , underlying_kind = I , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , name = \u81fa\u6307\u9078\u64c7\u6b0a 03 \u6708 10600 P }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = }, ca = }, status = { id = a0df16d5 , status = Submitted , status_code = , order_ts = 1676946129.0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 } } \u59d4\u8a17\u55ae\u72c0\u614b PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"\u4e0b\u55ae"},{"location":"tutor/order/FutureOption/#_3","text":"","title":"\u6539\u55ae"},{"location":"tutor/order/FutureOption/#_4","text":"In _trade = _api . UpdateOrder ( _trade , price : 0.2 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , delivery_month = 202303 , strike_price = 10600 , option_right = P , underlying_kind = I , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , name = \u81fa\u6307\u9078\u64c7\u6b0a 03 \u6708 10600 P }, order = { action = Buy , price = 0.2 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = }, ca = }, status = { id = a0df16d5 , status = Submitted , status_code = , order_ts = 1676946129.0 , modified_ts = 0 , modified_price = 0.2 , deal_quantity = 0 , cancel_quantity = 0 } }","title":"\u6539\u50f9"},{"location":"tutor/order/FutureOption/#_5","text":"UpdateOrder \u53ea\u80fd\u7528\u4f86 \u6e1b\u5c11 \u539f\u59d4\u8a17\u55ae\u7684\u59d4\u8a17\u6578\u91cf\u3002 In _trade = _api . UpdateOrder ( _trade , quantity : 1 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , delivery_month = 202303 , strike_price = 10600 , option_right = P , underlying_kind = I , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , name = \u81fa\u6307\u9078\u64c7\u6b0a 03 \u6708 10600 P }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = }, ca = }, status = { id = a0df16d5 , status = Submitted , status_code = , order_ts = 1676946129.0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 1 } }","title":"\u6539\u91cf(\u6e1b\u91cf)"},{"location":"tutor/order/FutureOption/#_6","text":"In _api . UpdateStatus (); _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = , }, }, status = { id = a0df16d5 , status = Cancelled , status_code = , order_ts = 1689120488 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , }, }","title":"\u522a\u55ae"},{"location":"tutor/order/FutureOption/#_7","text":"\u66f4\u65b0\u59d4\u8a17\u72c0\u614b _api . UpdateStatus ( _api . FuturesAccount ); Console . WriteLine ( _trade ); Out { contract = { security_type = OPT , code = TXO10600O3 , category = TXO , symbol = TXO20230310600P , exchange = TAIFEX , limit_up = 1550 , limit_down = 0.1 , reference = 0.3 , update_date = 2023 / 02 / 21 , }, order = { action = Buy , price = 0.1 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = a0df16d5 , seqno = 564801 , account = { account_type = F , person_id = , broker_id = F002000 , account_id = , signed = True , username = , }, }, status = { id = a0df16d5 , status = Filled , status_code = 00 , order_ts = 1609120488 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, }","title":"\u6210\u4ea4"},{"location":"tutor/order/FutureOption/#_8","text":"","title":"\u7bc4\u4f8b"},{"location":"tutor/order/FutureOption/#_9","text":"\u8cb7 var order = new FutOptOrder () { price = 0.1 , quantity = 3 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto }; \u8ce3 var order = new FutOptOrder () { price = 0.1 , quantity = 3 , action = Action . Sell , price_type = FuturePriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto };","title":"\u8cb7\u8ce3\u5225"},{"location":"tutor/order/FutureOption/#rod-lmt","text":"ROD + LMT var order = new FutOptOrder () { price = 0.1 , quantity = 3 , action = Action . Sell , price_type = FuturePriceType . LMT , order_type = OrderType . ROD , octype = OCType . Auto };","title":"ROD + LMT"},{"location":"tutor/order/IntradayOdd/","text":"\u63d0\u9192 \u4e0b\u55ae\u524d\u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u4e0b\u55ae \u00b6 \u4e0b\u55ae IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var order = new StockOrder () { price = 15.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . IntradayOdd , first_sell = StockFirstSell . No , custom_field = \"test\" }; trade = _api . PlaceOrder ( contract , order ) Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19 , limit_down = 15.6 , reference = 17.3 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 22 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 }, order = { action = Buy , price = 15.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = IntradayOdd , order_cond = Cash , id = 9f4 ac056 , seqno = 777526 , ordno = I4329 , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = }, custom_field = test , ca = }, status = { id = 9f4 ac056 , status = PendingSubmit , status_code = 0 , order_ts = 1675840497.615093 , msg = \u59d4\u8a17\u6210\u529f , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 } } \u6539\u55ae \u00b6 \u6ce8\u610f \u96f6\u80a1\u4e0d\u80fd\u9032\u884c\u6539\u50f9 UpdateOrder \u53ea\u80fd\u7528\u4f86 \u6e1b\u5c11 \u539f\u59d4\u8a17\u55ae\u7684\u59d4\u8a17\u6578\u91cf\u3002 In _trade = _api . UpdateOrder ( _trade , quantity : 1 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19 , limit_down = 15.6 , reference = 17.3 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 22 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 }, order = { action = Buy , price = 15.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = IntradayOdd , order_cond = Cash , id = 9f4 ac056 , seqno = 777526 , ordno = I4329 , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = }, custom_field = test , ca = }, status = { id = 9f4 ac056 , status = Submitted , status_code = 00 , order_ts = 1675840497.615093 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 1 , deals = [] } } \u522a\u55ae \u00b6 \u522a\u55ae _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19 , limit_down = 15.6 , reference = 17.3 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 22 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 }, order = { action = Buy , price = 15.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = IntradayOdd , order_cond = Cash , id = ae83136d , seqno = 785653 , ordno = I9143 , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True }, custom_field = test , ca = }, status = { id = ae83136d , status = Cancelled , status_code = 00 , order_ts = 1.6770374E+09 , modified_ts = 1.6770374E+09 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , deals = [] } }","title":"\u96f6\u80a1"},{"location":"tutor/order/IntradayOdd/#_1","text":"\u4e0b\u55ae IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var order = new StockOrder () { price = 15.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . IntradayOdd , first_sell = StockFirstSell . No , custom_field = \"test\" }; trade = _api . PlaceOrder ( contract , order ) Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19 , limit_down = 15.6 , reference = 17.3 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 22 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 }, order = { action = Buy , price = 15.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = IntradayOdd , order_cond = Cash , id = 9f4 ac056 , seqno = 777526 , ordno = I4329 , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = }, custom_field = test , ca = }, status = { id = 9f4 ac056 , status = PendingSubmit , status_code = 0 , order_ts = 1675840497.615093 , msg = \u59d4\u8a17\u6210\u529f , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 } }","title":"\u4e0b\u55ae"},{"location":"tutor/order/IntradayOdd/#_2","text":"\u6ce8\u610f \u96f6\u80a1\u4e0d\u80fd\u9032\u884c\u6539\u50f9 UpdateOrder \u53ea\u80fd\u7528\u4f86 \u6e1b\u5c11 \u539f\u59d4\u8a17\u55ae\u7684\u59d4\u8a17\u6578\u91cf\u3002 In _trade = _api . UpdateOrder ( _trade , quantity : 1 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19 , limit_down = 15.6 , reference = 17.3 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 22 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 }, order = { action = Buy , price = 15.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = IntradayOdd , order_cond = Cash , id = 9f4 ac056 , seqno = 777526 , ordno = I4329 , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = }, custom_field = test , ca = }, status = { id = 9f4 ac056 , status = Submitted , status_code = 00 , order_ts = 1675840497.615093 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 1 , deals = [] } }","title":"\u6539\u55ae"},{"location":"tutor/order/IntradayOdd/#_3","text":"\u522a\u55ae _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19 , limit_down = 15.6 , reference = 17.3 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 22 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 }, order = { action = Buy , price = 15.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = IntradayOdd , order_cond = Cash , id = ae83136d , seqno = 785653 , ordno = I9143 , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True }, custom_field = test , ca = }, status = { id = ae83136d , status = Cancelled , status_code = 00 , order_ts = 1.6770374E+09 , modified_ts = 1.6770374E+09 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , deals = [] } }","title":"\u522a\u55ae"},{"location":"tutor/order/Reserve/","text":"\u7576\u73fe\u8ca8\u89f8\u767c\u4e00\u4e9b\u4ea4\u6613\u7570\u5e38\u689d\u4ef6\uff0c\u9700\u5148\u9810\u6536\u5238\u6b3e\u3002\u7570\u5e38\u689d\u4ef6\u5305\u62ec: \u6ce8\u610f\u80a1\u7968\u3001\u8b66\u793a\u80a1\u7968\u3001\u8655\u7f6e\u80a1\u7968\u53ca\u7ba1\u7406\u80a1\u7968\u3002 \u63d0\u9192 \u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u670d\u52d9\u6642\u9593\u70ba\u4ea4\u6613\u65e58:00~14:30\u3002 \u67e5\u8a62\u5708\u5238\u72c0\u614b \u00b6 In var reserveSummary = _api . StockReserveSummary ( _api . StockAccount ); Console . WriteLine ( reserveSummary ); Out { stocks = [ contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, available_share = 5000 , reserved_share = 0 ], account = { \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true } } \u501f\u5238\u5708\u5238\u7533\u8acb \u00b6 In _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var reserveStock = _api . ReserveStock ( _api . StockAccount , _contract , 1000 ); Console . WriteLine ( reserveStock ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, account = { \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true }, share = 1000 , status = True , info = \"\" , } \u67e5\u8a62\u5708\u5238\u660e\u7d30 \u00b6 In var reserveDetail = _api . StockReserveDetail ( _api . StockAccount ); Console . WriteLine ( reserveDetail ); Out { stocks = [ contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, share = 1000 , order_datetime = 1638253253 , status = True , info = \"\u5df2\u5b8c\u6210\" ], account = { \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true } } \u9810\u6536\u6b3e\u9805\u7533\u8acb \u00b6 In _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var reserveEarmarking = _api . ReserveEarmarking ( _api . StockAccount , _contract , 1000 , 15.5 ); Console . WriteLine ( reserveEarmarking ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, account = { \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true }, share = 1000 , price = 15.5 , status = True , info = OK , } \u67e5\u8a62\u9810\u6536\u6b3e\u9805 \u00b6 In var earmarkingDetail = _api . EarmarkingDetail ( _api . StockAccount ); Console . WriteLine ( earmarkingDetail ); Out { stocks = [ { contract = { \"security_type\" : \"STK\" , \"exchange\" : \"TSE\" , \"code\" : \"2890\" , \"symbol\" : \"\" , \"name\" : \"\u6c38\u8c50\u91d1\" , \"currency\" : \"TWD\" , \"category\" : \"\" , \"delivery_month\" : \"\" , \"delivery_date\" : \"\" , \"strike_price\" : 0 , \"option_right\" : \"\" , \"underlying_kind\" : \"\" , \"underlying_code\" : \"\" , \"unit\" : 1 , \"multiplier\" : 0 , \"limit_up\" : 0.0 , \"limit_down\" : 0.0 , \"reference\" : 0.0 , \"update_date\" : \"\" , \"day_trade\" : \"No\" , \"margin_trading_balance\" : 0 , \"short_selling_balance\" : 0 }, share = 1000 , price = 15.5 , amount = 15522 , order_datetime = 2022 / 8 / 5 \u4e0a\u5348 10 : 24 : 32 , status = True , info = \u6210\u529f , } ], account = { \"account_type\" : \"S\" , \"person_id\" : \"A226237733\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"9816939\" , \"signed\" : true }, }","title":"\u9810\u6536\u5238\u6b3e"},{"location":"tutor/order/Reserve/#_1","text":"In var reserveSummary = _api . StockReserveSummary ( _api . StockAccount ); Console . WriteLine ( reserveSummary ); Out { stocks = [ contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, available_share = 5000 , reserved_share = 0 ], account = { \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true } }","title":"\u67e5\u8a62\u5708\u5238\u72c0\u614b"},{"location":"tutor/order/Reserve/#_2","text":"In _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var reserveStock = _api . ReserveStock ( _api . StockAccount , _contract , 1000 ); Console . WriteLine ( reserveStock ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, account = { \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true }, share = 1000 , status = True , info = \"\" , }","title":"\u501f\u5238\u5708\u5238\u7533\u8acb"},{"location":"tutor/order/Reserve/#_3","text":"In var reserveDetail = _api . StockReserveDetail ( _api . StockAccount ); Console . WriteLine ( reserveDetail ); Out { stocks = [ contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, share = 1000 , order_datetime = 1638253253 , status = True , info = \"\u5df2\u5b8c\u6210\" ], account = { \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true } }","title":"\u67e5\u8a62\u5708\u5238\u660e\u7d30"},{"location":"tutor/order/Reserve/#_4","text":"In _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var reserveEarmarking = _api . ReserveEarmarking ( _api . StockAccount , _contract , 1000 , 15.5 ); Console . WriteLine ( reserveEarmarking ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, account = { \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true }, share = 1000 , price = 15.5 , status = True , info = OK , }","title":"\u9810\u6536\u6b3e\u9805\u7533\u8acb"},{"location":"tutor/order/Reserve/#_5","text":"In var earmarkingDetail = _api . EarmarkingDetail ( _api . StockAccount ); Console . WriteLine ( earmarkingDetail ); Out { stocks = [ { contract = { \"security_type\" : \"STK\" , \"exchange\" : \"TSE\" , \"code\" : \"2890\" , \"symbol\" : \"\" , \"name\" : \"\u6c38\u8c50\u91d1\" , \"currency\" : \"TWD\" , \"category\" : \"\" , \"delivery_month\" : \"\" , \"delivery_date\" : \"\" , \"strike_price\" : 0 , \"option_right\" : \"\" , \"underlying_kind\" : \"\" , \"underlying_code\" : \"\" , \"unit\" : 1 , \"multiplier\" : 0 , \"limit_up\" : 0.0 , \"limit_down\" : 0.0 , \"reference\" : 0.0 , \"update_date\" : \"\" , \"day_trade\" : \"No\" , \"margin_trading_balance\" : 0 , \"short_selling_balance\" : 0 }, share = 1000 , price = 15.5 , amount = 15522 , order_datetime = 2022 / 8 / 5 \u4e0a\u5348 10 : 24 : 32 , status = True , info = \u6210\u529f , } ], account = { \"account_type\" : \"S\" , \"person_id\" : \"A226237733\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"9816939\" , \"signed\" : true }, }","title":"\u67e5\u8a62\u9810\u6536\u6b3e\u9805"},{"location":"tutor/order/Stock/","text":"\u63d0\u9192 \u4e0b\u55ae\u524d\u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u8b49\u5238\u59d4\u8a17\u55ae \u00b6 \u8b49\u5238\u59d4\u8a17\u55ae version>=1.0 version<1.0 price ( float or int ): \u50f9\u683c quantity ( int ): \u59d4\u8a17\u6578\u91cf action ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( StockPriceType ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( OrderType ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } order_cond ( StockOrderCond ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( StockOrderLot ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } daytrade_short ( DayTradeShort ): \u5148\u8ce3\u5f8c\u8cb7 { Yes , No } account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f custom_field ( string ): \u5099\u8a3b ca ( binary ): the ca of this order price ( float or int ): \u50f9\u683c quantity ( int ): \u59d4\u8a17\u6578\u91cf action ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( StockPriceType ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( StockOrderType ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } order_cond ( StockOrderCond ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( StockOrderLot ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } first_sell ( StockFirstSell ): \u5148\u8ce3\u5f8c\u8cb7 { Yes , No } account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f custom_field ( string ): \u5099\u8a3b ca ( binary ): the ca of this order \u4e0b\u55ae \u00b6 \u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002 \u5546\u54c1\u6a94 var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; \u4e0b\u55ae\u8cc7\u8a0a version>=1.0 version<1.0 var order = new StockOrder () { price = 15.55 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; var order = new StockOrder () { price = 15.55 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = StockFirstSell . No , custom_field = \"Test\" }; \u4e0b\u55ae _trade = _api . PlaceOrder ( contract , order ) Console . WriteLine ( _trade ) Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 15.55 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = PendingSubmit , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } \u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b \u4e0b\u55ae\u56de\u5831 \u3002 \u60a8\u9700\u8981\u57f7\u884c UpdateStatus \u4f86\u66f4\u65b0 trade \u7269\u4ef6\u7684\u72c0\u614b\u3002 \u66f4\u65b0\u59d4\u8a17\u72c0\u614b _api . UpdateStatus ( _api . StockAccount ) Console . WriteLine ( _trade ) Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 15.55 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = Submitted , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } \u59d4\u8a17\u55ae\u72c0\u614b PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 \u6539\u55ae \u00b6 \u6539\u50f9 \u00b6 In _trade = _api . UpdateOrder ( _trade , price : 17.5 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 17.5 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = Submitted , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 17.5 , deal_quantity = 0 , cancel_quantity = 0 , }, } \u6539\u91cf(\u6e1b\u91cf) \u00b6 UpdateOrder \u53ea\u80fd\u7528\u4f86 \u6e1b\u5c11 \u539f\u59d4\u8a17\u55ae\u7684\u59d4\u8a17\u6578\u91cf\u3002 In _trade = _api . UpdateOrder ( _trade , quantity : 1 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 17.5 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = Submitted , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 1 , }, } \u522a\u55ae \u00b6 In _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 17.5 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , 0 status = Cancelled , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , }, } \u6210\u4ea4 \u00b6 \u66f4\u65b0\u59d4\u8a17\u72c0\u614b _api . UpdateStatus ( _api . StockAccount ); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 17.5 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = Filled , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, } \u7bc4\u4f8b \u00b6 \u8cb7\u8ce3\u5225 \u00b6 \u8cb7 var order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; \u8ce3 var order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; Daytrade Short version>=1.0 version<1.0 var order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . Yes , custom_field = \"Test\" }; var order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . Yes , custom_field = \"Test\" }; ROD + LMT \u00b6 ROD + LMT version>=1.0 version<1.0 order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , custom_field = \"Test\" }; order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , custom_field = \"Test\" };","title":"\u8b49\u5238"},{"location":"tutor/order/Stock/#_1","text":"\u8b49\u5238\u59d4\u8a17\u55ae version>=1.0 version<1.0 price ( float or int ): \u50f9\u683c quantity ( int ): \u59d4\u8a17\u6578\u91cf action ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( StockPriceType ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( OrderType ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } order_cond ( StockOrderCond ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( StockOrderLot ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } daytrade_short ( DayTradeShort ): \u5148\u8ce3\u5f8c\u8cb7 { Yes , No } account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f custom_field ( string ): \u5099\u8a3b ca ( binary ): the ca of this order price ( float or int ): \u50f9\u683c quantity ( int ): \u59d4\u8a17\u6578\u91cf action ( Action ): { Buy : \u8cb7 , Sell : \u8ce3 } price_type ( StockPriceType ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_type ( StockOrderType ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } order_cond ( StockOrderCond ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( StockOrderLot ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } first_sell ( StockFirstSell ): \u5148\u8ce3\u5f8c\u8cb7 { Yes , No } account (: obj : Account ): \u4e0b\u55ae\u5e33\u865f custom_field ( string ): \u5099\u8a3b ca ( binary ): the ca of this order","title":"\u8b49\u5238\u59d4\u8a17\u55ae"},{"location":"tutor/order/Stock/#_2","text":"\u4e0b\u55ae\u6642\u5fc5\u9808\u63d0\u4f9b\u5546\u54c1\u8cc7\u8a0a contract \u53ca\u4e0b\u55ae\u8cc7\u8a0a order \u3002 \u5546\u54c1\u6a94 var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; \u4e0b\u55ae\u8cc7\u8a0a version>=1.0 version<1.0 var order = new StockOrder () { price = 15.55 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; var order = new StockOrder () { price = 15.55 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = StockFirstSell . No , custom_field = \"Test\" }; \u4e0b\u55ae _trade = _api . PlaceOrder ( contract , order ) Console . WriteLine ( _trade ) Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 15.55 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = PendingSubmit , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } \u4e0b\u55ae\u5b8c\u540c\u6642\u4e5f\u6703\u6536\u5230\u5f9e\u4ea4\u6613\u6240\u50b3\u56de\u4f86\u7684\u8cc7\u6599\uff0c\u8a73\u60c5\u5167\u5bb9\u53ef\u8a73\u898b \u4e0b\u55ae\u56de\u5831 \u3002 \u60a8\u9700\u8981\u57f7\u884c UpdateStatus \u4f86\u66f4\u65b0 trade \u7269\u4ef6\u7684\u72c0\u614b\u3002 \u66f4\u65b0\u59d4\u8a17\u72c0\u614b _api . UpdateStatus ( _api . StockAccount ) Console . WriteLine ( _trade ) Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 15.55 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = Submitted , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } \u59d4\u8a17\u55ae\u72c0\u614b PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"\u4e0b\u55ae"},{"location":"tutor/order/Stock/#_3","text":"","title":"\u6539\u55ae"},{"location":"tutor/order/Stock/#_4","text":"In _trade = _api . UpdateOrder ( _trade , price : 17.5 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 17.5 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = Submitted , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 17.5 , deal_quantity = 0 , cancel_quantity = 0 , }, }","title":"\u6539\u50f9"},{"location":"tutor/order/Stock/#_5","text":"UpdateOrder \u53ea\u80fd\u7528\u4f86 \u6e1b\u5c11 \u539f\u59d4\u8a17\u55ae\u7684\u59d4\u8a17\u6578\u91cf\u3002 In _trade = _api . UpdateOrder ( _trade , quantity : 1 ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 17.5 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = Submitted , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 1 , }, }","title":"\u6539\u91cf(\u6e1b\u91cf)"},{"location":"tutor/order/Stock/#_6","text":"In _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 17.5 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , 0 status = Cancelled , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , }, }","title":"\u522a\u55ae"},{"location":"tutor/order/Stock/#_7","text":"\u66f4\u65b0\u59d4\u8a17\u72c0\u614b _api . UpdateStatus ( _api . StockAccount ); Console . WriteLine ( _trade ); Out { contract = { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2023 / 02 / 20 , category = 17 , day_trade = Yes , }, order = { action = Buy , price = 17.5 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , daytrade_short = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account = { account_type = S , person_id = , broker_id = 9 A95 , account_id = , signed = True , username = , }, }, status = { id = c9854d9d , status = Filled , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, }","title":"\u6210\u4ea4"},{"location":"tutor/order/Stock/#_8","text":"","title":"\u7bc4\u4f8b"},{"location":"tutor/order/Stock/#_9","text":"\u8cb7 var order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; \u8ce3 var order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . No , custom_field = \"Test\" }; Daytrade Short version>=1.0 version<1.0 var order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , daytrade_short = DayTradeShort . Yes , custom_field = \"Test\" }; var order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . Yes , custom_field = \"Test\" };","title":"\u8cb7\u8ce3\u5225"},{"location":"tutor/order/Stock/#rod-lmt","text":"ROD + LMT version>=1.0 version<1.0 order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = OrderType . ROD , order_lot = StockOrderLot . Common , custom_field = \"Test\" }; order = new StockOrder () { price = 15.55 , quantity = 1 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , custom_field = \"Test\" };","title":"ROD + LMT"},{"location":"tutor/order/UpdateStatus/","text":"\u63d0\u9192 \u5fc5\u9808\u5148 \u767b\u5165 \u53ca\u555f\u7528 \u6191\u8b49 \u3002 \u5728\u53d6\u5f97 Trade \u72c0\u614b\u524d\uff0c\u5fc5\u9808\u5148\u5229\u7528 UpdateStatus \u9032\u884c\u66f4\u65b0\u3002\u5982\u679c\u7121\u6cd5\u6210\u529f\u522a\u55ae\u6216\u6539\u55ae\uff0c\u4f60\u53ef\u4ee5\u5c0d\u7279\u5b9a trade \u7269\u4ef6\u9032\u884c\u66f4\u65b0\uff0c\u4e26\u78ba\u8a8d\u5728 trade \u4e2d\u7684 OrderStatus \uff0c\u662f\u5426\u70ba\u53ef\u522a\u6539\u72c0\u614b\u3002 \u53d6\u5f97\u8b49\u5238\u59d4\u8a17\u72c0\u614b \u00b6 In _api . UpdateStatus ( _api . StockAccount ); Console . WriteLine ( _api . ListTrades ()); Out [ { contract={ security_type=STK, code=1101, exchange=TSE, limit_up=0, limit_down=0, reference=0, margin_trading_balance=0, short_selling_balance=0, day_trade=No, }, order={ action=Buy, price=37.65, quantity=1, price_type=LMT, order_type=ROD, order_lot=Common, order_cond=Cash, first_sell=No, id=fd55a308, seqno=025054, ordno=WA085, custom_field=test, account={ account_type=S, person_id=PAPIUSER07, broker_id=9A95, account_id=0512999, signed=True, }, }, status={ id=fd55a308, status=Submitted, status_code=00, order_ts=1609385617, modified_ts=1609385592, modified_price=0, deal_quantity=0, cancel_quantity=0, deals=System.Collections.Generic.List`1[Sinopac.Shioaji.Deal] , }, } ]","title":"\u67e5\u8a62\u72c0\u614b"},{"location":"tutor/order/UpdateStatus/#_1","text":"In _api . UpdateStatus ( _api . StockAccount ); Console . WriteLine ( _api . ListTrades ()); Out [ { contract={ security_type=STK, code=1101, exchange=TSE, limit_up=0, limit_down=0, reference=0, margin_trading_balance=0, short_selling_balance=0, day_trade=No, }, order={ action=Buy, price=37.65, quantity=1, price_type=LMT, order_type=ROD, order_lot=Common, order_cond=Cash, first_sell=No, id=fd55a308, seqno=025054, ordno=WA085, custom_field=test, account={ account_type=S, person_id=PAPIUSER07, broker_id=9A95, account_id=0512999, signed=True, }, }, status={ id=fd55a308, status=Submitted, status_code=00, order_ts=1609385617, modified_ts=1609385592, modified_price=0, deal_quantity=0, cancel_quantity=0, deals=System.Collections.Generic.List`1[Sinopac.Shioaji.Deal] , }, } ]","title":"\u53d6\u5f97\u8b49\u5238\u59d4\u8a17\u72c0\u614b"},{"location":"tutor/order/order_deal_event/futures/","text":"\u59d4\u8a17\u56de\u5831 \u00b6 \u7576\u671f\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002 \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 OrderState . FuturesOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' fcb42a6e ' , ' seqno ' : ' 585886 ' , ' ordno ' : ' 00 ' , ' account ' : { ' account_type ' : 'F' , ' person_id ' : '' , ' broker_id ' : ' F002000 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 14000.0 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' market_type ' : ' Night ' , ' oc_type ' : ' New ' , ' subaccount ' : '' , ' combo ' : False }, ' status ' : { ' id ' : ' fcb42a6e ' , ' exchange_ts ' : 1673512283.0 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : 'Z' }, ' contract ' : { ' security_type ' : ' FUT ' , ' code ' : ' TXF ' , ' exchange ' : ' TIM ' , ' delivery_month ' : ' 202301 ' , ' delivery_date ' : '' , ' strike_price ' : 0.0 , ' option_right ' : ' Future ' } } OrderState . FOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' fcb42a6e ' , ' seqno ' : ' 585886 ' , ' ordno ' : ' 00 ' , ' account ' : { ' account_type ' : 'F' , ' person_id ' : '' , ' broker_id ' : ' F002000 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 14000.0 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' market_type ' : ' Night ' , ' oc_type ' : ' New ' , ' subaccount ' : '' , ' combo ' : False }, ' status ' : { ' id ' : ' fcb42a6e ' , ' exchange_ts ' : 1673512283.0 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : 'Z' }, ' contract ' : { ' security_type ' : ' FUT ' , ' code ' : ' TXF ' , ' exchange ' : ' TIM ' , ' delivery_month ' : ' 202301 ' , ' delivery_date ' : '' , ' strike_price ' : 0.0 , ' option_right ' : ' Future ' } } \u59d4\u8a17\u56de\u5831\u8cc7\u8a0a operation op_type ( string ): { \"New\" : \u65b0\u55ae , \"Cancel\" : \u522a\u55ae , \"UpdatePrice\" : \u6539\u50f9 , \"UpdateQty\" : \u6539\u91cf } op_code ( string ): { \"00\" : \u6210\u529f , others : \u5931\u6557 } op_msg ( string ): \u932f\u8aa4\u8a0a\u606f order id ( string ): \u8207\u6210\u4ea4\u56de\u5831\u7684 trade_id \u76f8\u540c seqno ( string ): \u5e73\u53f0\u55ae\u865f ordno ( string ): \u59d4\u8a17\u55ae\u865f account ( dict ): \u5e33\u865f\u8cc7\u8a0a action ( string ): \u8cb7\u8ce3\u5225 price ( float or int ): \u59d4\u8a17\u50f9 quantity ( int ): \u59d4\u8a17\u91cf order_cond ( string ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_type ( string ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } price_type ( string ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } market_type ( string ): \u5e02\u5834\u5225 { Day : \u65e5\u76e4 , Night : \u591c\u76e4 } oc_type ( string ): { New : \u65b0\u5009 , Cover : \u5e73\u5009 , Auto : \u81ea\u52d5 } subaccount ( string ): \u5b50\u5e33\u865f combo ( bool ): \u662f\u5426\u70ba\u7d44\u5408\u55ae status id ( string ): \u8207\u6210\u4ea4\u56de\u5831\u7684 trade_id \u76f8\u540c exchange_ts ( int ): \u4ea4\u6613\u6240\u6642\u9593 modified_price ( float or int ): \u6539\u50f9 cancel_quantity ( int ): \u53d6\u6d88\u6578\u91cf order_quantity ( int ): \u59d4\u8a17\u6578\u91cf web_id ( string ): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc contract security_type ( string ): \u5546\u54c1\u985e\u5225 code ( string ): \u5546\u54c1\u4ee3\u78bc exchange ( string ): \u4ea4\u6613\u6240 delivery_month ( string ): \u4ea4\u5272\u6708\u4efd delivery_date ( string ): \u4ea4\u5272\u65e5\u671f strike_price ( float ): \u5c65\u7d04\u50f9 option_right ( string ): { Future , OptionCall , OptionPut } \u6210\u4ea4\u56de\u5831 \u00b6 \u7576\u6413\u5408\u6210\u529f\uff0c\u671f\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684 id \u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684 trade_id \u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002 \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 OrderState . FuturesDeal { ' trade_id ' : ' 4 e6df0f6 ' , ' seqno ' : ' 458545 ' , ' ordno ' : ' tA0deX1O ' , ' exchange_seq ' : ' j5006396 ' , ' broker_id ' : ' F002000 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Sell ' , ' code ' : ' TXO ' , ' price ' : 58.0 , ' quantity ' : 1 , ' subaccount ' : '' , ' security_type ' : ' OPT ' , ' delivery_month ' : ' 202301 ' , ' strike_price ' : 14300.0 , ' option_right ' : ' OptionPut ' , ' market_type ' : ' Day ' , ' combo ' : False , ' ts ' : 1673270852.0 } OrderState . FDeal { ' trade_id ' : ' 4 e6df0f6 ' , ' seqno ' : ' 458545 ' , ' ordno ' : ' tA0deX1O ' , ' exchange_seq ' : ' j5006396 ' , ' broker_id ' : ' F002000 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Sell ' , ' code ' : ' TXO ' , ' price ' : 58.0 , ' quantity ' : 1 , ' subaccount ' : '' , ' security_type ' : ' OPT ' , ' delivery_month ' : ' 202301 ' , ' strike_price ' : 14300.0 , ' option_right ' : ' OptionPut ' , ' market_type ' : ' Day ' , ' combo ' : False , ' ts ' : 1673270852.0 } \u6210\u4ea4\u56de\u5831 trade_id ( str ): \u8207\u59d4\u8a17\u56de\u5831 id \u76f8\u540c seqno ( str ): \u5e73\u53f0\u55ae\u865f ordno ( str ): \u524d\u4e94\u78bc\u70ba\u540c\u59d4\u8a17\u56de\u5831\u59d4\u8a17\u55ae\u865f\uff0c\u5f8c\u4e09\u78bc\u70ba\u540c\u7b46\u59d4\u8a17\u6210\u4ea4\u4ea4\u6613\u5e8f\u865f\u3002 exchange_seq ( str ): \u56de\u5831\u5e8f\u865f broker_id ( str ): \u5206\u884c\u4ee3\u78bc account_id ( str ): \u5e33\u865f action ( str ): \u8cb7\u8ce3\u5225 code ( str ): \u5546\u54c1\u4ee3\u78bc price ( float or int ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u91cf subaccount ( str ): \u5b50\u5e33\u865f security_type ( str ): \u5546\u54c1\u985e\u5225 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd strike_price ( float ): \u5c65\u7d04\u50f9 option_right ( str ): { Future , OptionCall , OptionPut } market_type ( str ): { Day , Night } ts ( int ): \u6210\u4ea4\u6642\u9593\u6233 \u6ce8\u610f \u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002 \u56de\u5831\u8655\u7406 \u00b6 \u6b32\u8655\u7406\u59d4\u8a17\u3001\u6210\u4ea4\u56de\u5831\uff0c\u8a73\u7d30\u53ef\u53c3\u898b Callback \u3002","title":"\u671f\u8ca8"},{"location":"tutor/order/order_deal_event/futures/#_1","text":"\u7576\u671f\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002 \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 OrderState . FuturesOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' fcb42a6e ' , ' seqno ' : ' 585886 ' , ' ordno ' : ' 00 ' , ' account ' : { ' account_type ' : 'F' , ' person_id ' : '' , ' broker_id ' : ' F002000 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 14000.0 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' market_type ' : ' Night ' , ' oc_type ' : ' New ' , ' subaccount ' : '' , ' combo ' : False }, ' status ' : { ' id ' : ' fcb42a6e ' , ' exchange_ts ' : 1673512283.0 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : 'Z' }, ' contract ' : { ' security_type ' : ' FUT ' , ' code ' : ' TXF ' , ' exchange ' : ' TIM ' , ' delivery_month ' : ' 202301 ' , ' delivery_date ' : '' , ' strike_price ' : 0.0 , ' option_right ' : ' Future ' } } OrderState . FOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' fcb42a6e ' , ' seqno ' : ' 585886 ' , ' ordno ' : ' 00 ' , ' account ' : { ' account_type ' : 'F' , ' person_id ' : '' , ' broker_id ' : ' F002000 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 14000.0 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' market_type ' : ' Night ' , ' oc_type ' : ' New ' , ' subaccount ' : '' , ' combo ' : False }, ' status ' : { ' id ' : ' fcb42a6e ' , ' exchange_ts ' : 1673512283.0 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : 'Z' }, ' contract ' : { ' security_type ' : ' FUT ' , ' code ' : ' TXF ' , ' exchange ' : ' TIM ' , ' delivery_month ' : ' 202301 ' , ' delivery_date ' : '' , ' strike_price ' : 0.0 , ' option_right ' : ' Future ' } } \u59d4\u8a17\u56de\u5831\u8cc7\u8a0a operation op_type ( string ): { \"New\" : \u65b0\u55ae , \"Cancel\" : \u522a\u55ae , \"UpdatePrice\" : \u6539\u50f9 , \"UpdateQty\" : \u6539\u91cf } op_code ( string ): { \"00\" : \u6210\u529f , others : \u5931\u6557 } op_msg ( string ): \u932f\u8aa4\u8a0a\u606f order id ( string ): \u8207\u6210\u4ea4\u56de\u5831\u7684 trade_id \u76f8\u540c seqno ( string ): \u5e73\u53f0\u55ae\u865f ordno ( string ): \u59d4\u8a17\u55ae\u865f account ( dict ): \u5e33\u865f\u8cc7\u8a0a action ( string ): \u8cb7\u8ce3\u5225 price ( float or int ): \u59d4\u8a17\u50f9 quantity ( int ): \u59d4\u8a17\u91cf order_cond ( string ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_type ( string ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } price_type ( string ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } market_type ( string ): \u5e02\u5834\u5225 { Day : \u65e5\u76e4 , Night : \u591c\u76e4 } oc_type ( string ): { New : \u65b0\u5009 , Cover : \u5e73\u5009 , Auto : \u81ea\u52d5 } subaccount ( string ): \u5b50\u5e33\u865f combo ( bool ): \u662f\u5426\u70ba\u7d44\u5408\u55ae status id ( string ): \u8207\u6210\u4ea4\u56de\u5831\u7684 trade_id \u76f8\u540c exchange_ts ( int ): \u4ea4\u6613\u6240\u6642\u9593 modified_price ( float or int ): \u6539\u50f9 cancel_quantity ( int ): \u53d6\u6d88\u6578\u91cf order_quantity ( int ): \u59d4\u8a17\u6578\u91cf web_id ( string ): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc contract security_type ( string ): \u5546\u54c1\u985e\u5225 code ( string ): \u5546\u54c1\u4ee3\u78bc exchange ( string ): \u4ea4\u6613\u6240 delivery_month ( string ): \u4ea4\u5272\u6708\u4efd delivery_date ( string ): \u4ea4\u5272\u65e5\u671f strike_price ( float ): \u5c65\u7d04\u50f9 option_right ( string ): { Future , OptionCall , OptionPut }","title":"\u59d4\u8a17\u56de\u5831"},{"location":"tutor/order/order_deal_event/futures/#_2","text":"\u7576\u6413\u5408\u6210\u529f\uff0c\u671f\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684 id \u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684 trade_id \u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002 \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 OrderState . FuturesDeal { ' trade_id ' : ' 4 e6df0f6 ' , ' seqno ' : ' 458545 ' , ' ordno ' : ' tA0deX1O ' , ' exchange_seq ' : ' j5006396 ' , ' broker_id ' : ' F002000 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Sell ' , ' code ' : ' TXO ' , ' price ' : 58.0 , ' quantity ' : 1 , ' subaccount ' : '' , ' security_type ' : ' OPT ' , ' delivery_month ' : ' 202301 ' , ' strike_price ' : 14300.0 , ' option_right ' : ' OptionPut ' , ' market_type ' : ' Day ' , ' combo ' : False , ' ts ' : 1673270852.0 } OrderState . FDeal { ' trade_id ' : ' 4 e6df0f6 ' , ' seqno ' : ' 458545 ' , ' ordno ' : ' tA0deX1O ' , ' exchange_seq ' : ' j5006396 ' , ' broker_id ' : ' F002000 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Sell ' , ' code ' : ' TXO ' , ' price ' : 58.0 , ' quantity ' : 1 , ' subaccount ' : '' , ' security_type ' : ' OPT ' , ' delivery_month ' : ' 202301 ' , ' strike_price ' : 14300.0 , ' option_right ' : ' OptionPut ' , ' market_type ' : ' Day ' , ' combo ' : False , ' ts ' : 1673270852.0 } \u6210\u4ea4\u56de\u5831 trade_id ( str ): \u8207\u59d4\u8a17\u56de\u5831 id \u76f8\u540c seqno ( str ): \u5e73\u53f0\u55ae\u865f ordno ( str ): \u524d\u4e94\u78bc\u70ba\u540c\u59d4\u8a17\u56de\u5831\u59d4\u8a17\u55ae\u865f\uff0c\u5f8c\u4e09\u78bc\u70ba\u540c\u7b46\u59d4\u8a17\u6210\u4ea4\u4ea4\u6613\u5e8f\u865f\u3002 exchange_seq ( str ): \u56de\u5831\u5e8f\u865f broker_id ( str ): \u5206\u884c\u4ee3\u78bc account_id ( str ): \u5e33\u865f action ( str ): \u8cb7\u8ce3\u5225 code ( str ): \u5546\u54c1\u4ee3\u78bc price ( float or int ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u91cf subaccount ( str ): \u5b50\u5e33\u865f security_type ( str ): \u5546\u54c1\u985e\u5225 delivery_month ( str ): \u4ea4\u5272\u6708\u4efd strike_price ( float ): \u5c65\u7d04\u50f9 option_right ( str ): { Future , OptionCall , OptionPut } market_type ( str ): { Day , Night } ts ( int ): \u6210\u4ea4\u6642\u9593\u6233 \u6ce8\u610f \u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002","title":"\u6210\u4ea4\u56de\u5831"},{"location":"tutor/order/order_deal_event/futures/#_3","text":"\u6b32\u8655\u7406\u59d4\u8a17\u3001\u6210\u4ea4\u56de\u5831\uff0c\u8a73\u7d30\u53ef\u53c3\u898b Callback \u3002","title":"\u56de\u5831\u8655\u7406"},{"location":"tutor/order/order_deal_event/stocks/","text":"\u59d4\u8a17\u56de\u5831 \u00b6 \u7576\u8b49\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002 \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 OrderState . StockOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' account ' : { ' account_type ' : 'S' , ' person_id ' : '' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 16.0 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' }, ' status ' : { ' id ' : ' 97 b63e2f ' , ' exchange_ts ' : 1673576134.038 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } OrderState . TFTOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' account ' : { ' account_type ' : 'S' , ' person_id ' : '' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 16.0 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' }, ' status ' : { ' id ' : ' 97 b63e2f ' , ' exchange_ts ' : 1673576134.038 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } \u59d4\u8a17\u56de\u5831\u8cc7\u8a0a operation op_type ( string ): { \"New\" : \u65b0\u55ae , \"Cancel\" : \u522a\u55ae , \"UpdatePrice\" : \u6539\u50f9 , \"UpdateQty\" : \u6539\u91cf } op_code ( string ): { \"00\" : \u6210\u529f , others : \u5931\u6557 } op_msg ( string ): \u932f\u8aa4\u8a0a\u606f order id ( string ): \u8207\u6210\u4ea4\u56de\u5831\u7684 trade_id \u76f8\u540c seqno ( string ): \u5e73\u53f0\u55ae\u865f ordno ( string ): \u59d4\u8a17\u55ae\u865f account ( dict ): \u5e33\u865f\u8cc7\u8a0a action ( string ): \u8cb7\u8ce3\u5225 { Buy , Sell } price ( float or int ): \u59d4\u8a17\u50f9\u683c quantity ( int ): \u59d4\u8a17\u6578\u91cf order_type ( string ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } price_type ( string ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_cond ( string ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( string ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } custom_field ( string ): \u81ea\u8a02\u6b04\u4f4d status id ( string ): \u8207\u6210\u4ea4\u56de\u5831\u7684 trade_id \u76f8\u540c exchange_ts ( float ): \u4ea4\u6613\u6240\u6642\u9593 modified_price ( float or int ): \u6539\u50f9 cancel_quantity ( int ): \u53d6\u6d88\u6578\u91cf order_quantity ( int ): \u59d4\u8a17\u6578\u91cf web_id ( string ): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc contract security_type ( string ): \u5546\u54c1\u985e\u5225 exchange ( string ): \u4ea4\u6613\u6240 code ( string ): \u5546\u54c1\u4ee3\u78bc symbol ( string ): \u7b26\u865f name ( string ): \u5546\u54c1\u540d\u7a31 currency ( string ): \u5e63\u5225 \u6210\u4ea4\u56de\u5831 \u00b6 \u7576\u6413\u5408\u6210\u529f\uff0c\u8b49\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684 id \u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684 trade_id \u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002 \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 OrderState . StockDeal { ' trade_id ' : ' 9 c6ae2eb ' , ' seqno ' : ' 269866 ' , ' ordno ' : ' IN497 ' , ' exchange_seq ' : ' 669915 ' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' IntradayOdd ' , ' price ' : 267.5 , ' quantity ' : 3 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1673577256.354 } OrderState . TFTDeal { ' trade_id ' : ' 9 c6ae2eb ' , ' seqno ' : ' 269866 ' , ' ordno ' : ' IN497 ' , ' exchange_seq ' : ' 669915 ' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' IntradayOdd ' , ' price ' : 267.5 , ' quantity ' : 3 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1673577256.354 } \u6210\u4ea4\u56de\u5831 trade_id ( string ): \u8207\u59d4\u8a17\u56de\u5831 id \u76f8\u540c seqno ( string ): \u5e73\u53f0\u55ae\u865f ordno ( string ): \u524d\u4e94\u78bc\u70ba\u540c\u59d4\u8a17\u56de\u5831\u59d4\u8a17\u55ae\u865f\uff0c\u5f8c\u4e09\u78bc\u70ba\u540c\u7b46\u59d4\u8a17\u6210\u4ea4\u4ea4\u6613\u5e8f\u865f\u3002 exchange_seq ( string ): \u56de\u5831\u5e8f\u865f broker_id ( string ): \u5206\u884c\u4ee3\u78bc account_id ( string ): \u5e33\u865f action ( string ): \u8cb7\u8ce3\u5225 { Buy , Sell } code ( string ): \u5546\u54c1\u4ee3\u78bc order_cond ( string ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( string ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } price ( float or int ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u91cf web_id ( string ): \u5e73\u53f0\u4ee3\u78bc custom_field ( string ): \u81ea\u8a02\u6b04\u4f4d ts ( int ): \u6210\u4ea4\u6642\u9593\u6233 \u6ce8\u610f \u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002 \u56de\u5831\u8655\u7406 \u00b6 \u6b32\u8655\u7406\u59d4\u8a17\u3001\u6210\u4ea4\u56de\u5831\uff0c\u8a73\u7d30\u53ef\u53c3\u898b Callback \u3002","title":"\u8b49\u5238"},{"location":"tutor/order/order_deal_event/stocks/#_1","text":"\u7576\u8b49\u4ea4\u6240\u6536\u5230\u59d4\u8a17\u5c07\u6703\u56de\u50b3\u56de\u5831\u3002\u5728\u56de\u5831\u4e2d\u5206\u70ba\u56db\u90e8\u5206\uff0c\u5305\u62ecoperation\u3001order\u3001status\u53cacontract\u3002\u4ee5\u4e0b\u6211\u5011\u6703\u5728\u9032\u884c\u8a73\u7d30\u7684\u8aaa\u660e\u3002 \u59d4\u8a17\u56de\u5831 version>=1.0 version<1.0 OrderState . StockOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' account ' : { ' account_type ' : 'S' , ' person_id ' : '' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 16.0 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' }, ' status ' : { ' id ' : ' 97 b63e2f ' , ' exchange_ts ' : 1673576134.038 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } OrderState . TFTOrder { ' operation ' : { ' op_type ' : ' New ' , ' op_code ' : ' 00 ' , ' op_msg ' : '' }, ' order ' : { ' id ' : ' 97 b63e2f ' , ' seqno ' : ' 267677 ' , ' ordno ' : ' IM394 ' , ' account ' : { ' account_type ' : 'S' , ' person_id ' : '' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' signed ' : True }, ' action ' : ' Buy ' , ' price ' : 16.0 , ' quantity ' : 1 , ' order_type ' : ' ROD ' , ' price_type ' : ' LMT ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' Common ' , ' custom_field ' : ' test ' }, ' status ' : { ' id ' : ' 97 b63e2f ' , ' exchange_ts ' : 1673576134.038 , ' modified_price ' : 0.0 , ' cancel_quantity ' : 0 , ' order_quantity ' : 1 , ' web_id ' : ' 137 ' }, ' contract ' : { ' security_type ' : ' STK ' , ' exchange ' : ' TSE ' , ' code ' : ' 2890 ' , ' symbol ' : '' , ' name ' : '' , ' currency ' : ' TWD ' } } \u59d4\u8a17\u56de\u5831\u8cc7\u8a0a operation op_type ( string ): { \"New\" : \u65b0\u55ae , \"Cancel\" : \u522a\u55ae , \"UpdatePrice\" : \u6539\u50f9 , \"UpdateQty\" : \u6539\u91cf } op_code ( string ): { \"00\" : \u6210\u529f , others : \u5931\u6557 } op_msg ( string ): \u932f\u8aa4\u8a0a\u606f order id ( string ): \u8207\u6210\u4ea4\u56de\u5831\u7684 trade_id \u76f8\u540c seqno ( string ): \u5e73\u53f0\u55ae\u865f ordno ( string ): \u59d4\u8a17\u55ae\u865f account ( dict ): \u5e33\u865f\u8cc7\u8a0a action ( string ): \u8cb7\u8ce3\u5225 { Buy , Sell } price ( float or int ): \u59d4\u8a17\u50f9\u683c quantity ( int ): \u59d4\u8a17\u6578\u91cf order_type ( string ): \u59d4\u8a17\u985e\u5225 { ROD , IOC , FOK } price_type ( string ): { LMT : \u9650\u50f9 , MKT : \u5e02\u50f9 , MKP : \u7bc4\u570d\u5e02\u50f9 } order_cond ( string ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( string ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } custom_field ( string ): \u81ea\u8a02\u6b04\u4f4d status id ( string ): \u8207\u6210\u4ea4\u56de\u5831\u7684 trade_id \u76f8\u540c exchange_ts ( float ): \u4ea4\u6613\u6240\u6642\u9593 modified_price ( float or int ): \u6539\u50f9 cancel_quantity ( int ): \u53d6\u6d88\u6578\u91cf order_quantity ( int ): \u59d4\u8a17\u6578\u91cf web_id ( string ): \u4e0b\u55ae\u5e73\u53f0\u4ee3\u78bc contract security_type ( string ): \u5546\u54c1\u985e\u5225 exchange ( string ): \u4ea4\u6613\u6240 code ( string ): \u5546\u54c1\u4ee3\u78bc symbol ( string ): \u7b26\u865f name ( string ): \u5546\u54c1\u540d\u7a31 currency ( string ): \u5e63\u5225","title":"\u59d4\u8a17\u56de\u5831"},{"location":"tutor/order/order_deal_event/stocks/#_2","text":"\u7576\u6413\u5408\u6210\u529f\uff0c\u8b49\u4ea4\u6240\u6703\u50b3\u9001\u6210\u4ea4\u56de\u5831\u544a\u77e5\u3002\u6413\u5408\u6210\u529f\u5305\u542b\u90e8\u5206\u6210\u4ea4\u4ee5\u53ca\u5b8c\u5168\u6210\u4ea4\uff0c\u53ef\u4ee5\u5f9e\u59d4\u8a17\u56de\u5831\u4e2d\u7684 id \u53bb\u5c0d\u61c9\u6210\u4ea4\u56de\u5831\u4e2d\u7684 trade_id \u53bb\u78ba\u8a8d\u662f\u5426\u70ba\u540c\u4e00\u7b46\u59d4\u8a17\u55ae\u3002 \u6210\u4ea4\u56de\u5831 version>=1.0 version<1.0 OrderState . StockDeal { ' trade_id ' : ' 9 c6ae2eb ' , ' seqno ' : ' 269866 ' , ' ordno ' : ' IN497 ' , ' exchange_seq ' : ' 669915 ' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' IntradayOdd ' , ' price ' : 267.5 , ' quantity ' : 3 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1673577256.354 } OrderState . TFTDeal { ' trade_id ' : ' 9 c6ae2eb ' , ' seqno ' : ' 269866 ' , ' ordno ' : ' IN497 ' , ' exchange_seq ' : ' 669915 ' , ' broker_id ' : ' 9 A95 ' , ' account_id ' : ' 1234567 ' , ' action ' : ' Buy ' , ' code ' : ' 2890 ' , ' order_cond ' : ' Cash ' , ' order_lot ' : ' IntradayOdd ' , ' price ' : 267.5 , ' quantity ' : 3 , ' web_id ' : ' 137 ' , ' custom_field ' : ' test ' , ' ts ' : 1673577256.354 } \u6210\u4ea4\u56de\u5831 trade_id ( string ): \u8207\u59d4\u8a17\u56de\u5831 id \u76f8\u540c seqno ( string ): \u5e73\u53f0\u55ae\u865f ordno ( string ): \u524d\u4e94\u78bc\u70ba\u540c\u59d4\u8a17\u56de\u5831\u59d4\u8a17\u55ae\u865f\uff0c\u5f8c\u4e09\u78bc\u70ba\u540c\u7b46\u59d4\u8a17\u6210\u4ea4\u4ea4\u6613\u5e8f\u865f\u3002 exchange_seq ( string ): \u56de\u5831\u5e8f\u865f broker_id ( string ): \u5206\u884c\u4ee3\u78bc account_id ( string ): \u5e33\u865f action ( string ): \u8cb7\u8ce3\u5225 { Buy , Sell } code ( string ): \u5546\u54c1\u4ee3\u78bc order_cond ( string ): { Cash : \u73fe\u80a1 , MarginTrading : \u878d\u8cc7 , ShortSelling : \u878d\u5238 } order_lot ( string ): { Common : \u6574\u80a1 , Fixing : \u5b9a\u76e4 , Odd : \u76e4\u5f8c\u96f6\u80a1 , IntradayOdd : \u76e4\u4e2d\u96f6\u80a1 } price ( float or int ): \u6210\u4ea4\u50f9 quantity ( int ): \u6210\u4ea4\u91cf web_id ( string ): \u5e73\u53f0\u4ee3\u78bc custom_field ( string ): \u81ea\u8a02\u6b04\u4f4d ts ( int ): \u6210\u4ea4\u6642\u9593\u6233 \u6ce8\u610f \u4ea4\u6613\u6240\u56de\u50b3\u8a0a\u606f\u512a\u5148\u9806\u5e8f\u6210\u4ea4\u56de\u5831\u5927\u65bc\u59d4\u8a17\u56de\u5831\uff0c\u6240\u4ee5\u7576\u59d4\u8a17\u7acb\u5373\u6210\u4ea4\u53ef\u80fd\u6703\u5148\u6536\u5230\u6210\u4ea4\u56de\u5831\u3002","title":"\u6210\u4ea4\u56de\u5831"},{"location":"tutor/order/order_deal_event/stocks/#_3","text":"\u6b32\u8655\u7406\u59d4\u8a17\u3001\u6210\u4ea4\u56de\u5831\uff0c\u8a73\u7d30\u53ef\u53c3\u898b Callback \u3002","title":"\u56de\u5831\u8655\u7406"},{"location":"tutor/prepare/open_account/","text":"\u4f7f\u7528Shioaji\u5fc5\u9808\u64c1\u6709\u6c38\u8c50\u91d1\u5e33\u6236\u3002\u82e5\u4f60\u9084\u6c92\u6709\u64c1\u6c38\u8c50\u91d1\u5e33\u6236\uff0c\u8acb\u4f9d\u64da\u4e0b\u5217\u6b65\u9a5f\u958b\u6236: \u81f3 \u958b\u6236 \u9801\u9762 \u82e5\u4f60\u6c92\u6709\u6c38\u8c50\u9280\u884c\u5e33\u6236\uff0c\u8acb\u5148\u958b\u9280\u884c\u5e33\u6236\u7576\u4f60\u7684\u4ea4\u5272\u6236 \u8acb\u9078\u53d6 \u6211\u8981\u958bDAWHO+\u5927\u6236\u6295 \uff0c\u70ba\u958b\u9280\u884c\u6236\u4ee5\u53ca\u8b49\u5238\u6236 \u5b8c\u6210\u9280\u884c\u53ca\u8b49\u5238\u958b\u6236","title":"\u958b\u6236"},{"location":"tutor/prepare/terms/","text":"\u53d7\u9650\u65bc\u53f0\u7063\u91d1\u878d\u6cd5\u898f\uff0c\u65b0\u7528\u6236\u9996\u6b21\u4f7f\u7528\u9700\u7c3d\u7f72\u76f8\u95dc\u6587\u4ef6\u4e26\u5728\u6e2c\u8a66\u6a21\u5f0f\u5b8c\u6210\u6e2c\u8a66\u5831\u544a\u624d\u80fd\u9032\u884c\u6b63\u5f0f\u74b0\u5883\u7684\u4f7f\u7528\u3002 \u958b\u6236 \u5728\u958b\u59cb\u4e4b\u524d\u5fc5\u9808\u5148\u64c1\u6709 \u6c38\u8c50\u91d1\u5e33\u6236 \u3002 \u7c3d\u7f72\u6587\u4ef6 \u00b6 \u2003\u2003\u8acb\u53c3\u898b \u7c3d\u7f72\u4e2d\u5fc3 \u4e26\u5728\u7c3d\u7f72\u524d \u4ed4\u7d30\u95b1\u8b80\u6587\u4ef6 \u3002 API\u6e2c\u8a66 \u00b6 \u6ce8\u610f \u76ee\u524d\u6e2c\u8a66\u5831\u544a\u6c92\u6709 C# \u7248\u672c\uff0c\u53ea\u80fd\u4f7f\u7528 python\uff0c\u5982\u6709\u4efb\u4f55\u554f\u984c\u8acb\u6d3dShioaji\u7ba1\u7406\u54e1\u9032\u884c\u5354\u52a9\u3002 \u2003\u2003\u78ba\u4fdd\u60a8\u5b8c\u5168\u7406\u89e3\u5982\u4f55\u4f7f\u7528\uff0c\u9700\u5728\u6a21\u64ec\u6a21\u5f0f\u5b8c\u6210\u6e2c\u8a66\u5831\u544a\uff0c\u5167\u5bb9\u5305\u542b\u4ee5\u4e0b\u529f\u80fd: \u767b\u5165\u6e2c\u8a66 login \u4e0b\u55ae\u6e2c\u8a66 place_order Attention \u53ef\u6e2c\u8a66\u6642\u9593: \u56e0\u61c9\u516c\u53f8\u8cc7\u8a0a\u5b89\u5168\u898f\u5b9a\uff0c\u6e2c\u8a66\u5831\u544a\u670d\u52d9\u70ba\u661f\u671f\u4e00\u81f3\u4e94 08:00 ~ 20:00 18:00 ~ 20:00: \u53ea\u5141\u8a31\u53f0\u7063IP 08:00 ~ 18:00: \u6c92\u6709\u9650\u5236 \u7248\u672c\u9650\u5236: \u7248\u672c < 1.0: \u5fc5\u9808\u4f7f\u7528 \u7248\u672c>=0.5.0.dev2 \u5b89\u88dd\u6307\u4ee4: pip install shioaji==0.5.0.dev2 \u7248\u672c >= 1.0: \u7121\u9650\u5236 \u5b89\u88dd\u6307\u4ee4: pip install -U shioaji \u5176\u4ed6: API\u4e0b\u55ae\u7c3d\u7f72\u6642\u9593\u9808\u65e9\u65bcAPI\u6e2c\u8a66\u7684\u6642\u9593\uff0c\u4ee5\u5229\u5be9\u6838\u901a\u904e \u8b49\u5238\u3001\u671f\u8ca8\u6236\u9808\u5404\u5225\u6e2c\u8a66 \u8b49\u5238/\u671f\u8ca8\u4e0b\u55ae\u6e2c\u8a66\uff0c\u9700\u9593\u96941\u79d2\u4ee5\u4e0a\uff0c\u4ee5\u5229\u7cfb\u7d71\u7559\u5b58\u6e2c\u8a66\u7d00\u9304 \u67e5\u8a62\u4f7f\u7528\u7248\u672c \u00b6 \u7248\u672c import shioaji as sj print ( sj . __version__ ) # 1.0.0 \u8acb\u6ce8\u610f \u7248\u672c\u9650\u5236 \u767b\u5165\u6e2c\u8a66 \u00b6 \u767b\u5165 version>=1.0 version<1.0 api = sj . Shioaji ( simulation = True ) # \u6a21\u64ec\u6a21\u5f0f api . login ( api_key = \"\u91d1\u9470\" , # \u8acb\u4fee\u6539\u6b64\u8655 secret_key = \"\u5bc6\u9470\" # \u8acb\u4fee\u6539\u6b64\u8655 ) api = sj . Shioaji ( simulation = True ) # \u6a21\u64ec\u6a21\u5f0f api . login ( person_id = \"\u8eab\u5206\u8b49\u5b57\u865f\" , # \u8acb\u4fee\u6539\u6b64\u8655 passwd = \"\u5bc6\u78bc\" , # \u8acb\u4fee\u6539\u6b64\u8655 ) \u7248\u672c >= 1.0: \u4f7f\u7528 API Key \u9032\u884c\u767b\u5165\uff0c\u82e5\u60a8\u5c1a\u672a\u7533\u8acb API Key\uff0c\u53ef\u53c3\u8003 Token \u7248\u672c < 1.0: \u4f7f\u7528 \u8eab\u5206\u8b49\u5b57\u865f \u9032\u884c\u767b\u5165 \u8b49\u5238\u4e0b\u55ae\u6e2c\u8a66 \u00b6 \u8b49\u5238 version>=1.0 version<1.0 # \u5546\u54c1\u6a94 - \u8acb\u4fee\u6539\u6b64\u8655 contract = api . Contracts . Stocks . TSE [ \"2890\" ] # \u8b49\u5238\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655 order = api . Order ( price = 18 , # \u50f9\u683c quantity = 1 , # \u6578\u91cf action = sj . constant . Action . Buy , # \u8cb7\u8ce3\u5225 price_type = sj . constant . StockPriceType . LMT , # \u59d4\u8a17\u50f9\u683c\u985e\u5225 order_type = sj . constant . OrderType . ROD , # \u59d4\u8a17\u689d\u4ef6 account = api . stock_account # \u4e0b\u55ae\u5e33\u865f ) # \u4e0b\u55ae trade = api . place_order ( contract , order ) # \u5546\u54c1\u6a94 - \u8acb\u4fee\u6539\u6b64\u8655 contract = api . Contracts . Stocks . TSE [ \"2890\" ] # \u8b49\u5238\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655 order = api . Order ( price = 18 , # \u50f9\u683c quantity = 1 , # \u6578\u91cf action = sj . constant . Action . Buy , # \u8cb7\u8ce3\u5225 price_type = sj . constant . TFTStockPriceType . LMT , # \u59d4\u8a17\u50f9\u683c\u985e\u5225 order_type = sj . constant . TFTOrderType . ROD , # \u59d4\u8a17\u689d\u4ef6 account = api . stock_account # \u4e0b\u55ae\u5e33\u865f ) # \u4e0b\u55ae trade = api . place_order ( contract , order ) \u5546\u54c1\u6a94 \u8b49\u5238\u59d4\u8a17\u4e0b\u55ae \u671f\u8ca8\u4e0b\u55ae\u6e2c\u8a66 \u00b6 \u671f\u8ca8 verion>=1.0 verion<1.0 # \u5546\u54c1\u6a94 - \u8fd1\u6708\u53f0\u6307\u671f\u8ca8, \u8acb\u4fee\u6539\u6b64\u8655 contract = min ( [ x for x in api . Contracts . Futures . TXF if x . code [ - 2 :] not in [ \"R1\" , \"R2\" ] ], key = lambda x : x . delivery_date ) # \u671f\u8ca8\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655 order = api . Order ( action = sj . constant . Action . Buy , # \u8cb7\u8ce3\u5225 price = 15000 , # \u50f9\u683c quantity = 1 , # \u6578\u91cf price_type = sj . constant . FuturesPriceType . LMT , # \u59d4\u8a17\u50f9\u683c\u985e\u5225 order_type = sj . constant . OrderType . ROD , # \u59d4\u8a17\u689d\u4ef6 octype = sj . constant . FuturesOCType . Auto , # \u5009\u5225 account = api . futopt_account # \u4e0b\u55ae\u5e33\u865f ) # \u4e0b\u55ae trade = api . place_order ( contract , order ) # \u5546\u54c1\u6a94 - \u8fd1\u6708\u53f0\u6307\u671f\u8ca8, \u8acb\u4fee\u6539\u6b64\u8655 contract = min ( [ x for x in api . Contracts . Futures . TXF if x . code [ - 2 :] not in [ \"R1\" , \"R2\" ] ], key = lambda x : x . delivery_date ) # \u671f\u8ca8\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655 order = api . Order ( action = sj . constant . Action . Buy , # \u8cb7\u8ce3\u5225 price = 15000 , # \u50f9\u683c quantity = 1 , # \u6578\u91cf price_type = sj . constant . FuturesPriceType . LMT , # \u59d4\u8a17\u50f9\u683c\u985e\u5225 order_type = sj . constant . FuturesOrderType . ROD , # \u59d4\u8a17\u689d\u4ef6 octype = sj . constant . FuturesOCType . Auto , # \u5009\u5225 account = api . futopt_account # \u4e0b\u55ae\u5e33\u865f ) # \u4e0b\u55ae trade = api . place_order ( contract , order ) \u5546\u54c1\u6a94 \u671f\u8ca8\u59d4\u8a17\u4e0b\u55ae \u6191\u8b49 \u00b6 \u2003\u2003\u4e0b\u55ae\u524d\u5fc5\u9808 \u7533\u8acb \u4e26 \u555f\u7528 \u6191\u8b49 \u7533\u8acb\u6191\u8b49 \u00b6 \u81f3 \u7406\u8ca1\u7db2 \u4e0b\u8f09 eleader \u767b\u5165 eleader \u5f9e\u4e0a\u65b9\u5e33\u6236\u8cc7\u6599\u9078\u53d6(3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a \u9ede\u9078\"\u6b65\u9a5f\u8aaa\u660e\" \u6191\u8b49\u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e \u555f\u7528\u6191\u8b49 \u00b6 \u82e5\u662f\u4f7f\u7528\u6e2c\u8a66\u5e33\u865f\u7121\u9700\u555f\u7528\u6191\u8b49 \u5982\u679c\u60a8\u4f7f\u7528macOS\uff0c\u53ef\u80fd\u6703\u9047\u5230\u7248\u672c\u4e0a\u7684\u554f\u984c\u3002\u6211\u5011\u5efa\u8b70\u60a8\u4f7f\u7528 docker \u53bb\u904b\u884cshioaji\u3002 In result = api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) print ( result ) # True \u6191\u8b49\u8def\u5f91 \u5728 Windows \u7cfb\u7d71\u4e2d\uff0c\u5982\u679c\u6587\u4ef6\u8def\u5f91\u4f7f\u7528 \\ \u4f86\u5206\u9694\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u5c07\u5b83\u66ff\u63db\u70ba /\u3002","title":"\u670d\u52d9\u689d\u6b3e"},{"location":"tutor/prepare/terms/#_1","text":"\u8acb\u53c3\u898b \u7c3d\u7f72\u4e2d\u5fc3 \u4e26\u5728\u7c3d\u7f72\u524d \u4ed4\u7d30\u95b1\u8b80\u6587\u4ef6 \u3002","title":"\u7c3d\u7f72\u6587\u4ef6"},{"location":"tutor/prepare/terms/#api","text":"\u6ce8\u610f \u76ee\u524d\u6e2c\u8a66\u5831\u544a\u6c92\u6709 C# \u7248\u672c\uff0c\u53ea\u80fd\u4f7f\u7528 python\uff0c\u5982\u6709\u4efb\u4f55\u554f\u984c\u8acb\u6d3dShioaji\u7ba1\u7406\u54e1\u9032\u884c\u5354\u52a9\u3002 \u2003\u2003\u78ba\u4fdd\u60a8\u5b8c\u5168\u7406\u89e3\u5982\u4f55\u4f7f\u7528\uff0c\u9700\u5728\u6a21\u64ec\u6a21\u5f0f\u5b8c\u6210\u6e2c\u8a66\u5831\u544a\uff0c\u5167\u5bb9\u5305\u542b\u4ee5\u4e0b\u529f\u80fd: \u767b\u5165\u6e2c\u8a66 login \u4e0b\u55ae\u6e2c\u8a66 place_order Attention \u53ef\u6e2c\u8a66\u6642\u9593: \u56e0\u61c9\u516c\u53f8\u8cc7\u8a0a\u5b89\u5168\u898f\u5b9a\uff0c\u6e2c\u8a66\u5831\u544a\u670d\u52d9\u70ba\u661f\u671f\u4e00\u81f3\u4e94 08:00 ~ 20:00 18:00 ~ 20:00: \u53ea\u5141\u8a31\u53f0\u7063IP 08:00 ~ 18:00: \u6c92\u6709\u9650\u5236 \u7248\u672c\u9650\u5236: \u7248\u672c < 1.0: \u5fc5\u9808\u4f7f\u7528 \u7248\u672c>=0.5.0.dev2 \u5b89\u88dd\u6307\u4ee4: pip install shioaji==0.5.0.dev2 \u7248\u672c >= 1.0: \u7121\u9650\u5236 \u5b89\u88dd\u6307\u4ee4: pip install -U shioaji \u5176\u4ed6: API\u4e0b\u55ae\u7c3d\u7f72\u6642\u9593\u9808\u65e9\u65bcAPI\u6e2c\u8a66\u7684\u6642\u9593\uff0c\u4ee5\u5229\u5be9\u6838\u901a\u904e \u8b49\u5238\u3001\u671f\u8ca8\u6236\u9808\u5404\u5225\u6e2c\u8a66 \u8b49\u5238/\u671f\u8ca8\u4e0b\u55ae\u6e2c\u8a66\uff0c\u9700\u9593\u96941\u79d2\u4ee5\u4e0a\uff0c\u4ee5\u5229\u7cfb\u7d71\u7559\u5b58\u6e2c\u8a66\u7d00\u9304","title":"API\u6e2c\u8a66"},{"location":"tutor/prepare/terms/#_2","text":"\u7248\u672c import shioaji as sj print ( sj . __version__ ) # 1.0.0 \u8acb\u6ce8\u610f \u7248\u672c\u9650\u5236","title":"\u67e5\u8a62\u4f7f\u7528\u7248\u672c"},{"location":"tutor/prepare/terms/#_3","text":"\u767b\u5165 version>=1.0 version<1.0 api = sj . Shioaji ( simulation = True ) # \u6a21\u64ec\u6a21\u5f0f api . login ( api_key = \"\u91d1\u9470\" , # \u8acb\u4fee\u6539\u6b64\u8655 secret_key = \"\u5bc6\u9470\" # \u8acb\u4fee\u6539\u6b64\u8655 ) api = sj . Shioaji ( simulation = True ) # \u6a21\u64ec\u6a21\u5f0f api . login ( person_id = \"\u8eab\u5206\u8b49\u5b57\u865f\" , # \u8acb\u4fee\u6539\u6b64\u8655 passwd = \"\u5bc6\u78bc\" , # \u8acb\u4fee\u6539\u6b64\u8655 ) \u7248\u672c >= 1.0: \u4f7f\u7528 API Key \u9032\u884c\u767b\u5165\uff0c\u82e5\u60a8\u5c1a\u672a\u7533\u8acb API Key\uff0c\u53ef\u53c3\u8003 Token \u7248\u672c < 1.0: \u4f7f\u7528 \u8eab\u5206\u8b49\u5b57\u865f \u9032\u884c\u767b\u5165","title":"\u767b\u5165\u6e2c\u8a66"},{"location":"tutor/prepare/terms/#_4","text":"\u8b49\u5238 version>=1.0 version<1.0 # \u5546\u54c1\u6a94 - \u8acb\u4fee\u6539\u6b64\u8655 contract = api . Contracts . Stocks . TSE [ \"2890\" ] # \u8b49\u5238\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655 order = api . Order ( price = 18 , # \u50f9\u683c quantity = 1 , # \u6578\u91cf action = sj . constant . Action . Buy , # \u8cb7\u8ce3\u5225 price_type = sj . constant . StockPriceType . LMT , # \u59d4\u8a17\u50f9\u683c\u985e\u5225 order_type = sj . constant . OrderType . ROD , # \u59d4\u8a17\u689d\u4ef6 account = api . stock_account # \u4e0b\u55ae\u5e33\u865f ) # \u4e0b\u55ae trade = api . place_order ( contract , order ) # \u5546\u54c1\u6a94 - \u8acb\u4fee\u6539\u6b64\u8655 contract = api . Contracts . Stocks . TSE [ \"2890\" ] # \u8b49\u5238\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655 order = api . Order ( price = 18 , # \u50f9\u683c quantity = 1 , # \u6578\u91cf action = sj . constant . Action . Buy , # \u8cb7\u8ce3\u5225 price_type = sj . constant . TFTStockPriceType . LMT , # \u59d4\u8a17\u50f9\u683c\u985e\u5225 order_type = sj . constant . TFTOrderType . ROD , # \u59d4\u8a17\u689d\u4ef6 account = api . stock_account # \u4e0b\u55ae\u5e33\u865f ) # \u4e0b\u55ae trade = api . place_order ( contract , order ) \u5546\u54c1\u6a94 \u8b49\u5238\u59d4\u8a17\u4e0b\u55ae","title":"\u8b49\u5238\u4e0b\u55ae\u6e2c\u8a66"},{"location":"tutor/prepare/terms/#_5","text":"\u671f\u8ca8 verion>=1.0 verion<1.0 # \u5546\u54c1\u6a94 - \u8fd1\u6708\u53f0\u6307\u671f\u8ca8, \u8acb\u4fee\u6539\u6b64\u8655 contract = min ( [ x for x in api . Contracts . Futures . TXF if x . code [ - 2 :] not in [ \"R1\" , \"R2\" ] ], key = lambda x : x . delivery_date ) # \u671f\u8ca8\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655 order = api . Order ( action = sj . constant . Action . Buy , # \u8cb7\u8ce3\u5225 price = 15000 , # \u50f9\u683c quantity = 1 , # \u6578\u91cf price_type = sj . constant . FuturesPriceType . LMT , # \u59d4\u8a17\u50f9\u683c\u985e\u5225 order_type = sj . constant . OrderType . ROD , # \u59d4\u8a17\u689d\u4ef6 octype = sj . constant . FuturesOCType . Auto , # \u5009\u5225 account = api . futopt_account # \u4e0b\u55ae\u5e33\u865f ) # \u4e0b\u55ae trade = api . place_order ( contract , order ) # \u5546\u54c1\u6a94 - \u8fd1\u6708\u53f0\u6307\u671f\u8ca8, \u8acb\u4fee\u6539\u6b64\u8655 contract = min ( [ x for x in api . Contracts . Futures . TXF if x . code [ - 2 :] not in [ \"R1\" , \"R2\" ] ], key = lambda x : x . delivery_date ) # \u671f\u8ca8\u59d4\u8a17\u55ae - \u8acb\u4fee\u6539\u6b64\u8655 order = api . Order ( action = sj . constant . Action . Buy , # \u8cb7\u8ce3\u5225 price = 15000 , # \u50f9\u683c quantity = 1 , # \u6578\u91cf price_type = sj . constant . FuturesPriceType . LMT , # \u59d4\u8a17\u50f9\u683c\u985e\u5225 order_type = sj . constant . FuturesOrderType . ROD , # \u59d4\u8a17\u689d\u4ef6 octype = sj . constant . FuturesOCType . Auto , # \u5009\u5225 account = api . futopt_account # \u4e0b\u55ae\u5e33\u865f ) # \u4e0b\u55ae trade = api . place_order ( contract , order ) \u5546\u54c1\u6a94 \u671f\u8ca8\u59d4\u8a17\u4e0b\u55ae","title":"\u671f\u8ca8\u4e0b\u55ae\u6e2c\u8a66"},{"location":"tutor/prepare/terms/#_6","text":"\u4e0b\u55ae\u524d\u5fc5\u9808 \u7533\u8acb \u4e26 \u555f\u7528 \u6191\u8b49","title":"\u6191\u8b49"},{"location":"tutor/prepare/terms/#_7","text":"\u81f3 \u7406\u8ca1\u7db2 \u4e0b\u8f09 eleader \u767b\u5165 eleader \u5f9e\u4e0a\u65b9\u5e33\u6236\u8cc7\u6599\u9078\u53d6(3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a \u9ede\u9078\"\u6b65\u9a5f\u8aaa\u660e\" \u6191\u8b49\u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e","title":"\u7533\u8acb\u6191\u8b49"},{"location":"tutor/prepare/terms/#_8","text":"\u82e5\u662f\u4f7f\u7528\u6e2c\u8a66\u5e33\u865f\u7121\u9700\u555f\u7528\u6191\u8b49 \u5982\u679c\u60a8\u4f7f\u7528macOS\uff0c\u53ef\u80fd\u6703\u9047\u5230\u7248\u672c\u4e0a\u7684\u554f\u984c\u3002\u6211\u5011\u5efa\u8b70\u60a8\u4f7f\u7528 docker \u53bb\u904b\u884cshioaji\u3002 In result = api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) print ( result ) # True \u6191\u8b49\u8def\u5f91 \u5728 Windows \u7cfb\u7d71\u4e2d\uff0c\u5982\u679c\u6587\u4ef6\u8def\u5f91\u4f7f\u7528 \\ \u4f86\u5206\u9694\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u5c07\u5b83\u66ff\u63db\u70ba /\u3002","title":"\u555f\u7528\u6191\u8b49"},{"location":"tutor/prepare/token/","text":"\u5728\u7248\u672c1.0\u4e4b\u5f8c\uff0c\u6211\u5011\u5c07\u4f7f\u7528Token\u4f5c\u70ba\u6211\u5011\u7684\u767b\u5165\u65b9\u5f0f\u3002\u8acb\u6839\u64da\u4e0b\u5217\u7684\u6b65\u9a5f\u9032\u884c\u7533\u8acb\u53ca\u4f7f\u7528\u3002 \u7533\u8acb \u00b6 \u81f3 \u7406\u8ca1\u7db2 \u500b\u4eba\u670d\u52d9\u4e2d\u7684API\u7ba1\u7406\u9801\u9762 \u9ede\u9078\u65b0\u589eAPI KEY \u5229\u7528\u624b\u6a5f\u6216\u662fEmail\u9a57\u8b49\u8eab\u4efd\uff0c\u9a57\u8b49\u6210\u529f\u624d\u80fd\u5efa\u7acbAPI KEY\u3002 \u53ef\u9078\u53d6\u6b64\u628aKEY\u5230\u671f\u6642\u9593\u3001\u6b0a\u9650\u3001\u5e33\u6236\u4ee5\u53caIP\u3002 \u6ce8\u610f IP\u5efa\u8b70\u4f7f\u7528\u9650\u5236\uff0c\u80fd\u4f7f\u8a72KEY\u5b89\u5168\u6027\u63d0\u9ad8\u3002 \u65b0\u589e\u6210\u529f\u6703\u5f97\u5230\u5169\u628a\u9470\u5319 \u6ce8\u610f \u8acb\u59a5\u5584\u4fdd\u5b58\u60a8\u7684\u9470\u5319\uff0c\u52ff\u5c07\u5176\u900f\u6f0f\u7d66\u4efb\u4f55\u4eba\uff0c\u4ee5\u514d\u9020\u6210\u8cc7\u7522\u640d\u5931\u3002 Secret Key\u50c5\u5728\u5efa\u7acb\u6210\u529f\u6642\u53d6\u5f97\uff0c\u6b64\u5f8c\u518d\u7121\u4efb\u4f55\u65b9\u6cd5\u5f97\u5230\uff0c\u8acb\u78ba\u4fdd\u4ee5\u4fdd\u5b58","title":"Token"},{"location":"tutor/prepare/token/#_1","text":"\u81f3 \u7406\u8ca1\u7db2 \u500b\u4eba\u670d\u52d9\u4e2d\u7684API\u7ba1\u7406\u9801\u9762 \u9ede\u9078\u65b0\u589eAPI KEY \u5229\u7528\u624b\u6a5f\u6216\u662fEmail\u9a57\u8b49\u8eab\u4efd\uff0c\u9a57\u8b49\u6210\u529f\u624d\u80fd\u5efa\u7acbAPI KEY\u3002 \u53ef\u9078\u53d6\u6b64\u628aKEY\u5230\u671f\u6642\u9593\u3001\u6b0a\u9650\u3001\u5e33\u6236\u4ee5\u53caIP\u3002 \u6ce8\u610f IP\u5efa\u8b70\u4f7f\u7528\u9650\u5236\uff0c\u80fd\u4f7f\u8a72KEY\u5b89\u5168\u6027\u63d0\u9ad8\u3002 \u65b0\u589e\u6210\u529f\u6703\u5f97\u5230\u5169\u628a\u9470\u5319 \u6ce8\u610f \u8acb\u59a5\u5584\u4fdd\u5b58\u60a8\u7684\u9470\u5319\uff0c\u52ff\u5c07\u5176\u900f\u6f0f\u7d66\u4efb\u4f55\u4eba\uff0c\u4ee5\u514d\u9020\u6210\u8cc7\u7522\u640d\u5931\u3002 Secret Key\u50c5\u5728\u5efa\u7acb\u6210\u529f\u6642\u53d6\u5f97\uff0c\u6b64\u5f8c\u518d\u7121\u4efb\u4f55\u65b9\u6cd5\u5f97\u5230\uff0c\u8acb\u78ba\u4fdd\u4ee5\u4fdd\u5b58","title":"\u7533\u8acb"},{"location":"zh-tw/","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Shioaji"},{"location":"zh-tw/#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"zh-tw/#installation","text":"","title":"Installation"},{"location":"zh-tw/#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"zh-tw/#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"}]}