{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shioaji \u00b6 Shioaji provides .Net C# version for use. Installation \u00b6 Shioaji is available on NuGet , with the package name Shioaji . Please use on 64-bit systems. And our project is developed with standard 2.0. According to the official .net document, it's recommended that you upgrade the project to target .NET Framework 4.7.2 or higher.","title":"Overview"},{"location":"#shioaji","text":"Shioaji provides .Net C# version for use.","title":"Shioaji"},{"location":"#installation","text":"Shioaji is available on NuGet , with the package name Shioaji . Please use on 64-bit systems. And our project is developed with standard 2.0. According to the official .net document, it's recommended that you upgrade the project to target .NET Framework 4.7.2 or higher.","title":"Installation"},{"location":"quickstart/","text":"Initialization \u00b6 using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); Just using our API package and new the instance to start using our API. Login your account and activate the certification then you can start placing order. Streaming Market Data \u00b6 _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . tick ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202012\" ], QuoteType . bidask ); Subscribe the real time market data. Simplely pass contract into quote Subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in QuoteType . The best way to use that is directly pass this enum into Subscribe function. Place Order \u00b6 var _stockOrder = new StockOrder () { price = 40.55 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , }; var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order. Conclusion \u00b6 This quickstart demonstrates how easy to use our package for C# users.","title":"Quick Start"},{"location":"quickstart/#initialization","text":"using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); Just using our API package and new the instance to start using our API. Login your account and activate the certification then you can start placing order.","title":"Initialization"},{"location":"quickstart/#streaming-market-data","text":"_api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . tick ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202012\" ], QuoteType . bidask ); Subscribe the real time market data. Simplely pass contract into quote Subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in QuoteType . The best way to use that is directly pass this enum into Subscribe function.","title":"Streaming Market Data"},{"location":"quickstart/#place-order","text":"var _stockOrder = new StockOrder () { price = 40.55 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , }; var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order.","title":"Place Order"},{"location":"quickstart/#conclusion","text":"This quickstart demonstrates how easy to use our package for C# users.","title":"Conclusion"},{"location":"tutor/contract/","text":"Login Fetch Contracts \u00b6 First, you need login. \u00b6 After login success we will start to fetch all kind of contract. using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); Contracts \u00b6 In var _contract = _api . Contracts ; Console . WriteLine ( _contract . ToString ()); Out Contracts ( Indexs =( OTC , TSE ), Stocks =( OES , OTC , TSE ), Futures =( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options =( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) If your contracts have been downloaded, will see the output like above. Stock Contract \u00b6 In var contract_2890 = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; Console . WriteLine ( contract_2890 . ToString ()); Out { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 12.25 , limit_down = 10.05 , reference = 11.15 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2020 / 12 / 28 , category = 17 , day_trade = Yes , } Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . margin_trading_balance ( int ): Margin trading balance . short_selling_balance ( int ): Short selling balance . day_trade ( DayTrade ): Day trade . { Yes , No , OnlyBuy } Futures Contract \u00b6 In var contract_txf = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ]; Console . WriteLine ( contract_txf . ToString ()); Out { security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , } Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . underlying_kind ( str ): Underlying Kind . Options Contract \u00b6 In var contract_opt = _api . Contracts . Options [ \"TXO\" ][ \"TXO20210309200P\" ]; Console . WriteLine ( contract_opt . ToString ()); Out { security_type = OPT , code = TXO09200O1 , category = TXO , symbol = TXO20210309200P , exchange = TAIFEX , delivery_month = 202103 , strike_price = 9200 , option_right = P , underlying_kind = I , limit_up = 1440 , limit_down = 0.1 , reference = 15 , update_date = 2020 / 12 / 28 , } Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . strike_price ( int or float ): Strike Price . option_right ( OptionRight ): Option Right . underlying_kind ( str ): Underlying Kind . Index Contract \u00b6 In var contract_idx = _api . Contracts . Indexs [ \"TSE\" ][ \"001\" ]; Console . WriteLine ( contract_idx . ToString ()); Out { security_type = IND , code = 001 , exchange = TSE , symbol = TSE001 , name = \u52a0\u6b0a , } Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . This contract is not avaiable to place order, but allow to subscribe the quote. Conclusion \u00b6 Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Contract"},{"location":"tutor/contract/#login-fetch-contracts","text":"","title":"Login Fetch Contracts"},{"location":"tutor/contract/#first-you-need-login","text":"After login success we will start to fetch all kind of contract. using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" );","title":"First, you need login."},{"location":"tutor/contract/#contracts","text":"In var _contract = _api . Contracts ; Console . WriteLine ( _contract . ToString ()); Out Contracts ( Indexs =( OTC , TSE ), Stocks =( OES , OTC , TSE ), Futures =( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options =( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) If your contracts have been downloaded, will see the output like above.","title":"Contracts"},{"location":"tutor/contract/#stock-contract","text":"In var contract_2890 = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; Console . WriteLine ( contract_2890 . ToString ()); Out { security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 12.25 , limit_down = 10.05 , reference = 11.15 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2020 / 12 / 28 , category = 17 , day_trade = Yes , } Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . margin_trading_balance ( int ): Margin trading balance . short_selling_balance ( int ): Short selling balance . day_trade ( DayTrade ): Day trade . { Yes , No , OnlyBuy }","title":"Stock Contract"},{"location":"tutor/contract/#futures-contract","text":"In var contract_txf = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ]; Console . WriteLine ( contract_txf . ToString ()); Out { security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , } Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . underlying_kind ( str ): Underlying Kind .","title":"Futures Contract"},{"location":"tutor/contract/#options-contract","text":"In var contract_opt = _api . Contracts . Options [ \"TXO\" ][ \"TXO20210309200P\" ]; Console . WriteLine ( contract_opt . ToString ()); Out { security_type = OPT , code = TXO09200O1 , category = TXO , symbol = TXO20210309200P , exchange = TAIFEX , delivery_month = 202103 , strike_price = 9200 , option_right = P , underlying_kind = I , limit_up = 1440 , limit_down = 0.1 , reference = 15 , update_date = 2020 / 12 / 28 , } Attributes: code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . category ( str ): Category . limit_up ( float ): Limit up . limit_down ( float ): Limit down . reference ( float ): Reference price . update_date ( str ): Update date . delivery_month ( str ): Delivery Month . strike_price ( int or float ): Strike Price . option_right ( OptionRight ): Option Right . underlying_kind ( str ): Underlying Kind .","title":"Options Contract"},{"location":"tutor/contract/#index-contract","text":"In var contract_idx = _api . Contracts . Indexs [ \"TSE\" ][ \"001\" ]; Console . WriteLine ( contract_idx . ToString ()); Out { security_type = IND , code = 001 , exchange = TSE , symbol = TSE001 , name = \u52a0\u6b0a , } Attributes: exchange ( Exchange ): Attributes of industry . { OES , OTC , TSE ... etc } code ( str ): Id . symbol ( str ): Symbol . name ( str ): Name . This contract is not avaiable to place order, but allow to subscribe the quote.","title":"Index Contract"},{"location":"tutor/contract/#conclusion","text":"Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Conclusion"},{"location":"tutor/limit/","text":"\u70ba\u907f\u514d\u5f71\u97ff\u5176\u4ed6\u4f7f\u7528\u8005\u9023\u7dda\uff0c\u8acb\u9075\u5b88\u4ee5\u4e0b\u4f7f\u7528\u898f\u7bc4 \u00b6 \u884c\u60c5(data) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b CreditEnquire \u3001 ShortStockSources \u3001 Snapshots \u3001 Ticks \u3001 Kbars \u3002 \u5e33\u52d9(portfolio) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u965025\u6b21 \u5305\u542b ListProfitLossDetail \u3001 AccountBalance \u3001 ListSettlements \u3001 ListProfitLoss \u3001 ListPositions \u3002 \u59d4\u8a17(order) : \u76f8\u95dc\u67e5\u8a62\uff0c10\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b PlaceOrder \u3001 UpdateStatus \u3001 UpdateOrder \u3001 CancelOrder \u3002 \u9023\u7dda\u9650\u5236: \u540c\u4e00\u6c38\u8c50\u91d1\u8b49\u5238 personId \uff0c\u50c5\u53ef\u4f7f\u7528\u6700\u591a5\u500b\u9023\u7dda Login() \u5373\u5efa\u7acb\u4e00\u500b\u9023\u7dda\u3002 \u767b\u5165\u9650\u5236: Login() \u4e00\u5929\u4e0a\u96501000\u6b21 \u82e5\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418 \u00b6 \u82e5\u7576\u65e5\u9023\u7e8c\u591a\u6b21\u8d85\u904e\u9650\u5236\uff0c\u672c\u516c\u53f8\u5c07\u66ab\u505c\u8a72IP\u53caID\u4f7f\u7528\u6b0a \u00b6 \u82e5ID\u88ab\u66ab\u505c\u4f7f\u7528\uff0c\u8acb\u6d3dShioaji\u7ba1\u7406\u4eba\u54e1 \u00b6","title":"\u4f7f\u7528\u9650\u5236"},{"location":"tutor/limit/#_1","text":"\u884c\u60c5(data) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b CreditEnquire \u3001 ShortStockSources \u3001 Snapshots \u3001 Ticks \u3001 Kbars \u3002 \u5e33\u52d9(portfolio) : \u76f8\u95dc\u67e5\u8a62\uff0c5\u79d2\u4e0a\u965025\u6b21 \u5305\u542b ListProfitLossDetail \u3001 AccountBalance \u3001 ListSettlements \u3001 ListProfitLoss \u3001 ListPositions \u3002 \u59d4\u8a17(order) : \u76f8\u95dc\u67e5\u8a62\uff0c10\u79d2\u4e0a\u9650500\u6b21 \u5305\u542b PlaceOrder \u3001 UpdateStatus \u3001 UpdateOrder \u3001 CancelOrder \u3002 \u9023\u7dda\u9650\u5236: \u540c\u4e00\u6c38\u8c50\u91d1\u8b49\u5238 personId \uff0c\u50c5\u53ef\u4f7f\u7528\u6700\u591a5\u500b\u9023\u7dda Login() \u5373\u5efa\u7acb\u4e00\u500b\u9023\u7dda\u3002 \u767b\u5165\u9650\u5236: Login() \u4e00\u5929\u4e0a\u96501000\u6b21","title":"\u70ba\u907f\u514d\u5f71\u97ff\u5176\u4ed6\u4f7f\u7528\u8005\u9023\u7dda\uff0c\u8acb\u9075\u5b88\u4ee5\u4e0b\u4f7f\u7528\u898f\u7bc4"},{"location":"tutor/limit/#_2","text":"","title":"\u82e5\u4f7f\u7528\u91cf\u8d85\u904e\u9650\u5236\uff0c\u5c07\u66ab\u505c\u670d\u52d9\u4e00\u5206\u9418"},{"location":"tutor/limit/#ipid","text":"","title":"\u82e5\u7576\u65e5\u9023\u7e8c\u591a\u6b21\u8d85\u904e\u9650\u5236\uff0c\u672c\u516c\u53f8\u5c07\u66ab\u505c\u8a72IP\u53caID\u4f7f\u7528\u6b0a"},{"location":"tutor/limit/#idshioaji","text":"","title":"\u82e5ID\u88ab\u66ab\u505c\u4f7f\u7528\uff0c\u8acb\u6d3dShioaji\u7ba1\u7406\u4eba\u54e1"},{"location":"tutor/login/","text":"Login Shioaji \u00b6 Simulation Accounts If use simulation, we provide 1 of test account PAPIUSER01 , the password is 2222 . In Production using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); Console . WriteLine ( _accounts . ToString ()); Simulation using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji ( simulation : true ); var _accounts = _api . Login ( \"PAPIUSER01\" , \"2222\" ); Console . WriteLine ( _accounts . ToString ()); List Accounts \u00b6 There are 2 ways you can get your accounts: _api.Login() _api.ListAccounts() In: login var _accounts = _api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" ) Console . WriteLine ( _accounts . ToString ()); In: list_accounts Console . WriteLine ( _api . ListAccounts (). ToString ()); Out [ {account_type=F, person_id=\"\", broker_id=\"\", account_id=\"\", signed=True, username=\"\",}, {account_type=H, person_id=\"\", broker_id=\"\", account_id=\"\", signed=False, username=\"\",}, {account_type=S, person_id=\"\", broker_id=\"\", account_id=\"\", signed=True, username=\"\",} ] Logout Shioaji \u00b6 Logout funciton will close the connection between the client and the server. In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji ( simulation : true ); var res = _api . Logout (); Console . WriteLine ( res ); Out Disconnect True","title":"Login"},{"location":"tutor/login/#login-shioaji","text":"Simulation Accounts If use simulation, we provide 1 of test account PAPIUSER01 , the password is 2222 . In Production using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); Console . WriteLine ( _accounts . ToString ()); Simulation using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji ( simulation : true ); var _accounts = _api . Login ( \"PAPIUSER01\" , \"2222\" ); Console . WriteLine ( _accounts . ToString ());","title":"Login Shioaji"},{"location":"tutor/login/#list-accounts","text":"There are 2 ways you can get your accounts: _api.Login() _api.ListAccounts() In: login var _accounts = _api . login ( person_id = \"YOUR_PERSON_ID\" , passwd = \"YOUR_PASSWORD\" ) Console . WriteLine ( _accounts . ToString ()); In: list_accounts Console . WriteLine ( _api . ListAccounts (). ToString ()); Out [ {account_type=F, person_id=\"\", broker_id=\"\", account_id=\"\", signed=True, username=\"\",}, {account_type=H, person_id=\"\", broker_id=\"\", account_id=\"\", signed=False, username=\"\",}, {account_type=S, person_id=\"\", broker_id=\"\", account_id=\"\", signed=True, username=\"\",} ]","title":"List Accounts"},{"location":"tutor/login/#logout-shioaji","text":"Logout funciton will close the connection between the client and the server. In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji ( simulation : true ); var res = _api . Logout (); Console . WriteLine ( res ); Out Disconnect True","title":"Logout Shioaji"},{"location":"tutor/order_deal_event/","text":"Order & Deal Event is a report of order action. When you place order, cancel order and update order, it will return an OrderState. OrderState is order info. For Example \u00b6 Stock \u00b6 Stock jupyter link Place Order \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 } Set order callback \u00b6 In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 } Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Price \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Quantity \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Order deal event"},{"location":"tutor/order_deal_event/#for-example","text":"","title":"For Example"},{"location":"tutor/order_deal_event/#stock","text":"Stock jupyter link","title":"Stock"},{"location":"tutor/order_deal_event/#place-order","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 }","title":"Place Order"},{"location":"tutor/order_deal_event/#set-order-callback","text":"In def place_cb ( stat , msg ): print ( 'my_place_callback' ) print ( stat , msg ) api . set_order_callback ( place_cb ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out my_place_callback OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Success Deal my_place_callback OrderState . TFTDeal { 'trade_id' : '12ab3456' , 'exchange_seq' : '123456' , 'broker_id' : 'your_broker_id' , 'account_id' : 'your_account_id' , 'action' : < Action . Buy : 'Buy' > , 'code' : '2890' , 'order_cond' : < StockOrderCond . Cash : 'Cash' > , 'price' : 12 , 'quantity' : 10 , 'ts' : 1583828972 }","title":"Set order callback"},{"location":"tutor/order_deal_event/#cancel-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Cancel Order"},{"location":"tutor/order_deal_event/#update-price","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Price"},{"location":"tutor/order_deal_event/#update-quantity","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Quantity"},{"location":"tutor/accounting/account_balance/","text":"Query stock account balance First, you need login. \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var accountBalance = _api . AccountBalance (); Console . WriteLine ( accountBalance . ToString ()); Out { acc_balance = 12345 , date = 2022 - 07 - 28 14 : 19 : 58 , errmsg = \"\" } Attributes: Name Type Description acc_balance float account balance date str query date errmsg str error message","title":"Account Balance"},{"location":"tutor/accounting/account_balance/#first-you-need-login","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var accountBalance = _api . AccountBalance (); Console . WriteLine ( accountBalance . ToString ()); Out { acc_balance = 12345 , date = 2022 - 07 - 28 14 : 19 : 58 , errmsg = \"\" } Attributes: Name Type Description acc_balance float account balance date str query date errmsg str error message","title":"First, you need login."},{"location":"tutor/accounting/account_portfolio/","text":"warning The features of this page will be removed in the future . Account Margin \u00b6 In api . get_account_margin ? Out Signature : api . get_account_margin ( currency = 'NTD' , margin_type = '1' , account = {}) Docstring : query margin currency : { NTX , USX , NTD , USD , HKD , EUR , JPY , GBP } the margin calculate in which currency - NTX : \u7d04\u7576\u53f0\u5e63 - USX : \u7d04\u7576\u7f8e\u91d1 - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - JPY : \u65e5\u5e63 - GBP : \u82f1\u938a margin_type : { '1' , '2' } query margin type - 1 : \u5373\u6642 - 2 : \u98a8\u96aa In account_margin = api . get_account_margin () account_margin Out AccountMargin Currency : NTD Account : F0020009104000 Detail : OrderPSecurity : 207000.0 ProfitAccCount : 207000.0 FProfit : 0.0 FMissConProfit : 0.0 OMissConProfit : 0.0 OColse : 0.0 OMarketPrice : 0.0 OTodayDiff : 0.0 HandCharge : 0.0 TradeTax : 0.0 Security : 0.0 StartSecurity : 0.0 UpKeepSecurity : 0.0 Statistics : 99999.0 Flow : 999.0 orderBid : 0.0 orderAsk : 0.0 Conclusionbid : 0.0 Conclusionask : 0.0 YesterdayBalance : 207000.0 PayMoney : 0.0 Equity : 207000.0 Ogain : 0.0 exrate : 1.0 xgdamt : 0.0 agtamt : 0.0 YesterdayEquity : 207000.0 Munet : 0.0 Cashamt : 207000.0 Bapamt : 0.0 Sapamt : 0.0 Adps : 0.0 Adamt : 0.0 Ybaln : 207000.0 directly pass our AccountMargin object to pandas to using your model In df_margin = pd . DataFrame ( account_margin . data ()) df_margin Adamt Adps Bapamt Cashamt Conclusionask Conclusionbid Equity FMissConProfit FProfit Flow ... TradeTax UpKeepSecurity Ybaln YesterdayBalance YesterdayEquity agtamt exrate orderAsk orderBid xgdamt 0 0.0 0.0 0.0 207000.0 0.0 0.0 207000.0 0.0 0.0 999.0 ... 0.0 0.0 207000.0 207000.0 207000.0 0.0 1.0 0.0 0.0 0.0 Get Open Position \u00b6 In api . get_account_openposition ? Out Signature : api . get_account_openposition ( product_type = '0' , query_type = '0' , account = {}) Docstring : query open position product_type : { 0 , 1 , 2 , 3 } filter product type of open position - 0 : all - 1 : future - 2 : option - 3 : usd base query_type : { 0 , 1 } query return with detail or summary - 0 : detail - 1 : summary In positions = api . get_account_openposition ( query_type = '1' , account = api . futopt_account ) positions AccountOpenPosition \u00b6 In df_positions = pd . DataFrame ( positions . data ()) df_positions Account Code CodeName ContractAverPrice Currency Date FlowProfitLoss MTAMT OTAMT OrderBS OrderNum OrderType RealPrice SettlePrice SettleProfitLoss StartSecurity UpKeepSecurity Volume paddingByte 0 FF0020009104000 TXFA9 \u53f0\u6307\u671f\u8ca8 01 9508.4137 NTD 00000000 4795201.620000 6438000.000000 8352000.000000 B 9784.0 9784.00 4795201.620000 8352000.000000 6438000.000000 87.000000 Get Settle ProfitLoss \u00b6 In api . get_account_settle_profitloss ? Out Signature : api . get_account_settle_profitloss ( product_type = '0' , summary = 'Y' , start_date = '' , end_date = '' , currency = '' , account = {}) Docstring : query settlement profit loss product_type : { 0 , 1 , 2 } filter product type of open position - 0 : all - 1 : future - 2 : option summary : { Y , N } query return with detail or summary - Y : summary - N : detail start_date : str the start date of query range format with % Y % m % d ex : 20180101 end_date : str the end date of query range format with % Y % m % d ex : 20180201 currency : { NTD , USD , HKD , EUR , CAD , BAS } the profit loss calculate in which currency - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - CAD : \u52a0\u5e63 - BAS : \u57fa\u5e63 AccountSettleProfitLoss \u00b6 In st_date = ( date . today () - timedelta ( days = 60 )) . strftime ( '%Y%m %d ' ) settle_profitloss = api . get_account_settle_profitloss ( summary = 'Y' , start_date = st_date ) settle_profitloss df_profitloss = pd . DataFrame ( settle_profitloss . data ()) df_profitloss account averagePrice code codeName currency floatProfitLoss handCharge ord_bs ord_type ordno ordno_b settleAvgPrc settleDate settleVolume tFlag tdate tradeProfitLoss tradeTax unVolume volume 0 F0020009104000 9900.0 TXFK8 \u53f0\u6307\u671f\u8ca8 11 NTD 460.000000 60.000000 S 00 kY002 kY003 9897.0 20181022 1.000000 1 20181022 600.000000 80.000000 0.000000 1.000000","title":"Account portfolio"},{"location":"tutor/accounting/account_portfolio/#account-margin","text":"In api . get_account_margin ? Out Signature : api . get_account_margin ( currency = 'NTD' , margin_type = '1' , account = {}) Docstring : query margin currency : { NTX , USX , NTD , USD , HKD , EUR , JPY , GBP } the margin calculate in which currency - NTX : \u7d04\u7576\u53f0\u5e63 - USX : \u7d04\u7576\u7f8e\u91d1 - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - JPY : \u65e5\u5e63 - GBP : \u82f1\u938a margin_type : { '1' , '2' } query margin type - 1 : \u5373\u6642 - 2 : \u98a8\u96aa In account_margin = api . get_account_margin () account_margin Out AccountMargin Currency : NTD Account : F0020009104000 Detail : OrderPSecurity : 207000.0 ProfitAccCount : 207000.0 FProfit : 0.0 FMissConProfit : 0.0 OMissConProfit : 0.0 OColse : 0.0 OMarketPrice : 0.0 OTodayDiff : 0.0 HandCharge : 0.0 TradeTax : 0.0 Security : 0.0 StartSecurity : 0.0 UpKeepSecurity : 0.0 Statistics : 99999.0 Flow : 999.0 orderBid : 0.0 orderAsk : 0.0 Conclusionbid : 0.0 Conclusionask : 0.0 YesterdayBalance : 207000.0 PayMoney : 0.0 Equity : 207000.0 Ogain : 0.0 exrate : 1.0 xgdamt : 0.0 agtamt : 0.0 YesterdayEquity : 207000.0 Munet : 0.0 Cashamt : 207000.0 Bapamt : 0.0 Sapamt : 0.0 Adps : 0.0 Adamt : 0.0 Ybaln : 207000.0 directly pass our AccountMargin object to pandas to using your model In df_margin = pd . DataFrame ( account_margin . data ()) df_margin Adamt Adps Bapamt Cashamt Conclusionask Conclusionbid Equity FMissConProfit FProfit Flow ... TradeTax UpKeepSecurity Ybaln YesterdayBalance YesterdayEquity agtamt exrate orderAsk orderBid xgdamt 0 0.0 0.0 0.0 207000.0 0.0 0.0 207000.0 0.0 0.0 999.0 ... 0.0 0.0 207000.0 207000.0 207000.0 0.0 1.0 0.0 0.0 0.0","title":"Account Margin"},{"location":"tutor/accounting/account_portfolio/#get-open-position","text":"In api . get_account_openposition ? Out Signature : api . get_account_openposition ( product_type = '0' , query_type = '0' , account = {}) Docstring : query open position product_type : { 0 , 1 , 2 , 3 } filter product type of open position - 0 : all - 1 : future - 2 : option - 3 : usd base query_type : { 0 , 1 } query return with detail or summary - 0 : detail - 1 : summary In positions = api . get_account_openposition ( query_type = '1' , account = api . futopt_account ) positions","title":"Get Open Position"},{"location":"tutor/accounting/account_portfolio/#accountopenposition","text":"In df_positions = pd . DataFrame ( positions . data ()) df_positions Account Code CodeName ContractAverPrice Currency Date FlowProfitLoss MTAMT OTAMT OrderBS OrderNum OrderType RealPrice SettlePrice SettleProfitLoss StartSecurity UpKeepSecurity Volume paddingByte 0 FF0020009104000 TXFA9 \u53f0\u6307\u671f\u8ca8 01 9508.4137 NTD 00000000 4795201.620000 6438000.000000 8352000.000000 B 9784.0 9784.00 4795201.620000 8352000.000000 6438000.000000 87.000000","title":"AccountOpenPosition"},{"location":"tutor/accounting/account_portfolio/#get-settle-profitloss","text":"In api . get_account_settle_profitloss ? Out Signature : api . get_account_settle_profitloss ( product_type = '0' , summary = 'Y' , start_date = '' , end_date = '' , currency = '' , account = {}) Docstring : query settlement profit loss product_type : { 0 , 1 , 2 } filter product type of open position - 0 : all - 1 : future - 2 : option summary : { Y , N } query return with detail or summary - Y : summary - N : detail start_date : str the start date of query range format with % Y % m % d ex : 20180101 end_date : str the end date of query range format with % Y % m % d ex : 20180201 currency : { NTD , USD , HKD , EUR , CAD , BAS } the profit loss calculate in which currency - NTD : \u65b0\u53f0\u5e63 - USD : \u7f8e\u5143 - HKD : \u6e2f\u5e63 - EUR : \u6b50\u5143 - CAD : \u52a0\u5e63 - BAS : \u57fa\u5e63","title":"Get Settle ProfitLoss"},{"location":"tutor/accounting/account_portfolio/#accountsettleprofitloss","text":"In st_date = ( date . today () - timedelta ( days = 60 )) . strftime ( '%Y%m %d ' ) settle_profitloss = api . get_account_settle_profitloss ( summary = 'Y' , start_date = st_date ) settle_profitloss df_profitloss = pd . DataFrame ( settle_profitloss . data ()) df_profitloss account averagePrice code codeName currency floatProfitLoss handCharge ord_bs ord_type ordno ordno_b settleAvgPrc settleDate settleVolume tFlag tdate tradeProfitLoss tradeTax unVolume volume 0 F0020009104000 9900.0 TXFK8 \u53f0\u6307\u671f\u8ca8 11 NTD 460.000000 60.000000 S 00 kY002 kY003 9897.0 20181022 1.000000 1 20181022 600.000000 80.000000 0.000000 1.000000","title":"AccountSettleProfitLoss"},{"location":"tutor/accounting/position/","text":"Query account of unrealized gain or loss First, you need login. \u00b6 Stocks \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var positions = _api . ListPositions (); Console . WriteLine ( positions . ToString ()); Out [ {code=2303, direction=Buy, quantity=2, price=43.52, pnl=1000, yd_quantity=2, cond=Cash,}, {code=2884, direction=Buy, quantity=2, price=26.03, pnl=-913, yd_quantity=2, cond=Cash,} ] Attributes: Name Type Description code str contract id direction Action Buy, Sell quantity int quantity price float the average price pnl float unrealized profit yd_quantity int yesterday cond StockOrderCond Cash(\u73fe\u80a1), Netting(\u9918\u984d\u4ea4\u5272), MarginTrading(\u878d\u8cc7), ShortSelling(\u878d\u5238), Emerging(\u8208\u6ac3)","title":"Position"},{"location":"tutor/accounting/position/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/accounting/position/#stocks","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var positions = _api . ListPositions (); Console . WriteLine ( positions . ToString ()); Out [ {code=2303, direction=Buy, quantity=2, price=43.52, pnl=1000, yd_quantity=2, cond=Cash,}, {code=2884, direction=Buy, quantity=2, price=26.03, pnl=-913, yd_quantity=2, cond=Cash,} ] Attributes: Name Type Description code str contract id direction Action Buy, Sell quantity int quantity price float the average price pnl float unrealized profit yd_quantity int yesterday cond StockOrderCond Cash(\u73fe\u80a1), Netting(\u9918\u984d\u4ea4\u5272), MarginTrading(\u878d\u8cc7), ShortSelling(\u878d\u5238), Emerging(\u8208\u6ac3)","title":"Stocks"},{"location":"tutor/accounting/profit_loss/","text":"Query account of profit loss First, you need login. \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2021-03-01\" , end_date : \"2021-03-31\" ); Console . WriteLine ( listProfitLoss ); Out [ {id=0, code=2031, seqno=21272, dseq=ID884, quantity=1, price=40.3, pnl=191, pr_ratio=0.0048, cond=Cash, date=2021-03-15,}, {id=1, code=2338, seqno=28141, dseq=IM045, quantity=1, price=54.1, pnl=-1616, pr_ratio=-0.0291, cond=Cash, date=2021-03-16,} ] Attributes: Name Type Description id int use to find detail code str contract id seqno str seqno no dseq str seqno no quantity int quantity price float price pnl float profit and loss pr_ratio float profit rate cond StockOrderCond Cash, Netting, MarginTrading, ShortSelling date str trade date","title":"Profit Loss"},{"location":"tutor/accounting/profit_loss/#first-you-need-login","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var listProfitLoss = _api . ListProfitLoss ( begin_date : \"2021-03-01\" , end_date : \"2021-03-31\" ); Console . WriteLine ( listProfitLoss ); Out [ {id=0, code=2031, seqno=21272, dseq=ID884, quantity=1, price=40.3, pnl=191, pr_ratio=0.0048, cond=Cash, date=2021-03-15,}, {id=1, code=2338, seqno=28141, dseq=IM045, quantity=1, price=54.1, pnl=-1616, pr_ratio=-0.0291, cond=Cash, date=2021-03-16,} ] Attributes: Name Type Description id int use to find detail code str contract id seqno str seqno no dseq str seqno no quantity int quantity price float price pnl float profit and loss pr_ratio float profit rate cond StockOrderCond Cash, Netting, MarginTrading, ShortSelling date str trade date","title":"First, you need login."},{"location":"tutor/accounting/profit_loss_detail/","text":"Query account of profit loss detail First, you need get profit loss. \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var listProfitLossDetail = _api . ListProfitLossDetail ( detail_id : 1 ); Console . WriteLine ( listProfitLossDetail ); Out [ { date=2021-03-11, cond=Cash, code=2031, quantity=1, price=39.95, cost=39969, dseq=IN383, rep_margintrading_amt=0, rep_collateral=0, rep_margin=0, fee=19, interest=0, tax=0, shortselling_fee=0, currency=NTD, trade_type=Common, } ] Attributes: Name Type Description date str trade date cond StockOrderCond Cash, Netting, MarginTrading, ShortSelling code str contract id quantity int quantity price float price cost int cost of price dseq str detail seqno no rep_margintrading_amt int repay amount of margin trading rep_collateral int repay collateral rep_margin int repay margin fee int fee interest int interest tax str trading tax shortselling_fee int fee of short selling currency str NTD, USD, HKD, EUR, CAD, BAS","title":"Profit Loss Detail"},{"location":"tutor/accounting/profit_loss_detail/#first-you-need-get-profit-loss","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var listProfitLossDetail = _api . ListProfitLossDetail ( detail_id : 1 ); Console . WriteLine ( listProfitLossDetail ); Out [ { date=2021-03-11, cond=Cash, code=2031, quantity=1, price=39.95, cost=39969, dseq=IN383, rep_margintrading_amt=0, rep_collateral=0, rep_margin=0, fee=19, interest=0, tax=0, shortselling_fee=0, currency=NTD, trade_type=Common, } ] Attributes: Name Type Description date str trade date cond StockOrderCond Cash, Netting, MarginTrading, ShortSelling code str contract id quantity int quantity price float price cost int cost of price dseq str detail seqno no rep_margintrading_amt int repay amount of margin trading rep_collateral int repay collateral rep_margin int repay margin fee int fee interest int interest tax str trading tax shortselling_fee int fee of short selling currency str NTD, USD, HKD, EUR, CAD, BAS","title":"First, you need get profit loss."},{"location":"tutor/accounting/settlement/","text":"Query stock account of settlements First, you need login. \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var settlement = _api . ListSettlements (); Console . WriteLine ( settlement . ToString ()); Out [{ t_money=0, t1_money=0, t2_money=0, t_day=2022-07-27, t1_day=2022-07-28, t2_day=2022-07-29, }] Attributes: Name Type Description t_money float T settlement t1_money float T + 1 settlement t2_money float T + 2 settlement t_day str T t1_day str T + 1 t2_day str T + 2","title":"Settlement"},{"location":"tutor/accounting/settlement/#first-you-need-login","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var settlement = _api . ListSettlements (); Console . WriteLine ( settlement . ToString ()); Out [{ t_money=0, t1_money=0, t2_money=0, t_day=2022-07-27, t1_day=2022-07-28, t2_day=2022-07-29, }] Attributes: Name Type Description t_money float T settlement t1_money float T + 1 settlement t2_money float T + 2 settlement t_day str T t1_day str T + 1 t2_day str T + 2","title":"First, you need login."},{"location":"tutor/advanced/nonblock/","text":"What is Non-blocking? \u00b6 First lets see what is Blocking? A function is blocking if it has to wait for something to complete. Yes, every function is blocking \u2014 no matter if you are doing I/O or doing CPU task. Everything takes some time. If a function is doing some task which is making the CPU work, then it is blocking the function from returning. Similarly, if a function is trying to get something from the database, then it is going to wait for the result to come and will block until then to continue the processing. Conversely, when you make a non-blocking operation, it will never wait for the operation to complete. Non-blocking mode is extreamly useful if you try to send a bulk orders in a short period of time. To make you understand what's diffenrence between blocking and non-block mode, we show you examples of comparison. Shioaji Blocking & Non-blocking Mode \u00b6 Shioaji provides blocking and non-blocking mode, by simply changing the value of timeout. Default value of timeout is 5000 (ms) which means the function will wait for the response up to 5 seconds. If the execution time exceeds 5 seconds, the function will raise error. However, some api function like tick may takes more than 5 seconds. At this circumstance, just scale up timeout or use non-blocking mode by setting the timeout = 0 . Non-Blocking Place Order \u00b6 To submit order in non-blocking mode is easy, just set timeout = 0 in place_order function. In IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var stockOrder = new StockOrder () { price = 16.4 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"914\" }; var trade = new Trade (); trade = _api . PlaceOrder ( contract : contract , order : stockOrder , timeout : 0 , cb : order_cb ); Console . WriteLine ( trade ); Out { contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 09 / 26 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 , }, order ={ action = Buy , price = 15.7 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , account ={ account_type = S , person_id = PERSON_ID , broker_id = BROKER_ID , account_id = ACCOUNT_ID , signed = True , username = USERNAME , }, custom_field = test , ca =, }, status ={ status = Inactive , order_ts = 0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } Note that the Trade object is different from the one we get from blocking mode. First, there is no id and seqno in Order. Second, id , status code , order_datetime and deals are missing in OrderStatus. Finally, status is Inactive . That's because we hadn't really send the order to exchange. The order is still in transmission. Of course we know nothing about this order. Then it comes to a problem, how do we know this order is successfully submitted? We offer you two kinds of methods, order event callback and non-blocking place order callback . Order event callback \u00b6 Out OrderState . TFTOrder { \"operation\" : { \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" : { \"id\" : \"8bbe0c24\" , \"seqno\" : \"612978\" , \"ordno\" : \"IB919\" , \"account\" : { \"account_type\" : \"S\" , \"person_id\" : \"PERSON_ID\" , \"broker_id\" : \"BROKER_ID\" , \"account_id\" : \"ACCOUNT_ID\" , \"signed\" : true }, \"action\" : \"Buy\" , \"price\" : 15.7 , \"quantity\" : 1 , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"order_cond\" : \"Cash\" , \"order_lot\" : \"Common\" , \"custom_field\" : \"914\" }, \"status\" : { \"id\" : \"8bbe0c24\" , \"exchange_ts\" : 1664152597 , \"modified_price\" : 0 , \"cancel_quantity\" : 0 , \"order_quantity\" : 1 , \"web_id\" : \"137\" }, \"contract\" : { \"security_type\" : \"STK\" , \"exchange\" : \"TSE\" , \"code\" : \"2890\" , \"symbol\" : \"\" , \"name\" : \"\" , \"currency\" : \"TWD\" } } Non-blocking place order callback \u00b6 In private static void PlaceOrder ( Shioaji _api ) { IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var stockOrder = new StockOrder () { price = 15.7 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; var trade = _api . PlaceOrder ( contract : contract , order : stockOrder , timeout : 0 , cb : order_cb // only work in non-blocking mode ); } private static void order_cb ( Trade trade ) { Console . WriteLine ( $ \"MY_ORDER_CB: {trade}\" ); } Out: place order callback MY_ORDER_CB : { contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 09 / 26 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 , }, order ={ action = Buy , price = 15.7 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = 8 bbe0c24 , seqno = 612978 , ordno = IB919 , account ={ account_type = S , person_id = PERSON_ID , broker_id = BROKER_ID , account_id = ACCOUNT_ID , signed = True , username = USERNAME , }, custom_field = test , ca =, }, status ={ id = 8 bbe0c24 , status = PendingSubmit , status_code = 0 , order_ts = 1664152597 , msg = \u59d4\u8a17\u6210\u529f , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, }","title":"None Block & Block Mode"},{"location":"tutor/advanced/nonblock/#what-is-non-blocking","text":"First lets see what is Blocking? A function is blocking if it has to wait for something to complete. Yes, every function is blocking \u2014 no matter if you are doing I/O or doing CPU task. Everything takes some time. If a function is doing some task which is making the CPU work, then it is blocking the function from returning. Similarly, if a function is trying to get something from the database, then it is going to wait for the result to come and will block until then to continue the processing. Conversely, when you make a non-blocking operation, it will never wait for the operation to complete. Non-blocking mode is extreamly useful if you try to send a bulk orders in a short period of time. To make you understand what's diffenrence between blocking and non-block mode, we show you examples of comparison.","title":"What is Non-blocking?"},{"location":"tutor/advanced/nonblock/#shioaji-blocking-non-blocking-mode","text":"Shioaji provides blocking and non-blocking mode, by simply changing the value of timeout. Default value of timeout is 5000 (ms) which means the function will wait for the response up to 5 seconds. If the execution time exceeds 5 seconds, the function will raise error. However, some api function like tick may takes more than 5 seconds. At this circumstance, just scale up timeout or use non-blocking mode by setting the timeout = 0 .","title":"Shioaji Blocking &amp; Non-blocking Mode"},{"location":"tutor/advanced/nonblock/#non-blocking-place-order","text":"To submit order in non-blocking mode is easy, just set timeout = 0 in place_order function. In IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var stockOrder = new StockOrder () { price = 16.4 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"914\" }; var trade = new Trade (); trade = _api . PlaceOrder ( contract : contract , order : stockOrder , timeout : 0 , cb : order_cb ); Console . WriteLine ( trade ); Out { contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 09 / 26 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 , }, order ={ action = Buy , price = 15.7 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , account ={ account_type = S , person_id = PERSON_ID , broker_id = BROKER_ID , account_id = ACCOUNT_ID , signed = True , username = USERNAME , }, custom_field = test , ca =, }, status ={ status = Inactive , order_ts = 0 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } Note that the Trade object is different from the one we get from blocking mode. First, there is no id and seqno in Order. Second, id , status code , order_datetime and deals are missing in OrderStatus. Finally, status is Inactive . That's because we hadn't really send the order to exchange. The order is still in transmission. Of course we know nothing about this order. Then it comes to a problem, how do we know this order is successfully submitted? We offer you two kinds of methods, order event callback and non-blocking place order callback .","title":"Non-Blocking Place Order"},{"location":"tutor/advanced/nonblock/#order-event-callback","text":"Out OrderState . TFTOrder { \"operation\" : { \"op_type\" : \"New\" , \"op_code\" : \"00\" , \"op_msg\" : \"\" }, \"order\" : { \"id\" : \"8bbe0c24\" , \"seqno\" : \"612978\" , \"ordno\" : \"IB919\" , \"account\" : { \"account_type\" : \"S\" , \"person_id\" : \"PERSON_ID\" , \"broker_id\" : \"BROKER_ID\" , \"account_id\" : \"ACCOUNT_ID\" , \"signed\" : true }, \"action\" : \"Buy\" , \"price\" : 15.7 , \"quantity\" : 1 , \"order_type\" : \"ROD\" , \"price_type\" : \"LMT\" , \"order_cond\" : \"Cash\" , \"order_lot\" : \"Common\" , \"custom_field\" : \"914\" }, \"status\" : { \"id\" : \"8bbe0c24\" , \"exchange_ts\" : 1664152597 , \"modified_price\" : 0 , \"cancel_quantity\" : 0 , \"order_quantity\" : 1 , \"web_id\" : \"137\" }, \"contract\" : { \"security_type\" : \"STK\" , \"exchange\" : \"TSE\" , \"code\" : \"2890\" , \"symbol\" : \"\" , \"name\" : \"\" , \"currency\" : \"TWD\" } }","title":"Order event callback"},{"location":"tutor/advanced/nonblock/#non-blocking-place-order-callback","text":"In private static void PlaceOrder ( Shioaji _api ) { IContract contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var stockOrder = new StockOrder () { price = 15.7 , quantity = 1 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; var trade = _api . PlaceOrder ( contract : contract , order : stockOrder , timeout : 0 , cb : order_cb // only work in non-blocking mode ); } private static void order_cb ( Trade trade ) { Console . WriteLine ( $ \"MY_ORDER_CB: {trade}\" ); } Out: place order callback MY_ORDER_CB : { contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 19.1 , limit_down = 15.7 , reference = 17.4 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 09 / 26 , category = 17 , day_trade = Yes , name = \u6c38\u8c50\u91d1 , }, order ={ action = Buy , price = 15.7 , quantity = 1 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = 8 bbe0c24 , seqno = 612978 , ordno = IB919 , account ={ account_type = S , person_id = PERSON_ID , broker_id = BROKER_ID , account_id = ACCOUNT_ID , signed = True , username = USERNAME , }, custom_field = test , ca =, }, status ={ id = 8 bbe0c24 , status = PendingSubmit , status_code = 0 , order_ts = 1664152597 , msg = \u59d4\u8a17\u6210\u529f , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, }","title":"Non-blocking place order callback"},{"location":"tutor/advanced/touchorder/","text":"Touch Price Order \u00b6 Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touchorder"},{"location":"tutor/advanced/touchorder/#touch-price-order","text":"Here is a simple example that how to build your price monitor and when price touches the condition will place the order. from pydantic import BaseModel class TouchOrderCond ( BaseModel ): contract : Contract order : Order touch_price : float class TouchOrder : def __init__ ( self , api : sj . Shioaji , condition : TouchOrderCond ): self . flag = False self . api = api self . order = condition . order self . contract = condition . contract self . touch_price = condition . touch_price self . api . quote . subscribe ( self . contract ) self . api . quote . set_quote_callback ( self . touch ) def touch ( self , topic , quote ): price = quote [ \"Close\" ][ 0 ] if price == self . touch_price and not self . flag : self . flag = True self . api . place_order ( self . contract , self . order ) self . api . quote . unsubscribe ( self . contract ) Complete TouchPrice Order Extention can be found here.","title":"Touch Price Order"},{"location":"tutor/market_data/credit_enquires/","text":"First, you need login. \u00b6 Get Credit Enquires \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); List < dynamic > creditEnquire = _api . CreditEnquire ( contracts ); Console . WriteLine ( creditEnquire . ToString ()); Out [ {update_time=2021-01-05 10:43:36, system=HE, stock_id=2330, margin_unit=1290, short_unit=24,}, {update_time=2021-01-05 11:13:40, system=HC, stock_id=2330, margin_unit=1252, short_unit=25,}, {update_time=2021-01-05 10:56:10, system=HN, stock_id=2330, margin_unit=1315, short_unit=24,}, {update_time=2021-01-05 10:56:11, system=HF, stock_id=2330, margin_unit=1315, short_unit=24,}, {update_time=2021-01-05 10:11:56, system=HE, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2020-12-30 12:53:36, system=HN, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2021-01-04 10:45:06, system=HF, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2020-12-30 10:04:14, system=HC, stock_id=2890, margin_unit=0, short_unit=0,} ] Attributes: Name Type Description update_time str update time system str system stock_id str stock id margin_unit int margin unit id short_unit int short unit id","title":"Credit Enquires"},{"location":"tutor/market_data/credit_enquires/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/market_data/credit_enquires/#get-credit-enquires","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); List < dynamic > creditEnquire = _api . CreditEnquire ( contracts ); Console . WriteLine ( creditEnquire . ToString ()); Out [ {update_time=2021-01-05 10:43:36, system=HE, stock_id=2330, margin_unit=1290, short_unit=24,}, {update_time=2021-01-05 11:13:40, system=HC, stock_id=2330, margin_unit=1252, short_unit=25,}, {update_time=2021-01-05 10:56:10, system=HN, stock_id=2330, margin_unit=1315, short_unit=24,}, {update_time=2021-01-05 10:56:11, system=HF, stock_id=2330, margin_unit=1315, short_unit=24,}, {update_time=2021-01-05 10:11:56, system=HE, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2020-12-30 12:53:36, system=HN, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2021-01-04 10:45:06, system=HF, stock_id=2890, margin_unit=0, short_unit=0,}, {update_time=2020-12-30 10:04:14, system=HC, stock_id=2890, margin_unit=0, short_unit=0,} ] Attributes: Name Type Description update_time str update time system str system stock_id str stock id margin_unit int margin unit id short_unit int short unit id","title":"Get Credit Enquires"},{"location":"tutor/market_data/historical/","text":"Ticks Data \u00b6 First, you need login. \u00b6 Get ticks all day \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-02-24\" ); Console . WriteLine ( ticks ); Out Ticks ( ts =[ 1614157201843172000 , 1614157201883723000 , 1614157201890433000 , 1614157201915257000 , 1614157201928901000 ], close =[ 627 , 627 , 627 , 628 , 628 ], volume =[ 4507 , 133 , 2 , 1 , 5 ], bid_price =[ 627 , 627 , 627 , 627 , 627 ], bid_volume =[ 324 , 324 , 324 , 324 , 324 ], ask_price =[ 628 , 628 , 628 , 628 , 628 ], ask_volume =[ 261 , 261 , 261 , 261 , 261 ] ) Ticks to DataFrame \u00b6 In using System ; using Sinopac.Shioaji ; using Microsoft.Data.Analysis ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-02-24\" ); var volume = new PrimitiveDataFrameColumn < long >( \"volume\" , ticks . volume . ToList ()); var close = new PrimitiveDataFrameColumn < double >( \"close\" , ticks . close . ToList ()); var ts = new PrimitiveDataFrameColumn < long >( \"ts\" , ticks . ts . ToList ()); var bid_price = new PrimitiveDataFrameColumn < double >( \"bid_price\" , ticks . bid_price . ToList ()); var bid_volume = new PrimitiveDataFrameColumn < long >( \"bid_volume\" , ticks . bid_volume . ToList ()); var ask_price = new PrimitiveDataFrameColumn < double >( \"ask_price\" , ticks . ask_price . ToList ()); var ask_volume = new PrimitiveDataFrameColumn < long >( \"ask_volume\" , ticks . ask_volume . ToList ()); var df_ticks = new DataFrame ( ts , volume , close , bid_price , bid_volume , ask_price , ask_volume ); Console . WriteLine ( df_ticks ); Out ts ask_volume ask_price close bid_price bid_volume volume 0 1614157201843172000 261 628 627 627 324 4507 1 1614157201883723000 261 628 627 627 324 133 2 1614157201890433000 261 628 627 627 324 2 3 1614157201915257000 261 628 628 627 324 1 4 1614157201928901000 261 628 628 627 324 5 KBar Data \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-09-13\" ); Console . WriteLine ( ticks ); Out Kbars ( ts =[ 1631523660000000000 , 1631523720000000000 , 1631523780000000000 , 1631523840000000000 , 1631523900000000000 ], Open =[ 619 , 617 , 618 , 619 , 619 ], High =[ 619 , 618 , 619 , 619 , 620 ], Low =[ 617 , 617 , 617 , 619 , 619 ], Close =[ 618 , 618 , 619 , 619 , 620 ], Volume =[ 1085 , 109 , 100 , 98 , 63 ], Amount =[ 671407000 , 67325000 , 61817000 , 60662000 , 39031000 ], ) In using System ; using Sinopac.Shioaji ; using Microsoft.Data.Analysis ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Kbars kbars = _api . Kbars ( contract , \"2021-09-13\" , \"2021-09-13\" ); var ts = new PrimitiveDataFrameColumn < long >( \"ts\" , kbars . ts . ToList ()); var open = new PrimitiveDataFrameColumn < double >( \"Open\" , kbars . Open . ToList ()); var high = new PrimitiveDataFrameColumn < double >( \"High\" , kbars . High . ToList ()); var low = new PrimitiveDataFrameColumn < double >( \"Low\" , kbars . Low . ToList ()); var close = new PrimitiveDataFrameColumn < double >( \"Close\" , kbars . Close . ToList ()); var volume = new PrimitiveDataFrameColumn < long >( \"Volume\" , kbars . Volume . ToList ()); var amount = new PrimitiveDataFrameColumn < double >( \"Amount\" , kbars . Amount . ToList ()); var employeesDf = new DataFrame ( ts , open , high , low , close , volume , amount ); Console . WriteLine ( employeesDf ); Out ts Open High Low Close Volume Amount 0 1631523660000000000 619 619 617 618 1085 671407000 1 1631523720000000000 617 618 617 618 109 67325000 2 1631523780000000000 618 619 617 619 100 61817000 3 1631523840000000000 619 619 619 619 98 60662000 4 1631523900000000000 619 620 619 620 63 39031000","title":"Historical Market Data"},{"location":"tutor/market_data/historical/#ticks-data","text":"","title":"Ticks Data"},{"location":"tutor/market_data/historical/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/market_data/historical/#get-ticks-all-day","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-02-24\" ); Console . WriteLine ( ticks ); Out Ticks ( ts =[ 1614157201843172000 , 1614157201883723000 , 1614157201890433000 , 1614157201915257000 , 1614157201928901000 ], close =[ 627 , 627 , 627 , 628 , 628 ], volume =[ 4507 , 133 , 2 , 1 , 5 ], bid_price =[ 627 , 627 , 627 , 627 , 627 ], bid_volume =[ 324 , 324 , 324 , 324 , 324 ], ask_price =[ 628 , 628 , 628 , 628 , 628 ], ask_volume =[ 261 , 261 , 261 , 261 , 261 ] )","title":"Get ticks all day"},{"location":"tutor/market_data/historical/#ticks-to-dataframe","text":"In using System ; using Sinopac.Shioaji ; using Microsoft.Data.Analysis ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-02-24\" ); var volume = new PrimitiveDataFrameColumn < long >( \"volume\" , ticks . volume . ToList ()); var close = new PrimitiveDataFrameColumn < double >( \"close\" , ticks . close . ToList ()); var ts = new PrimitiveDataFrameColumn < long >( \"ts\" , ticks . ts . ToList ()); var bid_price = new PrimitiveDataFrameColumn < double >( \"bid_price\" , ticks . bid_price . ToList ()); var bid_volume = new PrimitiveDataFrameColumn < long >( \"bid_volume\" , ticks . bid_volume . ToList ()); var ask_price = new PrimitiveDataFrameColumn < double >( \"ask_price\" , ticks . ask_price . ToList ()); var ask_volume = new PrimitiveDataFrameColumn < long >( \"ask_volume\" , ticks . ask_volume . ToList ()); var df_ticks = new DataFrame ( ts , volume , close , bid_price , bid_volume , ask_price , ask_volume ); Console . WriteLine ( df_ticks ); Out ts ask_volume ask_price close bid_price bid_volume volume 0 1614157201843172000 261 628 627 627 324 4507 1 1614157201883723000 261 628 627 627 324 133 2 1614157201890433000 261 628 627 627 324 2 3 1614157201915257000 261 628 628 627 324 1 4 1614157201928901000 261 628 628 627 324 5","title":"Ticks to DataFrame"},{"location":"tutor/market_data/historical/#kbar-data","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Ticks ticks = _api . Ticks ( contract , \"2021-09-13\" ); Console . WriteLine ( ticks ); Out Kbars ( ts =[ 1631523660000000000 , 1631523720000000000 , 1631523780000000000 , 1631523840000000000 , 1631523900000000000 ], Open =[ 619 , 617 , 618 , 619 , 619 ], High =[ 619 , 618 , 619 , 619 , 620 ], Low =[ 617 , 617 , 617 , 619 , 619 ], Close =[ 618 , 618 , 619 , 619 , 620 ], Volume =[ 1085 , 109 , 100 , 98 , 63 ], Amount =[ 671407000 , 67325000 , 61817000 , 60662000 , 39031000 ], ) In using System ; using Sinopac.Shioaji ; using Microsoft.Data.Analysis ; Shioaji _api = new Shioaji (); var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]; Kbars kbars = _api . Kbars ( contract , \"2021-09-13\" , \"2021-09-13\" ); var ts = new PrimitiveDataFrameColumn < long >( \"ts\" , kbars . ts . ToList ()); var open = new PrimitiveDataFrameColumn < double >( \"Open\" , kbars . Open . ToList ()); var high = new PrimitiveDataFrameColumn < double >( \"High\" , kbars . High . ToList ()); var low = new PrimitiveDataFrameColumn < double >( \"Low\" , kbars . Low . ToList ()); var close = new PrimitiveDataFrameColumn < double >( \"Close\" , kbars . Close . ToList ()); var volume = new PrimitiveDataFrameColumn < long >( \"Volume\" , kbars . Volume . ToList ()); var amount = new PrimitiveDataFrameColumn < double >( \"Amount\" , kbars . Amount . ToList ()); var employeesDf = new DataFrame ( ts , open , high , low , close , volume , amount ); Console . WriteLine ( employeesDf ); Out ts Open High Low Close Volume Amount 0 1631523660000000000 619 619 617 618 1085 671407000 1 1631523720000000000 617 618 617 618 109 67325000 2 1631523780000000000 618 619 617 619 100 61817000 3 1631523840000000000 619 619 619 619 98 60662000 4 1631523900000000000 619 620 619 620 63 39031000","title":"KBar Data"},{"location":"tutor/market_data/scanners/","text":"First, you need login. \u00b6 Scanners can use enum of ScannerType to get the rank of ChangePercent , ChangePrice , DayRange , VolumeRank and AmountRank . In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var scanners_amount = _api . Scanners ( scannerType : ScannerType . AmountRank , ascending : true , date : \"2022-05-25\" , count : 2 ); Console . WriteLine ( scanners_amount ); Out [ { date=2022-05-25, code=2330, name=\u53f0\u7a4d\u96fb, ts=1653489000000000000, open=522, high=529, low=520, close=524, price_range=9, tick_type=2, change_price=4, change_type=2, average_price=524.6, volume=41, total_volume=22176, amount=21484000, total_amount=11633535900, yesterday_volume=17802, volume_ratio=1.25, buy_price=524, buy_volume=691, sell_price=525, sell_volume=126, bid_orders=3363, bid_volumes=216046, ask_orders=1935, ask_volumes=436783, }, { date=2022-05-25, code=2603, name=\u9577\u69ae, ts=1653489000000000000, open=144.5, high=146, low=141.5, close=143, price_range=4.5, tick_type=2, change_price=1, change_type=2, average_price=143.23, volume=375, total_volume=68912, amount=53625000, total_amount=9870037033, yesterday_volume=93318, volume_ratio=0.74, buy_price=143, buy_volume=20, sell_price=143.5, sell_volume=1949, bid_orders=5585, bid_volumes=536602, ask_orders=4791, ask_volumes=254559, } ]","title":"Scanners"},{"location":"tutor/market_data/scanners/#first-you-need-login","text":"Scanners can use enum of ScannerType to get the rank of ChangePercent , ChangePrice , DayRange , VolumeRank and AmountRank . In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var scanners_amount = _api . Scanners ( scannerType : ScannerType . AmountRank , ascending : true , date : \"2022-05-25\" , count : 2 ); Console . WriteLine ( scanners_amount ); Out [ { date=2022-05-25, code=2330, name=\u53f0\u7a4d\u96fb, ts=1653489000000000000, open=522, high=529, low=520, close=524, price_range=9, tick_type=2, change_price=4, change_type=2, average_price=524.6, volume=41, total_volume=22176, amount=21484000, total_amount=11633535900, yesterday_volume=17802, volume_ratio=1.25, buy_price=524, buy_volume=691, sell_price=525, sell_volume=126, bid_orders=3363, bid_volumes=216046, ask_orders=1935, ask_volumes=436783, }, { date=2022-05-25, code=2603, name=\u9577\u69ae, ts=1653489000000000000, open=144.5, high=146, low=141.5, close=143, price_range=4.5, tick_type=2, change_price=1, change_type=2, average_price=143.23, volume=375, total_volume=68912, amount=53625000, total_amount=9870037033, yesterday_volume=93318, volume_ratio=0.74, buy_price=143, buy_volume=20, sell_price=143.5, sell_volume=1949, bid_orders=5585, bid_volumes=536602, ask_orders=4791, ask_volumes=254559, } ]","title":"First, you need login."},{"location":"tutor/market_data/short_stock_source/","text":"First, you need login. \u00b6 Get Short Stock Source \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var contracts = new List < Stock >(); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); List < dynamic > shortStockSources = _api . ShortStockSources ( contracts ); Console . WriteLine ( shortStockSources . ToString ()); Out [ {ts=1658823433000000000, code=2890, short_stock_source=493840,}, {ts=1658823433000000000, code=2330, short_stock_source=56602,} ] Attributes: Name Type Description code str contract id short_stock_source float \u6216\u6709\u5238\u5f35\u6578 ts int timestamp","title":"Short Stock Source"},{"location":"tutor/market_data/short_stock_source/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/market_data/short_stock_source/#get-short-stock-source","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var contracts = new List < Stock >(); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); List < dynamic > shortStockSources = _api . ShortStockSources ( contracts ); Console . WriteLine ( shortStockSources . ToString ()); Out [ {ts=1658823433000000000, code=2890, short_stock_source=493840,}, {ts=1658823433000000000, code=2330, short_stock_source=56602,} ] Attributes: Name Type Description code str contract id short_stock_source float \u6216\u6709\u5238\u5f35\u6578 ts int timestamp","title":"Get Short Stock Source"},{"location":"tutor/market_data/snapshot/","text":"Snapshot is a present stock, future, option info. It contain open, high, low, close, change price, average price, volume, total volume, buy price, buy volume, sell price, sell volume and yestoday volume. First, you need login. \u00b6 Get Snapshot \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var contracts = new List < Stock >(); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); List < dynamic > snapshot = _api . Snapshots ( contracts ); Console . WriteLine ( snapshot . ToString ()); Out [ { ts=1656935843384000000, code=2890, exchange=TSE, open=16.65, high=17, low=16.55, close=16.55, tick_type=Sell, change_price=-0.1, change_rate=-0.6, change_type=Down, average_price=16.75, volume=0, total_volume=12447, amount=16550, total_amount=208451300, yesterday_volume=0, buy_price=15.9, buy_volume=247, sell_price=15.95, sell_volume=404, volume_ratio=0, }, { ts=1656935843079000000, code=2330, exchange=TSE, open=443, high=451.5, low=443, close=445.5, tick_type=Buy, change_price=-8, change_rate=-1.76, change_type=Down, average_price=446.65, volume=0, total_volume=32523, amount=445500, total_amount=14526383500, yesterday_volume=0, buy_price=495, buy_volume=484, sell_price=495.5, sell_volume=12, volume_ratio=0, } ] Attributes: Name Type Description ts long TimeStamp code str Contract id exchange Exchange Attributes of industry open double open high double high low double low close double close tick_type TickType None, Buy, Sell change_price double change price change_rate double change rate change_type ChangeType LimitUp, Up, Unchanged, Dowm, LimitDown avgerage_price double avgerage of price volume long volume total_volume long total volume amount long deal amount total_amount long total deal amount yestoday_volume str volume of yestoday buy_price double price of buy buy_volume double volume of sell sell_price double price of sell sell_volume long volume of sell volume_ratio double total_volume/yestoday_volume","title":"Snapshot"},{"location":"tutor/market_data/snapshot/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/market_data/snapshot/#get-snapshot","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var contracts = new List < Stock >(); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]); contracts . Add ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ]); List < dynamic > snapshot = _api . Snapshots ( contracts ); Console . WriteLine ( snapshot . ToString ()); Out [ { ts=1656935843384000000, code=2890, exchange=TSE, open=16.65, high=17, low=16.55, close=16.55, tick_type=Sell, change_price=-0.1, change_rate=-0.6, change_type=Down, average_price=16.75, volume=0, total_volume=12447, amount=16550, total_amount=208451300, yesterday_volume=0, buy_price=15.9, buy_volume=247, sell_price=15.95, sell_volume=404, volume_ratio=0, }, { ts=1656935843079000000, code=2330, exchange=TSE, open=443, high=451.5, low=443, close=445.5, tick_type=Buy, change_price=-8, change_rate=-1.76, change_type=Down, average_price=446.65, volume=0, total_volume=32523, amount=445500, total_amount=14526383500, yesterday_volume=0, buy_price=495, buy_volume=484, sell_price=495.5, sell_volume=12, volume_ratio=0, } ] Attributes: Name Type Description ts long TimeStamp code str Contract id exchange Exchange Attributes of industry open double open high double high low double low close double close tick_type TickType None, Buy, Sell change_price double change price change_rate double change rate change_type ChangeType LimitUp, Up, Unchanged, Dowm, LimitDown avgerage_price double avgerage of price volume long volume total_volume long total volume amount long deal amount total_amount long total deal amount yestoday_volume str volume of yestoday buy_price double price of buy buy_volume double volume of sell sell_price double price of sell sell_volume long volume of sell volume_ratio double total_volume/yestoday_volume","title":"Get Snapshot"},{"location":"tutor/market_data/streaming/futures/","text":"Subscribe \u00b6 To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe Signature: Subscribe ( IContract contract , QuoteType quoteType = QuoteType . tick , bool intradayOdd = false , QuoteVersion version = QuoteVersion . v0 , ) Quote Parameters: enum QuoteTyp { tick , bidask , quote } bool intraday_odd : { true , false } enum QuoteVersion : { v0 , v1 } Tick \u00b6 In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], quoteType : QuoteType . tick , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : TIC / v1 / FOP /*/ TFE / TXFJ2 | Event : SubscriptionOk Exchange . TAIFEX TickFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:22:31.966000\" , \"open\" : 12880.0 , \"underlying_price\" : 12810.73 , \"bid_side_total_vol\" : 5266 , \"ask_side_total_vol\" : 5255 , \"avg_price\" : 12865.525151 , \"close\" : 12868.0 , \"high\" : 12887.0 , \"low\" : 12842.0 , \"amount\" : 77208.0 , \"total_amount\" : 112792059.0 , \"volume\" : 6 , \"total_volume\" : 8767 , \"tick_type\" : 2 , \"chg_type\" : 4 , \"price_chg\" : - 1.0 , \"pct_chg\" : - 0.007771 , \"simtrade\" : false } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : L /*/ TXFJ2 | Event : SubscriptionOk L / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 17 : 30.246000 Open : 12880 TargetKindPrice : 12810.73 TradeBidVolSum : 5215 TradeAskVolSum : 5179 AvgPrice : [ 12865.489219 ] Close : [ 12870 ] High : [ 12887 ] Low : [ 12842 ] Amount : [ 25740 ] AmountSum : [ 111582388 ] Volume : [ 2 ] VolSum : [ 8673 ] TickType : [ 1 ] DiffType : [ 2 ] DiffPrice : [ 1 ] DiffRate : [ 0.007771 ] BidAsk \u00b6 In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], quoteType : QuoteType . bidask , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : QUO / v1 / FOP /*/ TFE / TXFJ2 | Event : SubscriptionOk Exchange . TAIFEX BidAskFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:27:31.856000\" , \"bid_total_vol\" : 79 , \"ask_total_vol\" : 98 , \"bid_price\" : [ \"12870\" , \"12869\" , \"12868\" , \"12867\" , \"12866\" ], \"bid_volume\" : [ 4 , 13 , 25 , 16 , 21 ], \"diff_bid_vol\" : [ - 10 , - 3 , - 6 , 5 , - 1 ], \"ask_price\" : [ \"12871\" , \"12872\" , \"12873\" , \"12874\" , \"12875\" ], \"ask_volume\" : [ 4 , 11 , 27 , 30 , 26 ], \"diff_ask_vol\" : [ - 2 , 1 , 13 , - 9 , 0 ], \"first_derived_bid_price\" : 12869.0 , \"first_derived_ask_price\" : 12873.0 , \"first_derived_bid_vol\" : 1 , \"first_derived_ask_vol\" : 2 , \"underlying_price\" : 12810.73 , \"simtrade\" : false } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : Q \uff0f */ TXFJ2 | Event : SubscriptionOk Q / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 29 : 41.356000 BidVolSum : 78 AskVolSum : 121 DiffBidVolSum : 0 DiffAskVolSum : 0 BidPrice : [ 12875 , 12874 , 12873 , 12872 , 12871 ] BidVolume : [ 1 , 10 , 20 , 33 , 14 ] DiffBidVol : [ 0 , 0 , 0 , 0 , 0 ] AskPrice : [ 12876 , 12877 , 12878 , 12879 , 12880 ] AskVolume : [ 9 , 15 , 41 , 24 , 32 ] DiffAskVol : [- 1 , 0 , 0 , 0 , 0 ] FirstDerivedBidPrice : 12872 FirstDerivedAskPrice : 12878 FirstDerivedBidVolume : 2 FirstDerivedAskVolume : 2 TargetKindPrice : 12810.73 Quote Callback \u00b6 In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function. Set Quote Callback \u00b6 In QuoteVersion.v1 public class Program { private static void myQuoteCB_v1 ( Exchange exchange , dynamic quote ) { Console . WriteLine ( $ \"QuoteCB_v1 | Exchange.{exchange} {quote.GetType().Name} {quote}\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . SetQuoteCallback_v1 ( myQuoteCB_v1 ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], QuoteType . bidask , version : QuoteVersion . v1 ); System . Threading . Thread . Sleep ( 5000 ); } } QuoteVersion.v0 public class Program { private static void myQuoteCB ( string topic , Dictionary < string , dynamic > msg ) { Console . WriteLine ( \"myQuoteCB | Topic: \" + topic ); foreach ( var item in msg ) { Console . WriteLine ( item . Key + \": \" + item . Value ); } Console . WriteLine ( \"-----------------------------------\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . SetQuoteCallback ( myQuoteCB ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], QuoteType . bidask , version : QuoteVersion . v0 ); System . Threading . Thread . Sleep ( 5000 ); } } Out QuoteVersion.v1 QuoteCB_v1 | Exchange . TAIFEX BidAskFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:36:58.481000\" , \"bid_total_vol\" : 92 , \"ask_total_vol\" : 99 , \"bid_price\" : [ \"12893\" , \"12892\" , \"12891\" , \"12890\" , \"12889\" ], \"bid_volume\" : [ 6 , 13 , 36 , 21 , 16 ], \"diff_bid_vol\" : [ - 5 , 0 , 5 , 0 , 0 ], \"ask_price\" : [ \"12894\" , \"12895\" , \"12896\" , \"12897\" , \"12898\" ], \"ask_volume\" : [ 1 , 12 , 33 , 24 , 29 ], \"diff_ask_vol\" : [ 0 , 0 , 5 , - 5 , 0 ], \"first_derived_bid_price\" : 12891.0 , \"first_derived_ask_price\" : 12897.0 , \"first_derived_bid_vol\" : 2 , \"first_derived_ask_vol\" : 7 , \"underlying_price\" : 12810.73 , \"simtrade\" : false } QuoteVersion.v0 myQuoteCB | Topic : Q / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 35 : 23.981000 BidVolSum : 91 AskVolSum : 108 DiffBidVolSum : 0 DiffAskVolSum : 0 BidPrice : [ 12890 , 12889 , 12888 , 12887 , 12886 ] BidVolume : [ 10 , 19 , 22 , 21 , 19 ] DiffBidVol : [ 1 , 0 , 0 , 0 , 0 ] AskPrice : [ 12892 , 12893 , 12894 , 12895 , 12896 ] AskVolume : [ 17 , 29 , 23 , 23 , 16 ] DiffAskVol : [- 1 , 0 , 0 , 0 , 0 ] FirstDerivedBidPrice : 12890 FirstDerivedAskPrice : 12894 FirstDerivedBidVolume : 51 FirstDerivedAskVolume : 2 TargetKindPrice : 12810.73","title":"Futures"},{"location":"tutor/market_data/streaming/futures/#subscribe","text":"To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe Signature: Subscribe ( IContract contract , QuoteType quoteType = QuoteType . tick , bool intradayOdd = false , QuoteVersion version = QuoteVersion . v0 , ) Quote Parameters: enum QuoteTyp { tick , bidask , quote } bool intraday_odd : { true , false } enum QuoteVersion : { v0 , v1 }","title":"Subscribe"},{"location":"tutor/market_data/streaming/futures/#tick","text":"In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], quoteType : QuoteType . tick , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : TIC / v1 / FOP /*/ TFE / TXFJ2 | Event : SubscriptionOk Exchange . TAIFEX TickFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:22:31.966000\" , \"open\" : 12880.0 , \"underlying_price\" : 12810.73 , \"bid_side_total_vol\" : 5266 , \"ask_side_total_vol\" : 5255 , \"avg_price\" : 12865.525151 , \"close\" : 12868.0 , \"high\" : 12887.0 , \"low\" : 12842.0 , \"amount\" : 77208.0 , \"total_amount\" : 112792059.0 , \"volume\" : 6 , \"total_volume\" : 8767 , \"tick_type\" : 2 , \"chg_type\" : 4 , \"price_chg\" : - 1.0 , \"pct_chg\" : - 0.007771 , \"simtrade\" : false } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : L /*/ TXFJ2 | Event : SubscriptionOk L / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 17 : 30.246000 Open : 12880 TargetKindPrice : 12810.73 TradeBidVolSum : 5215 TradeAskVolSum : 5179 AvgPrice : [ 12865.489219 ] Close : [ 12870 ] High : [ 12887 ] Low : [ 12842 ] Amount : [ 25740 ] AmountSum : [ 111582388 ] Volume : [ 2 ] VolSum : [ 8673 ] TickType : [ 1 ] DiffType : [ 2 ] DiffPrice : [ 1 ] DiffRate : [ 0.007771 ]","title":"Tick"},{"location":"tutor/market_data/streaming/futures/#bidask","text":"In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], quoteType : QuoteType . bidask , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : QUO / v1 / FOP /*/ TFE / TXFJ2 | Event : SubscriptionOk Exchange . TAIFEX BidAskFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:27:31.856000\" , \"bid_total_vol\" : 79 , \"ask_total_vol\" : 98 , \"bid_price\" : [ \"12870\" , \"12869\" , \"12868\" , \"12867\" , \"12866\" ], \"bid_volume\" : [ 4 , 13 , 25 , 16 , 21 ], \"diff_bid_vol\" : [ - 10 , - 3 , - 6 , 5 , - 1 ], \"ask_price\" : [ \"12871\" , \"12872\" , \"12873\" , \"12874\" , \"12875\" ], \"ask_volume\" : [ 4 , 11 , 27 , 30 , 26 ], \"diff_ask_vol\" : [ - 2 , 1 , 13 , - 9 , 0 ], \"first_derived_bid_price\" : 12869.0 , \"first_derived_ask_price\" : 12873.0 , \"first_derived_bid_vol\" : 1 , \"first_derived_ask_vol\" : 2 , \"underlying_price\" : 12810.73 , \"simtrade\" : false } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : Q \uff0f */ TXFJ2 | Event : SubscriptionOk Q / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 29 : 41.356000 BidVolSum : 78 AskVolSum : 121 DiffBidVolSum : 0 DiffAskVolSum : 0 BidPrice : [ 12875 , 12874 , 12873 , 12872 , 12871 ] BidVolume : [ 1 , 10 , 20 , 33 , 14 ] DiffBidVol : [ 0 , 0 , 0 , 0 , 0 ] AskPrice : [ 12876 , 12877 , 12878 , 12879 , 12880 ] AskVolume : [ 9 , 15 , 41 , 24 , 32 ] DiffAskVol : [- 1 , 0 , 0 , 0 , 0 ] FirstDerivedBidPrice : 12872 FirstDerivedAskPrice : 12878 FirstDerivedBidVolume : 2 FirstDerivedAskVolume : 2 TargetKindPrice : 12810.73","title":"BidAsk"},{"location":"tutor/market_data/streaming/futures/#quote-callback","text":"In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function.","title":"Quote Callback"},{"location":"tutor/market_data/streaming/futures/#set-quote-callback","text":"In QuoteVersion.v1 public class Program { private static void myQuoteCB_v1 ( Exchange exchange , dynamic quote ) { Console . WriteLine ( $ \"QuoteCB_v1 | Exchange.{exchange} {quote.GetType().Name} {quote}\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . SetQuoteCallback_v1 ( myQuoteCB_v1 ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], QuoteType . bidask , version : QuoteVersion . v1 ); System . Threading . Thread . Sleep ( 5000 ); } } QuoteVersion.v0 public class Program { private static void myQuoteCB ( string topic , Dictionary < string , dynamic > msg ) { Console . WriteLine ( \"myQuoteCB | Topic: \" + topic ); foreach ( var item in msg ) { Console . WriteLine ( item . Key + \": \" + item . Value ); } Console . WriteLine ( \"-----------------------------------\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . SetQuoteCallback ( myQuoteCB ); _api . Subscribe ( _api . Contracts . Futures [ \"TXF\" ][ \"TXF202210\" ], QuoteType . bidask , version : QuoteVersion . v0 ); System . Threading . Thread . Sleep ( 5000 ); } } Out QuoteVersion.v1 QuoteCB_v1 | Exchange . TAIFEX BidAskFOPv1 { \"code\" : \"TXFJ2\" , \"datetime\" : \"2022/10/13 16:36:58.481000\" , \"bid_total_vol\" : 92 , \"ask_total_vol\" : 99 , \"bid_price\" : [ \"12893\" , \"12892\" , \"12891\" , \"12890\" , \"12889\" ], \"bid_volume\" : [ 6 , 13 , 36 , 21 , 16 ], \"diff_bid_vol\" : [ - 5 , 0 , 5 , 0 , 0 ], \"ask_price\" : [ \"12894\" , \"12895\" , \"12896\" , \"12897\" , \"12898\" ], \"ask_volume\" : [ 1 , 12 , 33 , 24 , 29 ], \"diff_ask_vol\" : [ 0 , 0 , 5 , - 5 , 0 ], \"first_derived_bid_price\" : 12891.0 , \"first_derived_ask_price\" : 12897.0 , \"first_derived_bid_vol\" : 2 , \"first_derived_ask_vol\" : 7 , \"underlying_price\" : 12810.73 , \"simtrade\" : false } QuoteVersion.v0 myQuoteCB | Topic : Q / TFE / TXFJ2 Code : TXFJ2 Date : 2022 / 10 / 13 Time : 16 : 35 : 23.981000 BidVolSum : 91 AskVolSum : 108 DiffBidVolSum : 0 DiffAskVolSum : 0 BidPrice : [ 12890 , 12889 , 12888 , 12887 , 12886 ] BidVolume : [ 10 , 19 , 22 , 21 , 19 ] DiffBidVol : [ 1 , 0 , 0 , 0 , 0 ] AskPrice : [ 12892 , 12893 , 12894 , 12895 , 12896 ] AskVolume : [ 17 , 29 , 23 , 23 , 16 ] DiffAskVol : [- 1 , 0 , 0 , 0 , 0 ] FirstDerivedBidPrice : 12890 FirstDerivedAskPrice : 12894 FirstDerivedBidVolume : 51 FirstDerivedAskVolume : 2 TargetKindPrice : 12810.73","title":"Set Quote Callback"},{"location":"tutor/market_data/streaming/stocks/","text":"Subscribe \u00b6 To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe Signature: Subscribe ( IContract contract , QuoteType quoteType = QuoteType . tick , bool intradayOdd = false , QuoteVersion version = QuoteVersion . v0 , ) Quote Parameters: enum QuoteTyp { tick , bidask , quote } bool intraday_odd : { true , false } enum QuoteVersion : { v0 , v1 } Tick \u00b6 In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . tick , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE TickSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:24:22.500106\" , \"open\" : 414.5 , \"avg_price\" : 412.54 , \"close\" : 410.5 , \"high\" : 414.5 , \"low\" : 409.0 , \"amount\" : 821000.0 , \"total_amount\" : 6589192000.0 , \"volume\" : 2 , \"total_volume\" : 15972 , \"tick_type\" : 1 , \"chg_type\" : 2 , \"price_chg\" : 15.5 , \"pct_chg\" : 3.92 , \"bid_side_total_vol\" : 10146 , \"ask_side_total_vol\" : 5826 , \"bid_side_total_cnt\" : 1260 , \"ask_side_total_cnt\" : 2102 , \"closing_oddlot_shares\" : 0 , \"fixed_trade_vol\" : 0 , \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : MKT /*/ TSE / 2330 | Event : SubscriptionOk MKT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 21 : 02.418956 Close : [ 411 ] Volume : [ 1 ] VolSum : [ 15736 ] AmountSum : [ 6492300500 ] TickType : [ 1 ] Tick intraday odd \u00b6 In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . tick , intradayOdd : true , version : QuoteVersion . v1 ); Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE TickSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:26:02.545208\" , \"open\" : 411.0 , \"avg_price\" : 427.697026 , \"close\" : 410.0 , \"high\" : 411.0 , \"low\" : 410.0 , \"amount\" : 3491560.0 , \"total_amount\" : 87359256.0 , \"volume\" : 8516 , \"total_volume\" : 204255 , \"tick_type\" : 2 , \"chg_type\" : 2 , \"price_chg\" : 15.0 , \"pct_chg\" : 3.797468 , \"bid_side_total_vol\" : 163264 , \"ask_side_total_vol\" : 49507 , \"bid_side_total_cnt\" : 4 , \"ask_side_total_cnt\" : 3 , \"closing_oddlot_shares\" : 0 , \"fixed_trade_vol\" : 0 , \"suspend\" : false , \"simtrade\" : true , \"intraday_odd\" : true } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : SubscriptionOk TIC / v2 / replay / TSE / 2330 / ODDLOT Date : 2022 / 10 / 14 Time : 09 : 27 : 02.734685 Close : 410 TickType : 2 Shares : 12041 SharesSum : 204255 Simtrade : 1 BidAsk \u00b6 In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . bidask , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:31:05.066623\" , \"bid_price\" : [ \"410.5\" , \"410\" , \"409.5\" , \"409\" , \"408.5\" ], \"bid_volume\" : [ 22 , 357 , 101 , 171 , 89 ], \"diff_bid_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"ask_price\" : [ \"411\" , \"411.5\" , \"412\" , \"412.5\" , \"413\" ], \"ask_volume\" : [ 300 , 185 , 603 , 220 , 664 ], \"diff_ask_vol\" : [ - 1 , 0 , 0 , 0 , 0 ], \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUT \uff0f */ TSE / 2330 | Event : SubscriptionOk QUT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 32 : 15.316453 BidPrice : [ 410.5 , 410 , 409.5 , 409 , 408.5 ] AskPrice : [ 411 , 411.5 , 412 , 412.5 , 413 ] BidVolume : [ 91 , 338 , 218 , 161 , 89 ] AskVolume : [ 301 , 170 , 629 , 230 , 671 ] BidAsk intraday odd \u00b6 In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . bidask , intradayOdd : true , version : QuoteVersion . v1 ); Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:29:42.875584\" , \"bid_price\" : [ \"410\" , \"409.5\" , \"409\" , \"408.5\" , \"408\" ], \"bid_volume\" : [ 18 , 8840 , 62404 , 54036 , 11476 ], \"diff_bid_vol\" : [ 15319 , - 98508 , - 40662 , 52024 , 6716 ], \"ask_price\" : [ \"410.5\" , \"411\" , \"411.5\" , \"412\" , \"412.5\" ], \"ask_volume\" : [ 27978 , 44773 , 12908 , 126508 , 314258 ], \"diff_ask_vol\" : [ 14264 , - 15181 , - 87825 , - 124052 , 409216 ], \"suspend\" : false , \"simtrade\" : true , \"intraday_odd\" : true } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : SubscriptionOk QUO / v2 / replay / TSE / 2330 / ODDLOT Date : 2022 / 10 / 14 Time : 09 : 28 : 42.631677 BidPrice : [ 410 , 409.5 , 409 , 408.5 , 408 ] AskPrice : [ 410.5 , 411 , 411.5 , 412 , 412.5 ] BidShares : [ 2432 , 9465 , 10197 , 53906 , 11176 ] AskShares : [ 27317 , 43593 , 12812 , 126623 , 251203 ] Simtrade : 1 Quote \u00b6 In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . quote , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out Response Code : 0 | Event code : 16 | Info : QUO / v2 / STK \uff0f */ TSE / 2330 | Event : SubscriptionOk Exchange . TSE QuoteSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:34:34.158334\" , \"open\" : 414.5 , \"avg_price\" : 412.36 , \"close\" : 411.5 , \"high\" : 414.5 , \"low\" : 409.0 , \"amount\" : 411500.0 , \"total_amount\" : 7285720500.0 , \"volume\" : 0 , \"total_volume\" : 17668 , \"tick_type\" : 2 , \"chg_type\" : 2 , \"price_chg\" : 16.5 , \"pct_chg\" : 4.17 , \"bid_side_total_vol\" : 11425 , \"ask_side_total_vol\" : 6243 , \"bid_side_total_cnt\" : 1540 , \"ask_side_total_cnt\" : 2299 , \"closing_oddlot_shares\" : 0 , \"closing_oddlot_close\" : 0.0 , \"closing_oddlot_amount\" : 0.0 , \"closing_oddlot_bid_price\" : 0.0 , \"closing_oddlot_ask_price\" : 0.0 , \"fixed_trade_vol\" : 0 , \"fixed_trade_amount\" : 0.0 , \"bid_price\" : [ \"411.5\" , \"411\" , \"410.5\" , \"410\" , \"409.5\" ], \"bid_volume\" : [ 264 , 117 , 449 , 461 , 160 ], \"diff_bid_vol\" : [ 0 , - 22 , 0 , 0 , 0 ], \"ask_price\" : [ \"412\" , \"412.5\" , \"413\" , \"413.5\" , \"414\" ], \"ask_volume\" : [ 639 , 261 , 657 , 286 , 797 ], \"diff_ask_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"avail_borrowing\" : 3717809 , \"suspend\" : false , \"simtrade\" : false } Quote Callback \u00b6 In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function. Set Quote Callback \u00b6 In QuoteVersion.v1 public class Program { private static void myQuoteCB_v1 ( Exchange exchange , dynamic quote ) { Console . WriteLine ( $ \"QuoteCB_v1 | Exchange.{exchange} {quote.GetType().Name} {quote}\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . SetQuoteCallback_v1 ( myQuoteCB_v1 ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); System . Threading . Thread . Sleep ( 5000 ); } } QuoteVersion.v0 public class Program { private static void myQuoteCB ( string topic , Dictionary < string , dynamic > msg ) { Console . WriteLine ( $ \"myQuoteCB | Topic: {topic}\" ); foreach ( var item in msg ) { Console . WriteLine ( item . Key + \": \" + item . Value ); } Console . WriteLine ( \"-----------------------------------\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . SetQuoteCallback ( myQuoteCB ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); System . Threading . Thread . Sleep ( 5000 ); } } Out QuoteVersion.v1 QuoteCB_v1 | Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:39:00.354081\" , \"bid_price\" : [ \"411\" , \"410.5\" , \"410\" , \"409.5\" , \"409\" ], \"bid_volume\" : [ 577 , 191 , 364 , 185 , 148 ], \"diff_bid_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"ask_price\" : [ \"411.5\" , \"412\" , \"412.5\" , \"413\" , \"413.5\" ], \"ask_volume\" : [ 53 , 609 , 230 , 750 , 358 ], \"diff_ask_vol\" : [ - 4 , 0 , 0 , 0 , 0 ], \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } QuoteVersion.v0 myQuoteCB | Topic : QUT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 37 : 02.268206 BidPrice : [ 411 , 410.5 , 410 , 409.5 , 409 ] AskPrice : [ 411.5 , 412 , 412.5 , 413 , 413.5 ] BidVolume : [ 107 , 132 , 563 , 188 , 150 ] AskVolume : [ 34 , 592 , 258 , 675 , 299 ]","title":"Stocks"},{"location":"tutor/market_data/streaming/stocks/#subscribe","text":"To subscribe quotes is very easy, just call subscribe function with contract which we've discussed in previous topic. Subscribe Signature: Subscribe ( IContract contract , QuoteType quoteType = QuoteType . tick , bool intradayOdd = false , QuoteVersion version = QuoteVersion . v0 , ) Quote Parameters: enum QuoteTyp { tick , bidask , quote } bool intraday_odd : { true , false } enum QuoteVersion : { v0 , v1 }","title":"Subscribe"},{"location":"tutor/market_data/streaming/stocks/#tick","text":"In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . tick , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : TIC / v1 / STK /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE TickSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:24:22.500106\" , \"open\" : 414.5 , \"avg_price\" : 412.54 , \"close\" : 410.5 , \"high\" : 414.5 , \"low\" : 409.0 , \"amount\" : 821000.0 , \"total_amount\" : 6589192000.0 , \"volume\" : 2 , \"total_volume\" : 15972 , \"tick_type\" : 1 , \"chg_type\" : 2 , \"price_chg\" : 15.5 , \"pct_chg\" : 3.92 , \"bid_side_total_vol\" : 10146 , \"ask_side_total_vol\" : 5826 , \"bid_side_total_cnt\" : 1260 , \"ask_side_total_cnt\" : 2102 , \"closing_oddlot_shares\" : 0 , \"fixed_trade_vol\" : 0 , \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : MKT /*/ TSE / 2330 | Event : SubscriptionOk MKT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 21 : 02.418956 Close : [ 411 ] Volume : [ 1 ] VolSum : [ 15736 ] AmountSum : [ 6492300500 ] TickType : [ 1 ]","title":"Tick"},{"location":"tutor/market_data/streaming/stocks/#tick-intraday-odd","text":"In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . tick , intradayOdd : true , version : QuoteVersion . v1 ); Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : TIC / v1 / ODD /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE TickSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:26:02.545208\" , \"open\" : 411.0 , \"avg_price\" : 427.697026 , \"close\" : 410.0 , \"high\" : 411.0 , \"low\" : 410.0 , \"amount\" : 3491560.0 , \"total_amount\" : 87359256.0 , \"volume\" : 8516 , \"total_volume\" : 204255 , \"tick_type\" : 2 , \"chg_type\" : 2 , \"price_chg\" : 15.0 , \"pct_chg\" : 3.797468 , \"bid_side_total_vol\" : 163264 , \"ask_side_total_vol\" : 49507 , \"bid_side_total_cnt\" : 4 , \"ask_side_total_cnt\" : 3 , \"closing_oddlot_shares\" : 0 , \"fixed_trade_vol\" : 0 , \"suspend\" : false , \"simtrade\" : true , \"intraday_odd\" : true } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : TIC / v2 /*/ TSE / 2330 / ODDLOT | Event : SubscriptionOk TIC / v2 / replay / TSE / 2330 / ODDLOT Date : 2022 / 10 / 14 Time : 09 : 27 : 02.734685 Close : 410 TickType : 2 Shares : 12041 SharesSum : 204255 Simtrade : 1","title":"Tick intraday odd"},{"location":"tutor/market_data/streaming/stocks/#bidask","text":"In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . bidask , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : QUO / v1 / STK /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:31:05.066623\" , \"bid_price\" : [ \"410.5\" , \"410\" , \"409.5\" , \"409\" , \"408.5\" ], \"bid_volume\" : [ 22 , 357 , 101 , 171 , 89 ], \"diff_bid_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"ask_price\" : [ \"411\" , \"411.5\" , \"412\" , \"412.5\" , \"413\" ], \"ask_volume\" : [ 300 , 185 , 603 , 220 , 664 ], \"diff_ask_vol\" : [ - 1 , 0 , 0 , 0 , 0 ], \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUT \uff0f */ TSE / 2330 | Event : SubscriptionOk QUT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 32 : 15.316453 BidPrice : [ 410.5 , 410 , 409.5 , 409 , 408.5 ] AskPrice : [ 411 , 411.5 , 412 , 412.5 , 413 ] BidVolume : [ 91 , 338 , 218 , 161 , 89 ] AskVolume : [ 301 , 170 , 629 , 230 , 671 ]","title":"BidAsk"},{"location":"tutor/market_data/streaming/stocks/#bidask-intraday-odd","text":"In _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . bidask , intradayOdd : true , version : QuoteVersion . v1 ); Out QuoteVersion.v1 Response Code : 0 | Event code : 16 | Info : QUO / v1 / ODD /*/ TSE / 2330 | Event : SubscriptionOk Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:29:42.875584\" , \"bid_price\" : [ \"410\" , \"409.5\" , \"409\" , \"408.5\" , \"408\" ], \"bid_volume\" : [ 18 , 8840 , 62404 , 54036 , 11476 ], \"diff_bid_vol\" : [ 15319 , - 98508 , - 40662 , 52024 , 6716 ], \"ask_price\" : [ \"410.5\" , \"411\" , \"411.5\" , \"412\" , \"412.5\" ], \"ask_volume\" : [ 27978 , 44773 , 12908 , 126508 , 314258 ], \"diff_ask_vol\" : [ 14264 , - 15181 , - 87825 , - 124052 , 409216 ], \"suspend\" : false , \"simtrade\" : true , \"intraday_odd\" : true } QuoteVersion.v0 Response Code : 0 | Event code : 16 | Info : QUO / v2 /*/ TSE / 2330 / ODDLOT | Event : SubscriptionOk QUO / v2 / replay / TSE / 2330 / ODDLOT Date : 2022 / 10 / 14 Time : 09 : 28 : 42.631677 BidPrice : [ 410 , 409.5 , 409 , 408.5 , 408 ] AskPrice : [ 410.5 , 411 , 411.5 , 412 , 412.5 ] BidShares : [ 2432 , 9465 , 10197 , 53906 , 11176 ] AskShares : [ 27317 , 43593 , 12812 , 126623 , 251203 ] Simtrade : 1","title":"BidAsk intraday odd"},{"location":"tutor/market_data/streaming/stocks/#quote","text":"In public class Program { public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . Subscribe ( contract : _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], quoteType : QuoteType . quote , version : QuoteVersion . v1 ); Console . ReadKey (); } } Out Response Code : 0 | Event code : 16 | Info : QUO / v2 / STK \uff0f */ TSE / 2330 | Event : SubscriptionOk Exchange . TSE QuoteSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:34:34.158334\" , \"open\" : 414.5 , \"avg_price\" : 412.36 , \"close\" : 411.5 , \"high\" : 414.5 , \"low\" : 409.0 , \"amount\" : 411500.0 , \"total_amount\" : 7285720500.0 , \"volume\" : 0 , \"total_volume\" : 17668 , \"tick_type\" : 2 , \"chg_type\" : 2 , \"price_chg\" : 16.5 , \"pct_chg\" : 4.17 , \"bid_side_total_vol\" : 11425 , \"ask_side_total_vol\" : 6243 , \"bid_side_total_cnt\" : 1540 , \"ask_side_total_cnt\" : 2299 , \"closing_oddlot_shares\" : 0 , \"closing_oddlot_close\" : 0.0 , \"closing_oddlot_amount\" : 0.0 , \"closing_oddlot_bid_price\" : 0.0 , \"closing_oddlot_ask_price\" : 0.0 , \"fixed_trade_vol\" : 0 , \"fixed_trade_amount\" : 0.0 , \"bid_price\" : [ \"411.5\" , \"411\" , \"410.5\" , \"410\" , \"409.5\" ], \"bid_volume\" : [ 264 , 117 , 449 , 461 , 160 ], \"diff_bid_vol\" : [ 0 , - 22 , 0 , 0 , 0 ], \"ask_price\" : [ \"412\" , \"412.5\" , \"413\" , \"413.5\" , \"414\" ], \"ask_volume\" : [ 639 , 261 , 657 , 286 , 797 ], \"diff_ask_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"avail_borrowing\" : 3717809 , \"suspend\" : false , \"simtrade\" : false }","title":"Quote"},{"location":"tutor/market_data/streaming/stocks/#quote-callback","text":"In default, we set quote callback as print function. You can modify callback function as you wish. Just remember, always avoid making calulations inside the callback function.","title":"Quote Callback"},{"location":"tutor/market_data/streaming/stocks/#set-quote-callback","text":"In QuoteVersion.v1 public class Program { private static void myQuoteCB_v1 ( Exchange exchange , dynamic quote ) { Console . WriteLine ( $ \"QuoteCB_v1 | Exchange.{exchange} {quote.GetType().Name} {quote}\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . SetQuoteCallback_v1 ( myQuoteCB_v1 ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); System . Threading . Thread . Sleep ( 5000 ); } } QuoteVersion.v0 public class Program { private static void myQuoteCB ( string topic , Dictionary < string , dynamic > msg ) { Console . WriteLine ( $ \"myQuoteCB | Topic: {topic}\" ); foreach ( var item in msg ) { Console . WriteLine ( item . Key + \": \" + item . Value ); } Console . WriteLine ( \"-----------------------------------\" ); } public static void Main ( string [] args ) { var _api = new Shioaji (); var _accounts = _api . Login ( \"PERSON_ID\" , \"PASSWORD\" ); _api . SetQuoteCallback ( myQuoteCB ); _api . Subscribe ( _api . Contracts . Stocks [ \"TSE\" ][ \"2330\" ], QuoteType . bidask ); System . Threading . Thread . Sleep ( 5000 ); } } Out QuoteVersion.v1 QuoteCB_v1 | Exchange . TSE BidAskSTKv1 { \"code\" : \"2330\" , \"datetime\" : \"2022/10/14 09:39:00.354081\" , \"bid_price\" : [ \"411\" , \"410.5\" , \"410\" , \"409.5\" , \"409\" ], \"bid_volume\" : [ 577 , 191 , 364 , 185 , 148 ], \"diff_bid_vol\" : [ 0 , 0 , 0 , 0 , 0 ], \"ask_price\" : [ \"411.5\" , \"412\" , \"412.5\" , \"413\" , \"413.5\" ], \"ask_volume\" : [ 53 , 609 , 230 , 750 , 358 ], \"diff_ask_vol\" : [ - 4 , 0 , 0 , 0 , 0 ], \"suspend\" : false , \"simtrade\" : false , \"intraday_odd\" : false } QuoteVersion.v0 myQuoteCB | Topic : QUT / idcdmzpcr01 / TSE / 2330 Date : 2022 / 10 / 14 Time : 09 : 37 : 02.268206 BidPrice : [ 411 , 410.5 , 410 , 409.5 , 409 ] AskPrice : [ 411.5 , 412 , 412.5 , 413 , 413.5 ] BidVolume : [ 107 , 132 , 563 , 188 , 150 ] AskVolume : [ 34 , 592 , 258 , 675 , 299 ]","title":"Set Quote Callback"},{"location":"tutor/order/CA/","text":"Limited by financial regulations in Taiwan, in order to use order and account api , you have to 1. sign the related documents. 2. apply for the CA, place your CA in your computer and then activate it. 1 Sign Documents \u00b6 Please refer to sign center and read the documents carefully before you sign. 2 Apply & Activate CA \u00b6 Apply for CA \u00b6 1. SinoPac Securities download eleader \u00b6 2. Login eleader \u00b6 3. \u5e33\u6236\u8cc7\u6599 -> (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a \u00b6 4. Click \"\u6b65\u9a5f\u8aaa\u660e\" \u00b6 5. CA \u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e \u00b6 Activate CA \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var res = _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"ca_password\" , \"person_id\" ); Console . WriteLine ( res . ToString ()); # caIsActivated : True If you use simulation account, you don't have to activate CA.","title":"CA & Signature"},{"location":"tutor/order/CA/#1-sign-documents","text":"Please refer to sign center and read the documents carefully before you sign.","title":"1 Sign Documents"},{"location":"tutor/order/CA/#2-apply-activate-ca","text":"","title":"2 Apply &amp; Activate CA"},{"location":"tutor/order/CA/#apply-for-ca","text":"","title":"Apply for CA"},{"location":"tutor/order/CA/#1-sinopac-securities-download-eleader","text":"","title":"1. SinoPac Securities download eleader"},{"location":"tutor/order/CA/#2-login-eleader","text":"","title":"2. Login eleader"},{"location":"tutor/order/CA/#3-3303","text":"","title":"3. \u5e33\u6236\u8cc7\u6599 -&gt; (3303)\u5e33\u865f\u8cc7\u6599\u8a2d\u5b9a"},{"location":"tutor/order/CA/#4-click","text":"","title":"4. Click \"\u6b65\u9a5f\u8aaa\u660e\""},{"location":"tutor/order/CA/#5-ca","text":"","title":"5. CA \u64cd\u4f5c\u6b65\u9a5f\u8aaa\u660e"},{"location":"tutor/order/CA/#activate-ca","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var res = _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"ca_password\" , \"person_id\" ); Console . WriteLine ( res . ToString ()); # caIsActivated : True If you use simulation account, you don't have to activate CA.","title":"Activate CA"},{"location":"tutor/order/FutureOption/","text":"Place Order \u00b6 First, you need login. \u00b6 Get Contract Object. \u00b6 In var contract = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ]; Making Order Object. \u00b6 Buy \u00b6 In var _futOptOrder = new FutOptOrder () { price = 12874 , quantity = 3 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = FutureOrderType . ROD , octype = OCType . Auto }; Order Object \u00b6 Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } first_sell ( str ): the type of first sell { true , false } octype ( str ): the type or order to open new position or close position future only { Auto , NewPosition , Cover , DayTrade } ( \u81ea\u52d5\u3001\u65b0\u5009\u3001\u5e73\u5009\u3001\u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order Place order \u00b6 In var _trade = _api . PlaceOrder ( contract , stockOrder ); Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 For Example \u00b6 Place Order ROD LMT \u00b6 In Production using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); var _contract = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ]; var _futOptOrder = new FutOptOrder () { price = 12874 , quantity = 3 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = FutureOrderType . ROD , octype = OCType . Auto }; var _trade = _api . PlaceOrder ( _contract , _futOptOrder ); Console . WriteLine ( _trade . ToString ()); Simulation using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji ( simulation : true ); var _accounts = _api . Login ( \"PAPIUSER07\" , \"2222\" ); var contract = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ]; var _futOptOrder = new FutOptOrder () { price = 12874 , quantity = 3 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = FutureOrderType . ROD , octype = OCType . Auto }; var _trade = _api . PlaceOrder ( _contract , _futOptOrder ); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , }, order ={ action = Buy , price = 12874 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = f3220bb4 , seqno = 906152 , account ={ account_type = F , person_id = PAPIUSER07 , broker_id = F002000 , account_id = 1107458 , signed = True , username = PAPIUSER07 , }, }, status ={ id = f3220bb4 , status = PendingSubmit , status_code = , order_ts = 1609120488 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 Cancel Order \u00b6 In _api . UpdateStatus (); _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , }, order ={ action = Buy , price = 12874 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = f3220bb4 , seqno = 906152 , account ={ account_type = F , person_id = PAPIUSER07 , broker_id = F002000 , account_id = 1107458 , signed = True , username = PAPIUSER07 , }, }, status ={ id = f3220bb4 , status = Cancelled , status_code = , order_ts = 1609120488 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, } Update Order \u00b6 In _api . UpdateStatus (); _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , }, order ={ action = Buy , price = 12874 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = f3220bb4 , seqno = 906152 , account ={ account_type = F , person_id = PAPIUSER07 , broker_id = F002000 , account_id = 1107458 , signed = True , username = PAPIUSER07 , }, }, status ={ id = f3220bb4 , status = Submitted , status_code = 00 , order_ts = 1609120488 , modified_ts = 0 , modified_price = 12875 , deal_quantity = 0 , cancel_quantity = 1 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, }","title":"Future and Option"},{"location":"tutor/order/FutureOption/#place-order","text":"","title":"Place Order"},{"location":"tutor/order/FutureOption/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/order/FutureOption/#get-contract-object","text":"In var contract = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ];","title":"Get Contract Object."},{"location":"tutor/order/FutureOption/#making-order-object","text":"","title":"Making Order Object."},{"location":"tutor/order/FutureOption/#buy","text":"In var _futOptOrder = new FutOptOrder () { price = 12874 , quantity = 3 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = FutureOrderType . ROD , octype = OCType . Auto };","title":"Buy"},{"location":"tutor/order/FutureOption/#order-object","text":"Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } first_sell ( str ): the type of first sell { true , false } octype ( str ): the type or order to open new position or close position future only { Auto , NewPosition , Cover , DayTrade } ( \u81ea\u52d5\u3001\u65b0\u5009\u3001\u5e73\u5009\u3001\u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order","title":"Order Object"},{"location":"tutor/order/FutureOption/#place-order_1","text":"In var _trade = _api . PlaceOrder ( contract , stockOrder ); Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place order"},{"location":"tutor/order/FutureOption/#for-example","text":"","title":"For Example"},{"location":"tutor/order/FutureOption/#place-order-rod-lmt","text":"In Production using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); var _contract = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ]; var _futOptOrder = new FutOptOrder () { price = 12874 , quantity = 3 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = FutureOrderType . ROD , octype = OCType . Auto }; var _trade = _api . PlaceOrder ( _contract , _futOptOrder ); Console . WriteLine ( _trade . ToString ()); Simulation using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji ( simulation : true ); var _accounts = _api . Login ( \"PAPIUSER07\" , \"2222\" ); var contract = _api . Contracts . Futures [ \"TXF\" ][ \"TXF202101\" ]; var _futOptOrder = new FutOptOrder () { price = 12874 , quantity = 3 , action = Action . Buy , price_type = FuturePriceType . LMT , order_type = FutureOrderType . ROD , octype = OCType . Auto }; var _trade = _api . PlaceOrder ( _contract , _futOptOrder ); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , }, order ={ action = Buy , price = 12874 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = f3220bb4 , seqno = 906152 , account ={ account_type = F , person_id = PAPIUSER07 , broker_id = F002000 , account_id = 1107458 , signed = True , username = PAPIUSER07 , }, }, status ={ id = f3220bb4 , status = PendingSubmit , status_code = , order_ts = 1609120488 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place Order ROD LMT"},{"location":"tutor/order/FutureOption/#cancel-order","text":"In _api . UpdateStatus (); _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , }, order ={ action = Buy , price = 12874 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = f3220bb4 , seqno = 906152 , account ={ account_type = F , person_id = PAPIUSER07 , broker_id = F002000 , account_id = 1107458 , signed = True , username = PAPIUSER07 , }, }, status ={ id = f3220bb4 , status = Cancelled , status_code = , order_ts = 1609120488 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, }","title":"Cancel Order"},{"location":"tutor/order/FutureOption/#update-order","text":"In _api . UpdateStatus (); _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = FUT , code = TXFA1 , category = TXF , symbol = TXF202101 , exchange = TAIFEX , limit_up = 15734 , limit_down = 12874 , reference = 14304 , update_date = 2020 / 12 / 28 , }, order ={ action = Buy , price = 12874 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = f3220bb4 , seqno = 906152 , account ={ account_type = F , person_id = PAPIUSER07 , broker_id = F002000 , account_id = 1107458 , signed = True , username = PAPIUSER07 , }, }, status ={ id = f3220bb4 , status = Submitted , status_code = 00 , order_ts = 1609120488 , modified_ts = 0 , modified_price = 12875 , deal_quantity = 0 , cancel_quantity = 1 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, }","title":"Update Order"},{"location":"tutor/order/IntradayOdd/","text":"Place Intraday Odd Order \u00b6 place intraday odd order jupyter link First, you need login. \u00b6 For Example \u00b6 Place Intraday Odd Order \u00b6 In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"IntradayOdd\" , octype = \"Auto\" , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) order = api . Order ( price = 90 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"IntradayOdd\" , octype = \"Auto\" , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) ) Cancel Intraday Odd Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) ) Update Intraday Odd Order \u00b6 Attention Intraday Odd can't update price. In api . update_status ( api . stock_account ) api . update_order ( trade = trade , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) )","title":"IntradayOdd"},{"location":"tutor/order/IntradayOdd/#place-intraday-odd-order","text":"place intraday odd order jupyter link","title":"Place Intraday Odd Order"},{"location":"tutor/order/IntradayOdd/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/order/IntradayOdd/#for-example","text":"","title":"For Example"},{"location":"tutor/order/IntradayOdd/#place-intraday-odd-order_1","text":"In Production import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE0050 order = api . Order ( price = 90 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"IntradayOdd\" , octype = \"Auto\" , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Simulation import shioaji as sj api = sj . Shioaji ( simulation = True ) accounts = api . login ( \"PAPIUSER01\" , \"2222\" , contracts_timeout = 10000 ) order = api . Order ( price = 90 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"IntradayOdd\" , octype = \"Auto\" , account = api . stock_account , ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , eference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '38e68afe' , seqno = '482283' , ordno = 'WA313' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '38e68afe' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 38 , 51 ), deals = [] ) )","title":"Place Intraday Odd Order"},{"location":"tutor/order/IntradayOdd/#cancel-intraday-odd-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 10 , deals = [] ) )","title":"Cancel Intraday Odd Order"},{"location":"tutor/order/IntradayOdd/#update-intraday-odd-order","text":"Attention Intraday Odd can't update price. In api . update_status ( api . stock_account ) api . update_order ( trade = trade , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '0050' , symbol = 'TSE0050' , name = '\u5143\u5927\u53f0\u706350' , category = '00' , limit_up = 115.8 , limit_down = 94.8 , reference = 105.3 , update_date = '2020/09/21' , margin_trading_balance = 15390 , short_selling_balance = 2 , day_trade =< DayTrade . Yes : 'Yes' > ), order = Order ( action =< Action . Buy : 'Buy' > , price = 90.0 , quantity = 10 , id = '9b44c3b2' , seqno = '482293' , ordno = 'WA328' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'PAPIUSER04' , broker_id = '9A95' , account_id = '0506112' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , order_lot =< TFTStockOrderLot . IntradayOdd : 'IntradayOdd' > ), status = OrderStatus ( id = '9b44c3b2' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 9 , 21 , 14 , 54 , 36 ), cancel_quantity = 2 , deals = [] ) )","title":"Update Intraday Odd Order"},{"location":"tutor/order/Reserve/","text":"Reserve Order \u00b6 First, you need to login and activate CA . \u00b6 Get Stock Reserve Summay Status \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var reserveSummary = _api . StockReserveSummary ( _api . StockAccount ); Console . WriteLine ( reserveSummary ); Out { stocks =[ contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, available_share = 5000 , reserved_share = 0 ], account ={ \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true } } Reserve Stock \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"ca_password\" , \"person_id\" ); _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var reserveStock = _api . ReserveStock ( _api . StockAccount , _contract , 1000 ); Console . WriteLine ( reserveStock ); Out { contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, account ={ \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true }, share = 1000 , status = True , info = \"\" , } Get Stock Reserve Detail Satus \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var reserveDetail = _api . StockReserveDetail ( _api . StockAccount ); Console . WriteLine ( reserveDetail ); Out { stocks =[ contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, share = 1000 , order_datetime = 1638253253 , status = True , info = \"\u5df2\u5b8c\u6210\" ], account ={ \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true } } Reserve Earmarking \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"ca_password\" , \"person_id\" ); _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var reserveEarmarking = _api . ReserveEarmarking ( _api . StockAccount , _contract , 1000 , 15.5 ); Console . WriteLine ( reserveEarmarking ); Out { contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, account ={ \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true }, share = 1000 , price = 15.5 , status = True , info = OK , } In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var earmarkingDetail = _api . EarmarkingDetail ( _api . StockAccount ); Console . WriteLine ( earmarkingDetail ); Out { stocks =[ { contract ={ \"security_type\" : \"STK\" , \"exchange\" : \"TSE\" , \"code\" : \"2890\" , \"symbol\" : \"\" , \"name\" : \"\u6c38\u8c50\u91d1\" , \"currency\" : \"TWD\" , \"category\" : \"\" , \"delivery_month\" : \"\" , \"delivery_date\" : \"\" , \"strike_price\" : 0 , \"option_right\" : \"\" , \"underlying_kind\" : \"\" , \"underlying_code\" : \"\" , \"unit\" : 1 , \"multiplier\" : 0 , \"limit_up\" : 0.0 , \"limit_down\" : 0.0 , \"reference\" : 0.0 , \"update_date\" : \"\" , \"day_trade\" : \"No\" , \"margin_trading_balance\" : 0 , \"short_selling_balance\" : 0 }, share = 1000 , price = 15.5 , amount = 15522 , order_datetime = 2022 / 8 / 5 \u4e0a\u5348 10 : 24 : 32 , status = True , info = \u6210\u529f , } ], account ={ \"account_type\" : \"S\" , \"person_id\" : \"A226237733\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"9816939\" , \"signed\" : true }, }","title":"Reserve Order"},{"location":"tutor/order/Reserve/#reserve-order","text":"","title":"Reserve Order"},{"location":"tutor/order/Reserve/#first-you-need-to-login-and-activate-ca","text":"","title":"First, you need to login and activate CA."},{"location":"tutor/order/Reserve/#get-stock-reserve-summay-status","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var reserveSummary = _api . StockReserveSummary ( _api . StockAccount ); Console . WriteLine ( reserveSummary ); Out { stocks =[ contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, available_share = 5000 , reserved_share = 0 ], account ={ \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true } }","title":"Get Stock Reserve Summay Status"},{"location":"tutor/order/Reserve/#reserve-stock","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"ca_password\" , \"person_id\" ); _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var reserveStock = _api . ReserveStock ( _api . StockAccount , _contract , 1000 ); Console . WriteLine ( reserveStock ); Out { contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, account ={ \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true }, share = 1000 , status = True , info = \"\" , }","title":"Reserve Stock"},{"location":"tutor/order/Reserve/#get-stock-reserve-detail-satus","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var reserveDetail = _api . StockReserveDetail ( _api . StockAccount ); Console . WriteLine ( reserveDetail ); Out { stocks =[ contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, share = 1000 , order_datetime = 1638253253 , status = True , info = \"\u5df2\u5b8c\u6210\" ], account ={ \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true } }","title":"Get Stock Reserve Detail Satus"},{"location":"tutor/order/Reserve/#reserve-earmarking","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"ca_password\" , \"person_id\" ); _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; var reserveEarmarking = _api . ReserveEarmarking ( _api . StockAccount , _contract , 1000 , 15.5 ); Console . WriteLine ( reserveEarmarking ); Out { contract ={ security_type = STK , code = 2890 , symbol = TSE2890 , exchange = TSE , limit_up = 18.45 , limit_down = 15.15 , reference = 16.8 , margin_trading_balance = 0 , short_selling_balance = 0 , update_date = 2022 / 08 / 05 , category = 17 , day_trade = OnlyBuy , name = \u6c38\u8c50\u91d1 , }, account ={ \"account_type\" : \"S\" , \"person_id\" : \"X123456789\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"12345678\" , \"signed\" : true }, share = 1000 , price = 15.5 , status = True , info = OK , } In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); var earmarkingDetail = _api . EarmarkingDetail ( _api . StockAccount ); Console . WriteLine ( earmarkingDetail ); Out { stocks =[ { contract ={ \"security_type\" : \"STK\" , \"exchange\" : \"TSE\" , \"code\" : \"2890\" , \"symbol\" : \"\" , \"name\" : \"\u6c38\u8c50\u91d1\" , \"currency\" : \"TWD\" , \"category\" : \"\" , \"delivery_month\" : \"\" , \"delivery_date\" : \"\" , \"strike_price\" : 0 , \"option_right\" : \"\" , \"underlying_kind\" : \"\" , \"underlying_code\" : \"\" , \"unit\" : 1 , \"multiplier\" : 0 , \"limit_up\" : 0.0 , \"limit_down\" : 0.0 , \"reference\" : 0.0 , \"update_date\" : \"\" , \"day_trade\" : \"No\" , \"margin_trading_balance\" : 0 , \"short_selling_balance\" : 0 }, share = 1000 , price = 15.5 , amount = 15522 , order_datetime = 2022 / 8 / 5 \u4e0a\u5348 10 : 24 : 32 , status = True , info = \u6210\u529f , } ], account ={ \"account_type\" : \"S\" , \"person_id\" : \"A226237733\" , \"broker_id\" : \"9A95\" , \"account_id\" : \"9816939\" , \"signed\" : true }, }","title":"Reserve Earmarking"},{"location":"tutor/order/Stock/","text":"Place Order \u00b6 First, you need login. \u00b6 Get Contract Object. \u00b6 In var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ]; Making Order Object. \u00b6 Buy \u00b6 In var stockOrder = new StockOrder () { price = 10.1 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; Sell \u00b6 In var stockOrder = new StockOrder () { price = 10.1 , quantity = 3 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; First Sell \u00b6 In var stockOrder = new StockOrder () { price = 10.1 , quantity = 3 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . Yes , custom_field = \"test\" }; Order Object \u00b6 Attributes price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , Netting , MarginTrading , ShortSelling } ( \u73fe\u80a1\u3001\u9918\u984d\u4ea4\u5272\u3001\u878d\u8cc7\u3001\u878d\u5238 ) order_lot ( str ): the type of order { Common , BlockTrade Fixing , Odd , IntradayOdd } ( \u6574\u80a1\u3001\u9245\u984d\u3001\u5b9a\u76e4\u3001\u96f6\u80a1 , \u76e4\u4e2d\u96f6\u80a1 ) first_sell ( str ): the type of first sell { true , false } account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order custom_field ( str ): custom field Place Order \u00b6 In var _trade = _api . PlaceOrder ( contract , stockOrder ); For Example \u00b6 Place Order ROD LMT \u00b6 In Production using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _stockOrder = new StockOrder () { price = 37.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Simulation using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji ( simulation : true ); var _accounts = _api . Login ( \"PAPIUSER01\" , \"2222\" ); var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _stockOrder = new StockOrder () { price = 37.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = STK , code = 1101 , symbol = TSE1101 , exchange = TSE , limit_up = 46.95 , limit_down = 38.45 , reference = 42.7 , margin_trading_balance = 28047 , short_selling_balance = 15 , update_date = 2020 / 12 / 25 , category = 01 , day_trade = No , }, order ={ action = Buy , price = 37.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account ={ account_type = S , person_id = PAPIUSER07 , broker_id = 9 A95 , account_id = 0512999 , signed = True , username = PAPIUSER07 , }, }, status ={ id = c9854d9d , status = PendingSubmit , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } Place Order about First Sell \u00b6 In Production using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _stockOrder = new StockOrder () { price = 37.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . Yes , custom_field = \"test\" }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Simulation using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji ( simulation : true ); var _accounts = _api . Login ( \"PAPIUSER01\" , \"2222\" ); var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _stockOrder = new StockOrder () { price = 37.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . Yes , custom_field = \"test\" }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = STK , code = 1101 , symbol = TSE1101 , exchange = TSE , limit_up = 46.95 , limit_down = 38.45 , reference = 42.7 , margin_trading_balance = 28047 , short_selling_balance = 15 , update_date = 2020 / 12 / 25 , category = 01 , day_trade = No , }, order ={ action = Buy , price = 37.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = true , id = 36970 be4 , seqno = 024600 , ordno = WA038 , custom_field = test , account ={ account_type = S , person_id = PAPIUSER07 , broker_id = 9 A95 , account_id = 0512999 , signed = True , username = PAPIUSER07 , }, }, status ={ id = 36970 be4 , status = PendingSubmit , status_code = 0 , order_ts = 1608864475 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 Cancel Order \u00b6 In _api . UpdateStatus (); _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = STK , code = 1101 , symbol = TSE1101 , exchange = TSE , limit_up = 46.95 , limit_down = 38.45 , reference = 42.7 , margin_trading_balance = 28047 , short_selling_balance = 15 , update_date = 2020 / 12 / 25 , category = 01 , day_trade = No , }, order ={ action = Buy , price = 37.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = true , id = a9c37faa , seqno = 024609 , ordno = WA057 , custom_field = test , account ={ account_type = S , person_id = PAPIUSER07 , broker_id = 9 A95 , account_id = 0512999 , signed = True , }, }, status ={ id = a9c37faa , status = Cancelled , status_code = 00 , order_ts = 1608885083 , modified_ts = 1608885059 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, } Update Order \u00b6 In _trade = _api . UpdateOrder ( _trade , 38 , 1 ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = STK , code = 1101 , symbol = TSE1101 , exchange = TSE , limit_up = 46.95 , limit_down = 38.45 , reference = 42.7 , margin_trading_balance = 28047 , short_selling_balance = 15 , update_date = 2020 / 12 / 25 , category = 01 , day_trade = No , }, order ={ action = Buy , price = 37.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = true , id = 3 ea7a36f , seqno = 024612 , ordno = WA059 , custom_field = test , account ={ account_type = S , person_id = PAPIUSER07 , broker_id = 9 A95 , account_id = 0512999 , signed = True , }, }, status ={ id = 3 ea7a36f , status = Submitted , status_code = 00 , order_ts = 1608885879 , modified_ts = 1608885854 , modified_price = 38 , deal_quantity = 0 , cancel_quantity = 1 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, }","title":"Stock"},{"location":"tutor/order/Stock/#place-order","text":"","title":"Place Order"},{"location":"tutor/order/Stock/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/order/Stock/#get-contract-object","text":"In var contract = _api . Contracts . Stocks [ \"TSE\" ][ \"2890\" ];","title":"Get Contract Object."},{"location":"tutor/order/Stock/#making-order-object","text":"","title":"Making Order Object."},{"location":"tutor/order/Stock/#buy","text":"In var stockOrder = new StockOrder () { price = 10.1 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" };","title":"Buy"},{"location":"tutor/order/Stock/#sell","text":"In var stockOrder = new StockOrder () { price = 10.1 , quantity = 3 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" };","title":"Sell"},{"location":"tutor/order/Stock/#first-sell","text":"In var stockOrder = new StockOrder () { price = 10.1 , quantity = 3 , action = Action . Sell , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . Yes , custom_field = \"test\" };","title":"First Sell"},{"location":"tutor/order/Stock/#order-object","text":"Attributes price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , Netting , MarginTrading , ShortSelling } ( \u73fe\u80a1\u3001\u9918\u984d\u4ea4\u5272\u3001\u878d\u8cc7\u3001\u878d\u5238 ) order_lot ( str ): the type of order { Common , BlockTrade Fixing , Odd , IntradayOdd } ( \u6574\u80a1\u3001\u9245\u984d\u3001\u5b9a\u76e4\u3001\u96f6\u80a1 , \u76e4\u4e2d\u96f6\u80a1 ) first_sell ( str ): the type of first sell { true , false } account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order custom_field ( str ): custom field","title":"Order Object"},{"location":"tutor/order/Stock/#place-order_1","text":"In var _trade = _api . PlaceOrder ( contract , stockOrder );","title":"Place Order"},{"location":"tutor/order/Stock/#for-example","text":"","title":"For Example"},{"location":"tutor/order/Stock/#place-order-rod-lmt","text":"In Production using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _stockOrder = new StockOrder () { price = 37.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Simulation using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji ( simulation : true ); var _accounts = _api . Login ( \"PAPIUSER01\" , \"2222\" ); var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _stockOrder = new StockOrder () { price = 37.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . No , custom_field = \"test\" }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = STK , code = 1101 , symbol = TSE1101 , exchange = TSE , limit_up = 46.95 , limit_down = 38.45 , reference = 42.7 , margin_trading_balance = 28047 , short_selling_balance = 15 , update_date = 2020 / 12 / 25 , category = 01 , day_trade = No , }, order ={ action = Buy , price = 37.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = false , id = c9854d9d , seqno = 024592 , ordno = WA036 , custom_field = test , account ={ account_type = S , person_id = PAPIUSER07 , broker_id = 9 A95 , account_id = 0512999 , signed = True , username = PAPIUSER07 , }, }, status ={ id = c9854d9d , status = PendingSubmit , status_code = 0 , order_ts = 1608863715 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, }","title":"Place Order ROD LMT"},{"location":"tutor/order/Stock/#place-order-about-first-sell","text":"In Production using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _stockOrder = new StockOrder () { price = 37.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . Yes , custom_field = \"test\" }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Simulation using System ; using Sinopac.Shioaji ; using Action = Sinopac . Shioaji . Action ; Shioaji _api = new Shioaji ( simulation : true ); var _accounts = _api . Login ( \"PAPIUSER01\" , \"2222\" ); var _contract = _api . Contracts . Stocks [ \"TSE\" ][ \"1101\" ]; var _stockOrder = new StockOrder () { price = 37.7 , quantity = 3 , action = Action . Buy , price_type = StockPriceType . LMT , order_type = StockOrderType . ROD , order_lot = StockOrderLot . Common , first_sell = StockFirstSell . Yes , custom_field = \"test\" }; var _trade = _api . PlaceOrder ( _contract , _stockOrder ); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = STK , code = 1101 , symbol = TSE1101 , exchange = TSE , limit_up = 46.95 , limit_down = 38.45 , reference = 42.7 , margin_trading_balance = 28047 , short_selling_balance = 15 , update_date = 2020 / 12 / 25 , category = 01 , day_trade = No , }, order ={ action = Buy , price = 37.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = true , id = 36970 be4 , seqno = 024600 , ordno = WA038 , custom_field = test , account ={ account_type = S , person_id = PAPIUSER07 , broker_id = 9 A95 , account_id = 0512999 , signed = True , username = PAPIUSER07 , }, }, status ={ id = 36970 be4 , status = PendingSubmit , status_code = 0 , order_ts = 1608864475 , modified_ts = 0 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 0 , }, } Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place Order about First Sell"},{"location":"tutor/order/Stock/#cancel-order","text":"In _api . UpdateStatus (); _trade = _api . CancelOrder ( _trade ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = STK , code = 1101 , symbol = TSE1101 , exchange = TSE , limit_up = 46.95 , limit_down = 38.45 , reference = 42.7 , margin_trading_balance = 28047 , short_selling_balance = 15 , update_date = 2020 / 12 / 25 , category = 01 , day_trade = No , }, order ={ action = Buy , price = 37.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = true , id = a9c37faa , seqno = 024609 , ordno = WA057 , custom_field = test , account ={ account_type = S , person_id = PAPIUSER07 , broker_id = 9 A95 , account_id = 0512999 , signed = True , }, }, status ={ id = a9c37faa , status = Cancelled , status_code = 00 , order_ts = 1608885083 , modified_ts = 1608885059 , modified_price = 0 , deal_quantity = 0 , cancel_quantity = 3 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, }","title":"Cancel Order"},{"location":"tutor/order/Stock/#update-order","text":"In _trade = _api . UpdateOrder ( _trade , 38 , 1 ); _api . UpdateStatus (); Console . WriteLine ( _trade . ToString ()); Out { contract ={ security_type = STK , code = 1101 , symbol = TSE1101 , exchange = TSE , limit_up = 46.95 , limit_down = 38.45 , reference = 42.7 , margin_trading_balance = 28047 , short_selling_balance = 15 , update_date = 2020 / 12 / 25 , category = 01 , day_trade = No , }, order ={ action = Buy , price = 37.7 , quantity = 3 , price_type = LMT , order_type = ROD , order_lot = Common , order_cond = Cash , first_sell = true , id = 3 ea7a36f , seqno = 024612 , ordno = WA059 , custom_field = test , account ={ account_type = S , person_id = PAPIUSER07 , broker_id = 9 A95 , account_id = 0512999 , signed = True , }, }, status ={ id = 3 ea7a36f , status = Submitted , status_code = 00 , order_ts = 1608885879 , modified_ts = 1608885854 , modified_price = 38 , deal_quantity = 0 , cancel_quantity = 1 , deals = System . Collections . Generic . List ` 1 [ Sinopac . Shioaji . Deal ], }, }","title":"Update Order"},{"location":"tutor/order/UpdateStatus/","text":"First, you need login. \u00b6 Update Status \u00b6 In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); _api . UpdateStatus (); Console . WriteLine ( _api . ListTrades (). ToString ()); Get trade list \u00b6 Out [ { contract={ security_type=STK, code=1101, exchange=TSE, limit_up=0, limit_down=0, reference=0, margin_trading_balance=0, short_selling_balance=0, day_trade=No, }, order={ action=Buy, price=37.65, quantity=1, price_type=LMT, order_type=ROD, order_lot=Common, order_cond=Cash, first_sell=No, id=fd55a308, seqno=025054, ordno=WA085, custom_field=test, account={ account_type=S, person_id=PAPIUSER07, broker_id=9A95, account_id=0512999, signed=True, }, }, status={ id=fd55a308, status=Submitted, status_code=00, order_ts=1609385617, modified_ts=1609385592, modified_price=0, deal_quantity=0, cancel_quantity=0, deals=System.Collections.Generic.List`1[Sinopac.Shioaji.Deal] , }, } ]","title":"Update Status"},{"location":"tutor/order/UpdateStatus/#first-you-need-login","text":"","title":"First, you need login."},{"location":"tutor/order/UpdateStatus/#update-status","text":"In using System ; using Sinopac.Shioaji ; Shioaji _api = new Shioaji (); var _accounts = _api . Login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ); _api . ca_activate ( \"C:\\\\ekey\\\\551\\\\person_id\\\\S\\\\Sinopac.pfx\" , \"YOUR_CA_PASSWORD\" , \"Person of this Ca\" ); _api . UpdateStatus (); Console . WriteLine ( _api . ListTrades (). ToString ());","title":"Update Status"},{"location":"tutor/order/UpdateStatus/#get-trade-list","text":"Out [ { contract={ security_type=STK, code=1101, exchange=TSE, limit_up=0, limit_down=0, reference=0, margin_trading_balance=0, short_selling_balance=0, day_trade=No, }, order={ action=Buy, price=37.65, quantity=1, price_type=LMT, order_type=ROD, order_lot=Common, order_cond=Cash, first_sell=No, id=fd55a308, seqno=025054, ordno=WA085, custom_field=test, account={ account_type=S, person_id=PAPIUSER07, broker_id=9A95, account_id=0512999, signed=True, }, }, status={ id=fd55a308, status=Submitted, status_code=00, order_ts=1609385617, modified_ts=1609385592, modified_price=0, deal_quantity=0, cancel_quantity=0, deals=System.Collections.Generic.List`1[Sinopac.Shioaji.Deal] , }, } ]","title":"Get trade list"},{"location":"zh-tw/","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Shioaji"},{"location":"zh-tw/#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"zh-tw/#installation","text":"","title":"Installation"},{"location":"zh-tw/#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"zh-tw/#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"}]}